
Smart_Home_sla.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00004ac6  00004b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000b8  008000b8  00004bb2  2**0
                  ALLOC
  3 .stab         00004bfc  00000000  00000000  00004bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e9c  00000000  00000000  000097b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b93b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ea81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fa04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fb84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fe46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_1>
       8:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_2>
       c:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_6>
      1c:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_7>
      20:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_8>
      24:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <main>
      8a:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e9       	ldi	r26, 0x9C	; 156
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e9       	ldi	r24, 0x9C	; 156
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e9       	ldi	r22, 0x9C	; 156
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 22 	jmp	0x452a	; 0x452a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b5 22 	jmp	0x456a	; 0x456a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer1_voidInit>:

static void (*Timer_ptrFunc[4])(void) = {NULL};


void Timer1_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OC1A, u8 Copy_u8OC1B)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Timer1_voidInit+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <Timer1_voidInit+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <Timer1_voidInit+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
     cb2:	2c 83       	std	Y+4, r18	; 0x04
    //Select Timer1 Mode
    switch (Copy_u8Mode)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3e 83       	std	Y+6, r19	; 0x06
     cbc:	2d 83       	std	Y+5, r18	; 0x05
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	8b 30       	cpi	r24, 0x0B	; 11
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <Timer1_voidInit+0x2c>
     cc8:	56 c0       	rjmp	.+172    	; 0xd76 <Timer1_voidInit+0xd8>
     cca:	2d 81       	ldd	r18, Y+5	; 0x05
     ccc:	3e 81       	ldd	r19, Y+6	; 0x06
     cce:	2c 30       	cpi	r18, 0x0C	; 12
     cd0:	31 05       	cpc	r19, r1
     cd2:	54 f4       	brge	.+20     	; 0xce8 <Timer1_voidInit+0x4a>
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	9e 81       	ldd	r25, Y+6	; 0x06
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	99 f0       	breq	.+38     	; 0xd02 <Timer1_voidInit+0x64>
     cdc:	2d 81       	ldd	r18, Y+5	; 0x05
     cde:	3e 81       	ldd	r19, Y+6	; 0x06
     ce0:	24 30       	cpi	r18, 0x04	; 4
     ce2:	31 05       	cpc	r19, r1
     ce4:	59 f1       	breq	.+86     	; 0xd3c <Timer1_voidInit+0x9e>
     ce6:	9d c0       	rjmp	.+314    	; 0xe22 <Timer1_voidInit+0x184>
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	8e 30       	cpi	r24, 0x0E	; 14
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <Timer1_voidInit+0x56>
     cf2:	5e c0       	rjmp	.+188    	; 0xdb0 <Timer1_voidInit+0x112>
     cf4:	2d 81       	ldd	r18, Y+5	; 0x05
     cf6:	3e 81       	ldd	r19, Y+6	; 0x06
     cf8:	2f 30       	cpi	r18, 0x0F	; 15
     cfa:	31 05       	cpc	r19, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <Timer1_voidInit+0x62>
     cfe:	75 c0       	rjmp	.+234    	; 0xdea <Timer1_voidInit+0x14c>
     d00:	90 c0       	rjmp	.+288    	; 0xe22 <Timer1_voidInit+0x184>
    {
    case TIMER1_NORMAL_MODE:
        CLEAR_BIT(TCCR1A, WGM10);
     d02:	af e4       	ldi	r26, 0x4F	; 79
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ef e4       	ldi	r30, 0x4F	; 79
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1A, WGM11);
     d10:	af e4       	ldi	r26, 0x4F	; 79
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ef e4       	ldi	r30, 0x4F	; 79
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8d 7f       	andi	r24, 0xFD	; 253
     d1c:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B, WGM12);
     d1e:	ae e4       	ldi	r26, 0x4E	; 78
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ee e4       	ldi	r30, 0x4E	; 78
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B, WGM13);
     d2c:	ae e4       	ldi	r26, 0x4E	; 78
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ee e4       	ldi	r30, 0x4E	; 78
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8f 7e       	andi	r24, 0xEF	; 239
     d38:	8c 93       	st	X, r24
     d3a:	73 c0       	rjmp	.+230    	; 0xe22 <Timer1_voidInit+0x184>
        break;
    case TIMER1_CTC_MODE_TOP_OCR1A:
        CLEAR_BIT(TCCR1A, WGM10);
     d3c:	af e4       	ldi	r26, 0x4F	; 79
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ef e4       	ldi	r30, 0x4F	; 79
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1A, WGM11);
     d4a:	af e4       	ldi	r26, 0x4F	; 79
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ef e4       	ldi	r30, 0x4F	; 79
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8d 7f       	andi	r24, 0xFD	; 253
     d56:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
     d58:	ae e4       	ldi	r26, 0x4E	; 78
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ee e4       	ldi	r30, 0x4E	; 78
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B, WGM13);
     d66:	ae e4       	ldi	r26, 0x4E	; 78
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ee e4       	ldi	r30, 0x4E	; 78
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7e       	andi	r24, 0xEF	; 239
     d72:	8c 93       	st	X, r24
     d74:	56 c0       	rjmp	.+172    	; 0xe22 <Timer1_voidInit+0x184>
        break;
    case TIMER1_PHASE_CORRECT_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
     d76:	af e4       	ldi	r26, 0x4F	; 79
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ef e4       	ldi	r30, 0x4F	; 79
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	81 60       	ori	r24, 0x01	; 1
     d82:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
     d84:	af e4       	ldi	r26, 0x4F	; 79
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ef e4       	ldi	r30, 0x4F	; 79
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B, WGM12);
     d92:	ae e4       	ldi	r26, 0x4E	; 78
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ee e4       	ldi	r30, 0x4E	; 78
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	87 7f       	andi	r24, 0xF7	; 247
     d9e:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
     da0:	ae e4       	ldi	r26, 0x4E	; 78
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	ee e4       	ldi	r30, 0x4E	; 78
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	8c 93       	st	X, r24
     dae:	39 c0       	rjmp	.+114    	; 0xe22 <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_ICR1:
        CLEAR_BIT(TCCR1A, WGM10);
     db0:	af e4       	ldi	r26, 0x4F	; 79
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ef e4       	ldi	r30, 0x4F	; 79
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8e 7f       	andi	r24, 0xFE	; 254
     dbc:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
     dbe:	af e4       	ldi	r26, 0x4F	; 79
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ef e4       	ldi	r30, 0x4F	; 79
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
     dcc:	ae e4       	ldi	r26, 0x4E	; 78
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ee e4       	ldi	r30, 0x4E	; 78
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
     dda:	ae e4       	ldi	r26, 0x4E	; 78
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ee e4       	ldi	r30, 0x4E	; 78
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 61       	ori	r24, 0x10	; 16
     de6:	8c 93       	st	X, r24
     de8:	1c c0       	rjmp	.+56     	; 0xe22 <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
     dea:	af e4       	ldi	r26, 0x4F	; 79
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ef e4       	ldi	r30, 0x4F	; 79
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
     df8:	af e4       	ldi	r26, 0x4F	; 79
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ef e4       	ldi	r30, 0x4F	; 79
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	82 60       	ori	r24, 0x02	; 2
     e04:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
     e06:	ae e4       	ldi	r26, 0x4E	; 78
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ee e4       	ldi	r30, 0x4E	; 78
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	88 60       	ori	r24, 0x08	; 8
     e12:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
     e14:	ae e4       	ldi	r26, 0x4E	; 78
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ee e4       	ldi	r30, 0x4E	; 78
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 61       	ori	r24, 0x10	; 16
     e20:	8c 93       	st	X, r24
        break;
    }
  
    
    //Config Action OC1A PIN
    CLEAR_BITS_IN_REG(TCCR1A, OC1A_CLR_MASK);
     e22:	af e4       	ldi	r26, 0x4F	; 79
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ef e4       	ldi	r30, 0x4F	; 79
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 73       	andi	r24, 0x3F	; 63
     e2e:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, OC1A_CLR_MASK);
     e30:	af e4       	ldi	r26, 0x4F	; 79
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ef e4       	ldi	r30, 0x4F	; 79
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 6c       	ori	r24, 0xC0	; 192
     e3c:	8c 93       	st	X, r24

    //Config Action OC1B PIN
    CLEAR_BITS_IN_REG(TCCR1A, OC1B_CLR_MASK);
     e3e:	af e4       	ldi	r26, 0x4F	; 79
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	ef e4       	ldi	r30, 0x4F	; 79
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8f 7c       	andi	r24, 0xCF	; 207
     e4a:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1B);
     e4c:	af e4       	ldi	r26, 0x4F	; 79
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ef e4       	ldi	r30, 0x4F	; 79
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	90 81       	ld	r25, Z
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	89 2b       	or	r24, r25
     e5a:	8c 93       	st	X, r24

    //Select Clock Source
    //Clear CS12:10
    CLEAR_BITS_IN_REG(TCCR1B, OC1B_CLR_MASK);
     e5c:	ae e4       	ldi	r26, 0x4E	; 78
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ee e4       	ldi	r30, 0x4E	; 78
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8f 7c       	andi	r24, 0xCF	; 207
     e68:	8c 93       	st	X, r24
    //Set Clock source
    SET_BITS_IN_REG(TCCR1B, Copy_u8Scaler);
     e6a:	ae e4       	ldi	r26, 0x4E	; 78
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ee e4       	ldi	r30, 0x4E	; 78
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	90 81       	ld	r25, Z
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	89 2b       	or	r24, r25
     e78:	8c 93       	st	X, r24
 
}
     e7a:	26 96       	adiw	r28, 0x06	; 6
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <Timer1_voidSetPreloadValue>:

void Timer1_voidSetPreloadValue(u16 Copy_u16Value)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <Timer1_voidSetPreloadValue+0x6>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16Value;
     e9a:	ec e4       	ldi	r30, 0x4C	; 76
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	80 83       	st	Z, r24
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <Timer1_voidReadValue>:

u16  Timer1_voidReadValue(void)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
     eb8:	ec e4       	ldi	r30, 0x4C	; 76
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Timer1_voidSetOCR1AValue>:

void Timer1_voidSetOCR1AValue(u16 Copy_u16Value)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <Timer1_voidSetOCR1AValue+0x6>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
     ed4:	ea e4       	ldi	r30, 0x4A	; 74
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <Timer1_voidSetOCR1BValue>:

void Timer1_voidSetOCR1BValue(u16 Copy_u16Value)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Timer1_voidSetOCR1BValue+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16Value;
     ef8:	e8 e4       	ldi	r30, 0x48	; 72
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
     f16:	a9 e5       	ldi	r26, 0x59	; 89
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e9 e5       	ldi	r30, 0x59	; 89
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	84 60       	ori	r24, 0x04	; 4
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <Timer1_voidOVFInterruptDisable>:

void Timer1_voidOVFInterruptDisable(void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE1);
     f32:	a9 e5       	ldi	r26, 0x59	; 89
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e9 e5       	ldi	r30, 0x59	; 89
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <Timer1_voidOC1AInterruptEnable>:

void Timer1_voidOC1AInterruptEnable(void)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
     f4e:	a9 e5       	ldi	r26, 0x59	; 89
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e9 e5       	ldi	r30, 0x59	; 89
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 61       	ori	r24, 0x10	; 16
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <Timer1_voidOC1AInterruptDisable>:

void Timer1_voidOC1AInterruptDisable(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
     f6a:	a9 e5       	ldi	r26, 0x59	; 89
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e9 e5       	ldi	r30, 0x59	; 89
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7e       	andi	r24, 0xEF	; 239
     f76:	8c 93       	st	X, r24
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <Timer1_voidOC1BInterruptEnable>:

void Timer1_voidOC1BInterruptEnable(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
     f86:	a9 e5       	ldi	r26, 0x59	; 89
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 e5       	ldi	r30, 0x59	; 89
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 60       	ori	r24, 0x08	; 8
     f92:	8c 93       	st	X, r24
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <Timer1_voidOC1BInterruptDisable>:

void Timer1_voidOC1BInterruptDisable(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1B);
     fa2:	a9 e5       	ldi	r26, 0x59	; 89
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e9 e5       	ldi	r30, 0x59	; 89
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	87 7f       	andi	r24, 0xF7	; 247
     fae:	8c 93       	st	X, r24
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <Timer1_voidOVFSetCallBack>:



void Timer1_voidOVFSetCallBack(void (*Copy_pfNotification)(void))
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <Timer1_voidOVFSetCallBack+0x6>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[0] = Copy_pfNotification;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	90 93 b9 00 	sts	0x00B9, r25
     fcc:	80 93 b8 00 	sts	0x00B8, r24
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <Timer1_voidOC1ASetCallBack>:

void Timer1_voidOC1ASetCallBack(void (*Copy_pfNotification)(void))
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <Timer1_voidOC1ASetCallBack+0x6>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[1] = Copy_pfNotification;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	90 93 bb 00 	sts	0x00BB, r25
     ff0:	80 93 ba 00 	sts	0x00BA, r24
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Timer1_voidOC1BSetCallBack>:

void Timer1_voidOC1BSetCallBack(void (*Copy_pfNotification)(void))
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <Timer1_voidOC1BSetCallBack+0x6>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[2] = Copy_pfNotification;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	90 93 bd 00 	sts	0x00BD, r25
    1014:	80 93 bc 00 	sts	0x00BC, r24
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <Timer1_voidICUSetCallBack>:


void Timer1_voidICUSetCallBack(void (*Copy_pfNotification)(void))
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <Timer1_voidICUSetCallBack+0x6>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[3] = Copy_pfNotification;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	90 93 bf 00 	sts	0x00BF, r25
    1038:	80 93 be 00 	sts	0x00BE, r24
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <Timer1_voidICUSetTriggerEdge>:

void Timer1_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <Timer1_voidICUSetTriggerEdge+0x6>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Edge)
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3b 83       	std	Y+3, r19	; 0x03
    105c:	2a 83       	std	Y+2, r18	; 0x02
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	31 f0       	breq	.+12     	; 0x1072 <Timer1_voidICUSetTriggerEdge+0x2c>
    1066:	2a 81       	ldd	r18, Y+2	; 0x02
    1068:	3b 81       	ldd	r19, Y+3	; 0x03
    106a:	21 30       	cpi	r18, 0x01	; 1
    106c:	31 05       	cpc	r19, r1
    106e:	49 f0       	breq	.+18     	; 0x1082 <Timer1_voidICUSetTriggerEdge+0x3c>
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <Timer1_voidICUSetTriggerEdge+0x4a>
    {
    case ICU_FALLING_EDGE:
        CLEAR_BIT(TCCR1B, ICES1);
    1072:	ae e4       	ldi	r26, 0x4E	; 78
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ee e4       	ldi	r30, 0x4E	; 78
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7b       	andi	r24, 0xBF	; 191
    107e:	8c 93       	st	X, r24
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <Timer1_voidICUSetTriggerEdge+0x4a>
        break;
    case ICU_RISING_EDGE:
        SET_BIT(TCCR1B, ICES1);
    1082:	ae e4       	ldi	r26, 0x4E	; 78
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <Timer1_voidSetICR1Value>:

void Timer1_voidSetICR1Value(u16 Copy_u16Value)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <Timer1_voidSetICR1Value+0x6>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16Value;
    10aa:	e6 e4       	ldi	r30, 0x46	; 70
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <Timer1_u16ReadICR1Value>:

u16  Timer1_u16ReadICR1Value(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    10c8:	e6 e4       	ldi	r30, 0x46	; 70
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <Timer1_voidICUInterruptEnable>:

void Timer1_voidICUInterruptEnable(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TICIE1);
    10de:	a9 e5       	ldi	r26, 0x59	; 89
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e9 e5       	ldi	r30, 0x59	; 89
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 62       	ori	r24, 0x20	; 32
    10ea:	8c 93       	st	X, r24
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <Timer1_voidICUInterruptDisable>:

void Timer1_voidICUInterruptDisable(void)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TICIE1);
    10fa:	a9 e5       	ldi	r26, 0x59	; 89
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e9 e5       	ldi	r30, 0x59	; 89
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8f 7d       	andi	r24, 0xDF	; 223
    1106:	8c 93       	st	X, r24
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[0] != NULL)
    1138:	80 91 b8 00 	lds	r24, 0x00B8
    113c:	90 91 b9 00 	lds	r25, 0x00B9
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	29 f0       	breq	.+10     	; 0x114e <__vector_9+0x40>
    {
        Timer_ptrFunc[0]();
    1144:	e0 91 b8 00 	lds	r30, 0x00B8
    1148:	f0 91 b9 00 	lds	r31, 0x00B9
    114c:	09 95       	icall
    }
}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[1] != NULL)
    119e:	80 91 ba 00 	lds	r24, 0x00BA
    11a2:	90 91 bb 00 	lds	r25, 0x00BB
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <__vector_7+0x40>
    {
        Timer_ptrFunc[1]();
    11aa:	e0 91 ba 00 	lds	r30, 0x00BA
    11ae:	f0 91 bb 00 	lds	r31, 0x00BB
    11b2:	09 95       	icall
    }
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	6f 93       	push	r22
    11ee:	7f 93       	push	r23
    11f0:	8f 93       	push	r24
    11f2:	9f 93       	push	r25
    11f4:	af 93       	push	r26
    11f6:	bf 93       	push	r27
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[2] != NULL)
    1204:	80 91 bc 00 	lds	r24, 0x00BC
    1208:	90 91 bd 00 	lds	r25, 0x00BD
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	29 f0       	breq	.+10     	; 0x121a <__vector_8+0x40>
    {
        Timer_ptrFunc[2]();
    1210:	e0 91 bc 00 	lds	r30, 0x00BC
    1214:	f0 91 bd 00 	lds	r31, 0x00BD
    1218:	09 95       	icall
    }
}
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[3] != NULL)
    126a:	80 91 be 00 	lds	r24, 0x00BE
    126e:	90 91 bf 00 	lds	r25, 0x00BF
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	29 f0       	breq	.+10     	; 0x1280 <__vector_6+0x40>
    {
        Timer_ptrFunc[3]();
    1276:	e0 91 be 00 	lds	r30, 0x00BE
    127a:	f0 91 bf 00 	lds	r31, 0x00BF
    127e:	09 95       	icall
    }
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	bf 91       	pop	r27
    128a:	af 91       	pop	r26
    128c:	9f 91       	pop	r25
    128e:	8f 91       	pop	r24
    1290:	7f 91       	pop	r23
    1292:	6f 91       	pop	r22
    1294:	5f 91       	pop	r21
    1296:	4f 91       	pop	r20
    1298:	3f 91       	pop	r19
    129a:	2f 91       	pop	r18
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <SPI_voidInit>:
#include "../../LIB/data_types.h"
#include "SPI.h"
#include "../../MCAL/DIO/DIO.h"

 void SPI_voidInit(void)
 {
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	 DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
	 DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN4,DIO_LOW);
	 
	 #elif SPI_MODE == SPI_SLAVE_MODE
	 
	 DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	66 e0       	ldi	r22, 0x06	; 6
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	 CLEAR_BIT(SPCR,MSTR);
    12b8:	ad e2       	ldi	r26, 0x2D	; 45
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ed e2       	ldi	r30, 0x2D	; 45
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 7e       	andi	r24, 0xEF	; 239
    12c4:	8c 93       	st	X, r24
	 #endif
	 //data order
	 CLEAR_BIT(SPCR,DORD);
    12c6:	ad e2       	ldi	r26, 0x2D	; 45
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ed e2       	ldi	r30, 0x2D	; 45
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7d       	andi	r24, 0xDF	; 223
    12d2:	8c 93       	st	X, r24
	 //clk polarty
	 CLEAR_BIT(SPCR,CPOL);
    12d4:	ad e2       	ldi	r26, 0x2D	; 45
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ed e2       	ldi	r30, 0x2D	; 45
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	87 7f       	andi	r24, 0xF7	; 247
    12e0:	8c 93       	st	X, r24
	 //clk phase
	 SET_BIT(SPCR,CPHA);
    12e2:	ad e2       	ldi	r26, 0x2D	; 45
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ed e2       	ldi	r30, 0x2D	; 45
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	84 60       	ori	r24, 0x04	; 4
    12ee:	8c 93       	st	X, r24
	 //set prescaler 
	 SET_BIT(SPCR,SPR0);
    12f0:	ad e2       	ldi	r26, 0x2D	; 45
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ed e2       	ldi	r30, 0x2D	; 45
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	8c 93       	st	X, r24
	 SET_BIT(SPCR,SPR1);
    12fe:	ad e2       	ldi	r26, 0x2D	; 45
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ed e2       	ldi	r30, 0x2D	; 45
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	82 60       	ori	r24, 0x02	; 2
    130a:	8c 93       	st	X, r24
	 CLEAR_BIT(SPSR,SPI2X);
    130c:	ae e2       	ldi	r26, 0x2E	; 46
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ee e2       	ldi	r30, 0x2E	; 46
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8e 7f       	andi	r24, 0xFE	; 254
    1318:	8c 93       	st	X, r24
	 //spi enable
	 SET_BIT(SPCR,SPE);
    131a:	ad e2       	ldi	r26, 0x2D	; 45
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ed e2       	ldi	r30, 0x2D	; 45
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	80 64       	ori	r24, 0x40	; 64
    1326:	8c 93       	st	X, r24
 }
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <SPI_u8Tranceive>:
 u8 SPI_u8Tranceive(u8 Copy_u8Data)
 {
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	89 83       	std	Y+1, r24	; 0x01
	 SPDR = Copy_u8Data;
    133a:	ef e2       	ldi	r30, 0x2F	; 47
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	80 83       	st	Z, r24
	 
	 while(READ_BIT(SPSR,SPIF)==0);
    1342:	ee e2       	ldi	r30, 0x2E	; 46
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 23       	and	r24, r24
    134a:	dc f7       	brge	.-10     	; 0x1342 <SPI_u8Tranceive+0x14>
	 
	 return SPDR;
    134c:	ef e2       	ldi	r30, 0x2F	; 47
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
	 
 }
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <INT_voidEnable>:


static void (*INT_PFCall[3])(void);

void INT_voidEnable (u8 Copy_u8INTIndex,u8 Copy_u8EdgeIndex)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	2a 97       	sbiw	r28, 0x0a	; 10
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTIndex)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3a 87       	std	Y+10, r19	; 0x0a
    137a:	29 87       	std	Y+9, r18	; 0x09
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <INT_voidEnable+0x2e>
    1386:	6d c0       	rjmp	.+218    	; 0x1462 <INT_voidEnable+0x108>
    1388:	29 85       	ldd	r18, Y+9	; 0x09
    138a:	3a 85       	ldd	r19, Y+10	; 0x0a
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <INT_voidEnable+0x3a>
    1392:	c9 c0       	rjmp	.+402    	; 0x1526 <INT_voidEnable+0x1cc>
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	09 f0       	breq	.+2      	; 0x139e <INT_voidEnable+0x44>
    139c:	ea c0       	rjmp	.+468    	; 0x1572 <INT_voidEnable+0x218>
	{
		case EXT_INT0:
			switch(Copy_u8EdgeIndex)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	38 87       	std	Y+8, r19	; 0x08
    13a6:	2f 83       	std	Y+7, r18	; 0x07
    13a8:	8f 81       	ldd	r24, Y+7	; 0x07
    13aa:	98 85       	ldd	r25, Y+8	; 0x08
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	99 f1       	breq	.+102    	; 0x1418 <INT_voidEnable+0xbe>
    13b2:	2f 81       	ldd	r18, Y+7	; 0x07
    13b4:	38 85       	ldd	r19, Y+8	; 0x08
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <INT_voidEnable+0x6c>
    13bc:	8f 81       	ldd	r24, Y+7	; 0x07
    13be:	98 85       	ldd	r25, Y+8	; 0x08
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	c9 f1       	breq	.+114    	; 0x1436 <INT_voidEnable+0xdc>
    13c4:	46 c0       	rjmp	.+140    	; 0x1452 <INT_voidEnable+0xf8>
    13c6:	2f 81       	ldd	r18, Y+7	; 0x07
    13c8:	38 85       	ldd	r19, Y+8	; 0x08
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	31 f0       	breq	.+12     	; 0x13dc <INT_voidEnable+0x82>
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	81 f0       	breq	.+32     	; 0x13fa <INT_voidEnable+0xa0>
    13da:	3b c0       	rjmp	.+118    	; 0x1452 <INT_voidEnable+0xf8>
			{
				case INT_FALING_EDGE:
					CLEAR_BIT(MCUCR,ISC00);
    13dc:	a5 e5       	ldi	r26, 0x55	; 85
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e5       	ldi	r30, 0x55	; 85
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC01);
    13ea:	a5 e5       	ldi	r26, 0x55	; 85
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e5       	ldi	r30, 0x55	; 85
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	82 60       	ori	r24, 0x02	; 2
    13f6:	8c 93       	st	X, r24
    13f8:	2c c0       	rjmp	.+88     	; 0x1452 <INT_voidEnable+0xf8>
				break;
				case INT_RAISING_EDGE:
					SET_BIT(MCUCR,ISC00);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	81 60       	ori	r24, 0x01	; 1
    1406:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC01);
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	8c 93       	st	X, r24
    1416:	1d c0       	rjmp	.+58     	; 0x1452 <INT_voidEnable+0xf8>
				break;
				case INT_ANY_LOGICAL_CHANGE:
					SET_BIT(MCUCR,ISC00);
    1418:	a5 e5       	ldi	r26, 0x55	; 85
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e5 e5       	ldi	r30, 0x55	; 85
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC01);
    1426:	a5 e5       	ldi	r26, 0x55	; 85
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e5       	ldi	r30, 0x55	; 85
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8d 7f       	andi	r24, 0xFD	; 253
    1432:	8c 93       	st	X, r24
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <INT_voidEnable+0xf8>
				break;
				case INT_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC00);
    1436:	a5 e5       	ldi	r26, 0x55	; 85
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e5       	ldi	r30, 0x55	; 85
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8e 7f       	andi	r24, 0xFE	; 254
    1442:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC01);	
    1444:	a5 e5       	ldi	r26, 0x55	; 85
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e5       	ldi	r30, 0x55	; 85
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8d 7f       	andi	r24, 0xFD	; 253
    1450:	8c 93       	st	X, r24
				break;
				default : ;
			}
			SET_BIT(GICR,INT0);
    1452:	ab e5       	ldi	r26, 0x5B	; 91
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	eb e5       	ldi	r30, 0x5B	; 91
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 64       	ori	r24, 0x40	; 64
    145e:	8c 93       	st	X, r24
    1460:	88 c0       	rjmp	.+272    	; 0x1572 <INT_voidEnable+0x218>
			break;
		case EXT_INT1:
			switch(Copy_u8EdgeIndex)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3e 83       	std	Y+6, r19	; 0x06
    146a:	2d 83       	std	Y+5, r18	; 0x05
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	99 f1       	breq	.+102    	; 0x14dc <INT_voidEnable+0x182>
    1476:	2d 81       	ldd	r18, Y+5	; 0x05
    1478:	3e 81       	ldd	r19, Y+6	; 0x06
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <INT_voidEnable+0x130>
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	c9 f1       	breq	.+114    	; 0x14fa <INT_voidEnable+0x1a0>
    1488:	46 c0       	rjmp	.+140    	; 0x1516 <INT_voidEnable+0x1bc>
    148a:	2d 81       	ldd	r18, Y+5	; 0x05
    148c:	3e 81       	ldd	r19, Y+6	; 0x06
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	31 f0       	breq	.+12     	; 0x14a0 <INT_voidEnable+0x146>
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <INT_voidEnable+0x164>
    149e:	3b c0       	rjmp	.+118    	; 0x1516 <INT_voidEnable+0x1bc>
			{
				case INT_FALING_EDGE:
					CLEAR_BIT(MCUCR,ISC10);
    14a0:	a5 e5       	ldi	r26, 0x55	; 85
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e5       	ldi	r30, 0x55	; 85
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8b 7f       	andi	r24, 0xFB	; 251
    14ac:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC11);
    14ae:	a5 e5       	ldi	r26, 0x55	; 85
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e5       	ldi	r30, 0x55	; 85
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	88 60       	ori	r24, 0x08	; 8
    14ba:	8c 93       	st	X, r24
    14bc:	2c c0       	rjmp	.+88     	; 0x1516 <INT_voidEnable+0x1bc>
				break;
				case INT_RAISING_EDGE:
					SET_BIT(MCUCR,ISC10);
    14be:	a5 e5       	ldi	r26, 0x55	; 85
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e5       	ldi	r30, 0x55	; 85
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	84 60       	ori	r24, 0x04	; 4
    14ca:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC11);
    14cc:	a5 e5       	ldi	r26, 0x55	; 85
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e5 e5       	ldi	r30, 0x55	; 85
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 60       	ori	r24, 0x08	; 8
    14d8:	8c 93       	st	X, r24
    14da:	1d c0       	rjmp	.+58     	; 0x1516 <INT_voidEnable+0x1bc>
				break;
				case INT_ANY_LOGICAL_CHANGE:
					SET_BIT(MCUCR,ISC10);
    14dc:	a5 e5       	ldi	r26, 0x55	; 85
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e5       	ldi	r30, 0x55	; 85
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	84 60       	ori	r24, 0x04	; 4
    14e8:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC11);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	87 7f       	andi	r24, 0xF7	; 247
    14f6:	8c 93       	st	X, r24
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <INT_voidEnable+0x1bc>
				break;
				case INT_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC10);
    14fa:	a5 e5       	ldi	r26, 0x55	; 85
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e5       	ldi	r30, 0x55	; 85
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8b 7f       	andi	r24, 0xFB	; 251
    1506:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC11);	
    1508:	a5 e5       	ldi	r26, 0x55	; 85
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e5       	ldi	r30, 0x55	; 85
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	87 7f       	andi	r24, 0xF7	; 247
    1514:	8c 93       	st	X, r24
				break;
				default : ;
			}
			SET_BIT(GICR,INT1);
    1516:	ab e5       	ldi	r26, 0x5B	; 91
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	eb e5       	ldi	r30, 0x5B	; 91
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 68       	ori	r24, 0x80	; 128
    1522:	8c 93       	st	X, r24
    1524:	26 c0       	rjmp	.+76     	; 0x1572 <INT_voidEnable+0x218>
			break;
		case EXT_INT2:
			switch(Copy_u8EdgeIndex)
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3c 83       	std	Y+4, r19	; 0x04
    152e:	2b 83       	std	Y+3, r18	; 0x03
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	91 05       	cpc	r25, r1
    1538:	31 f0       	breq	.+12     	; 0x1546 <INT_voidEnable+0x1ec>
    153a:	2b 81       	ldd	r18, Y+3	; 0x03
    153c:	3c 81       	ldd	r19, Y+4	; 0x04
    153e:	23 30       	cpi	r18, 0x03	; 3
    1540:	31 05       	cpc	r19, r1
    1542:	49 f0       	breq	.+18     	; 0x1556 <INT_voidEnable+0x1fc>
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <INT_voidEnable+0x20a>
			{
				case INT_FALING_EDGE:
					CLEAR_BIT(MCUCSR,ISC2);
    1546:	a4 e5       	ldi	r26, 0x54	; 84
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e4 e5       	ldi	r30, 0x54	; 84
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7b       	andi	r24, 0xBF	; 191
    1552:	8c 93       	st	X, r24
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <INT_voidEnable+0x20a>
				break;
				case INT_RAISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1556:	a4 e5       	ldi	r26, 0x54	; 84
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e4 e5       	ldi	r30, 0x54	; 84
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	8c 93       	st	X, r24
				break;
				default : ;
			}
			SET_BIT(GICR,INT2);
    1564:	ab e5       	ldi	r26, 0x5B	; 91
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e5       	ldi	r30, 0x5B	; 91
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 62       	ori	r24, 0x20	; 32
    1570:	8c 93       	st	X, r24
			break;
		default : ;
		
		
	}
}
    1572:	2a 96       	adiw	r28, 0x0a	; 10
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <INT_voidDisable>:
void INT_voidDisable(u8 Copy_u8INTIndex)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <INT_voidDisable+0x6>
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8INTIndex)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3b 83       	std	Y+3, r19	; 0x03
    159a:	2a 83       	std	Y+2, r18	; 0x02
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	9b 81       	ldd	r25, Y+3	; 0x03
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	89 f0       	breq	.+34     	; 0x15c8 <INT_voidDisable+0x44>
    15a6:	2a 81       	ldd	r18, Y+2	; 0x02
    15a8:	3b 81       	ldd	r19, Y+3	; 0x03
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	a1 f0       	breq	.+40     	; 0x15d8 <INT_voidDisable+0x54>
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	b9 f4       	brne	.+46     	; 0x15e6 <INT_voidDisable+0x62>
	{
		case EXT_INT0:
			CLEAR_BIT(GICR,INT0);
    15b8:	ab e5       	ldi	r26, 0x5B	; 91
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	eb e5       	ldi	r30, 0x5B	; 91
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 7b       	andi	r24, 0xBF	; 191
    15c4:	8c 93       	st	X, r24
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <INT_voidDisable+0x62>
		break;
		case EXT_INT1:
			CLEAR_BIT(GICR,INT1);
    15c8:	ab e5       	ldi	r26, 0x5B	; 91
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e5       	ldi	r30, 0x5B	; 91
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 77       	andi	r24, 0x7F	; 127
    15d4:	8c 93       	st	X, r24
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <INT_voidDisable+0x62>
		break;
		case EXT_INT2:
			CLEAR_BIT(GICR,INT2);		
    15d8:	ab e5       	ldi	r26, 0x5B	; 91
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	eb e5       	ldi	r30, 0x5B	; 91
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 7d       	andi	r24, 0xDF	; 223
    15e4:	8c 93       	st	X, r24
		break;	
		default : ;
	}
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <INT_voidSetCallBack>:
void INT_voidSetCallBack(u8 Copy_u8INTIndex ,void(*Copy_voidPFunName)(void))
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <INT_voidSetCallBack+0x6>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	7b 83       	std	Y+3, r23	; 0x03
    1602:	6a 83       	std	Y+2, r22	; 0x02
	INT_PFCall[Copy_u8INTIndex] = Copy_voidPFunName;
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	fc 01       	movw	r30, r24
    1610:	e0 54       	subi	r30, 0x40	; 64
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	80 83       	st	Z, r24
	
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <__vector_1>:


ISR(INT0_vect)
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	4f 93       	push	r20
    1638:	5f 93       	push	r21
    163a:	6f 93       	push	r22
    163c:	7f 93       	push	r23
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	af 93       	push	r26
    1644:	bf 93       	push	r27
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	INT_PFCall[0]();
    1652:	e0 91 c0 00 	lds	r30, 0x00C0
    1656:	f0 91 c1 00 	lds	r31, 0x00C1
    165a:	09 95       	icall
}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_2>:

ISR(INT1_vect)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	INT_PFCall[1]();
    16ac:	e0 91 c2 00 	lds	r30, 0x00C2
    16b0:	f0 91 c3 00 	lds	r31, 0x00C3
    16b4:	09 95       	icall
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_3>:

ISR(INT2_vect)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	INT_PFCall[2]();
    1706:	e0 91 c4 00 	lds	r30, 0x00C4
    170a:	f0 91 c5 00 	lds	r31, 0x00C5
    170e:	09 95       	icall
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <I2C_voidMasterInit>:
#include "../../LIB/data_types.h"
#include "I2C.h"
#include "../../MCAL/DIO/DIO.h"

void I2C_voidMasterInit(void)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	//TWSR = 00 Select Prescaler
	CLEAR_BIT(TWSR,TWPS0);
    173e:	a1 e2       	ldi	r26, 0x21	; 33
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e1 e2       	ldi	r30, 0x21	; 33
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8e 7f       	andi	r24, 0xFE	; 254
    174a:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR,TWPS1);
    174c:	a1 e2       	ldi	r26, 0x21	; 33
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e1 e2       	ldi	r30, 0x21	; 33
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	8c 93       	st	X, r24
	//TWBR = 12
	TWBR = 12;
    175a:	e0 e2       	ldi	r30, 0x20	; 32
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8c e0       	ldi	r24, 0x0C	; 12
    1760:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,TWEA);
    1762:	a6 e5       	ldi	r26, 0x56	; 86
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e6 e5       	ldi	r30, 0x56	; 86
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 64       	ori	r24, 0x40	; 64
    176e:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR,TWEN);
    1770:	a6 e5       	ldi	r26, 0x56	; 86
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e6 e5       	ldi	r30, 0x56	; 86
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	84 60       	ori	r24, 0x04	; 4
    177c:	8c 93       	st	X, r24
	
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <I2C_voidSlaveInit>:
void I2C_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
	//Set Slave Address at TWAR
	TWAR = (Copy_u8SlaveAddress << 1);
    1790:	e2 e2       	ldi	r30, 0x22	; 34
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	88 0f       	add	r24, r24
    1798:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,TWEA);
    179a:	a6 e5       	ldi	r26, 0x56	; 86
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e6 e5       	ldi	r30, 0x56	; 86
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 64       	ori	r24, 0x40	; 64
    17a6:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR,TWEN);
    17a8:	a6 e5       	ldi	r26, 0x56	; 86
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e6 e5       	ldi	r30, 0x56	; 86
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	8c 93       	st	X, r24
}
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <I2C_voidStartCondition>:

void I2C_voidStartCondition(void)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
	//enable start condition
	SET_BIT(TWCR,TWSTA);
    17c6:	a6 e5       	ldi	r26, 0x56	; 86
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e6 e5       	ldi	r30, 0x56	; 86
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 62       	ori	r24, 0x20	; 32
    17d2:	8c 93       	st	X, r24
	//clear flag
	SET_BIT(TWCR,TWINT);
    17d4:	a6 e5       	ldi	r26, 0x56	; 86
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e6 e5       	ldi	r30, 0x56	; 86
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
    17e2:	e6 e5       	ldi	r30, 0x56	; 86
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	88 23       	and	r24, r24
    17ea:	dc f7       	brge	.-10     	; 0x17e2 <I2C_voidStartCondition+0x24>
	//Should check for Ack but simulation doesnt work with it
	//While((Twsr&0b11111000) != 0x08)  0x08 -->from data sheet
	
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <I2C_voidStopCondition>:
void I2C_voidStopCondition(void)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	//enable stop condition
	SET_BIT(TWCR,TWSTO);
    17fa:	a6 e5       	ldi	r26, 0x56	; 86
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e6 e5       	ldi	r30, 0x56	; 86
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	8c 93       	st	X, r24
	//clear flag
	SET_BIT(TWCR,TWINT);
    1808:	a6 e5       	ldi	r26, 0x56	; 86
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e6 e5       	ldi	r30, 0x56	; 86
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	80 68       	ori	r24, 0x80	; 128
    1814:	8c 93       	st	X, r24
	
	
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <I2C_voidMasterSendAddressWrite>:

void I2C_voidMasterSendAddressWrite(u8 Copy_u8SlaveAddress)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01
	//select address
	TWDR = Copy_u8SlaveAddress<<1;
    1828:	e3 e2       	ldi	r30, 0x23	; 35
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 0f       	add	r24, r24
    1830:	80 83       	st	Z, r24
	//select write operation
	CLEAR_BIT(TWDR,TWD0);
    1832:	a3 e2       	ldi	r26, 0x23	; 35
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e3 e2       	ldi	r30, 0x23	; 35
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8e 7f       	andi	r24, 0xFE	; 254
    183e:	8c 93       	st	X, r24
	//Disable start start condition
	CLEAR_BIT(TWCR,TWSTA);
    1840:	a6 e5       	ldi	r26, 0x56	; 86
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e6 e5       	ldi	r30, 0x56	; 86
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 7d       	andi	r24, 0xDF	; 223
    184c:	8c 93       	st	X, r24
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
    184e:	a6 e5       	ldi	r26, 0x56	; 86
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e6 e5       	ldi	r30, 0x56	; 86
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 68       	ori	r24, 0x80	; 128
    185a:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
    185c:	e6 e5       	ldi	r30, 0x56	; 86
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	88 23       	and	r24, r24
    1864:	dc f7       	brge	.-10     	; 0x185c <I2C_voidMasterSendAddressWrite+0x40>
	//Check ack
}
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <I2C_voidMasterSendAddressRead>:
void I2C_voidMasterSendAddressRead(u8 Copy_u8SlaveAddress)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
	//select address
	TWDR = Copy_u8SlaveAddress<<1;
    187a:	e3 e2       	ldi	r30, 0x23	; 35
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	88 0f       	add	r24, r24
    1882:	80 83       	st	Z, r24
	//select Read operation
	SET_BIT(TWDR,TWD0);
    1884:	a3 e2       	ldi	r26, 0x23	; 35
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e3 e2       	ldi	r30, 0x23	; 35
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	81 60       	ori	r24, 0x01	; 1
    1890:	8c 93       	st	X, r24
	//Disable start start condition
	CLEAR_BIT(TWCR,TWSTA);
    1892:	a6 e5       	ldi	r26, 0x56	; 86
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e6 e5       	ldi	r30, 0x56	; 86
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7d       	andi	r24, 0xDF	; 223
    189e:	8c 93       	st	X, r24
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
    18a0:	a6 e5       	ldi	r26, 0x56	; 86
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 68       	ori	r24, 0x80	; 128
    18ac:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
    18ae:	e6 e5       	ldi	r30, 0x56	; 86
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 23       	and	r24, r24
    18b6:	dc f7       	brge	.-10     	; 0x18ae <I2C_voidMasterSendAddressRead+0x40>
	//Check ack
}
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <I2C_voidMasterSendData>:

void I2C_voidMasterSendData(u8 Copy_u8Data)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
	//write data in data reg
	TWDR = Copy_u8Data;
    18cc:	e3 e2       	ldi	r30, 0x23	; 35
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	80 83       	st	Z, r24
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
    18d4:	a6 e5       	ldi	r26, 0x56	; 86
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e6 e5       	ldi	r30, 0x56	; 86
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
    18e2:	e6 e5       	ldi	r30, 0x56	; 86
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 23       	and	r24, r24
    18ea:	dc f7       	brge	.-10     	; 0x18e2 <I2C_voidMasterSendData+0x22>
	//Check ack
}
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <I2C_u8MasterReadData>:

u8 I2C_u8MasterReadData(void)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
    18fc:	a6 e5       	ldi	r26, 0x56	; 86
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e6 e5       	ldi	r30, 0x56	; 86
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 68       	ori	r24, 0x80	; 128
    1908:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
    190a:	e6 e5       	ldi	r30, 0x56	; 86
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	88 23       	and	r24, r24
    1912:	dc f7       	brge	.-10     	; 0x190a <I2C_u8MasterReadData+0x16>
	//return data
	return TWDR;
    1914:	e3 e2       	ldi	r30, 0x23	; 35
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <I2C_u8SlaveReadData>:

u8 I2C_u8SlaveReadData(void)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	//wait to receive slave address
	while((TWSR&0xF8) != 0x60);
    1928:	e1 e2       	ldi	r30, 0x21	; 33
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 7f       	andi	r24, 0xF8	; 248
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	80 36       	cpi	r24, 0x60	; 96
    1938:	91 05       	cpc	r25, r1
    193a:	b1 f7       	brne	.-20     	; 0x1928 <I2C_u8SlaveReadData+0x8>
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
    193c:	a6 e5       	ldi	r26, 0x56	; 86
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e6 e5       	ldi	r30, 0x56	; 86
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 68       	ori	r24, 0x80	; 128
    1948:	8c 93       	st	X, r24
	//Wait to receive data
	while((TWSR&0xF8) != 0x80);
    194a:	e1 e2       	ldi	r30, 0x21	; 33
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	88 7f       	andi	r24, 0xF8	; 248
    1956:	90 70       	andi	r25, 0x00	; 0
    1958:	80 38       	cpi	r24, 0x80	; 128
    195a:	91 05       	cpc	r25, r1
    195c:	b1 f7       	brne	.-20     	; 0x194a <I2C_u8SlaveReadData+0x2a>
	//return data
	return TWDR;
    195e:	e3 e2       	ldi	r30, 0x23	; 35
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <DIO_voidSetPinDirection>:
#include "../../LIB/Bit_math.h"
#include "../../LIB/data_types.h"
#include "../../MCAL/DIO/DIO.h"

 void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
 {
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	27 97       	sbiw	r28, 0x07	; 7
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	6a 83       	std	Y+2, r22	; 0x02
    1982:	4b 83       	std	Y+3, r20	; 0x03
		 
	 if(Copy_u8Direction == DIO_OUTPUT)
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	09 f0       	breq	.+2      	; 0x198c <DIO_voidSetPinDirection+0x22>
    198a:	6f c0       	rjmp	.+222    	; 0x1a6a <DIO_voidSetPinDirection+0x100>
	 {
		switch(Copy_u8Port)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3f 83       	std	Y+7, r19	; 0x07
    1994:	2e 83       	std	Y+6, r18	; 0x06
    1996:	8e 81       	ldd	r24, Y+6	; 0x06
    1998:	9f 81       	ldd	r25, Y+7	; 0x07
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	49 f1       	breq	.+82     	; 0x19f2 <DIO_voidSetPinDirection+0x88>
    19a0:	2e 81       	ldd	r18, Y+6	; 0x06
    19a2:	3f 81       	ldd	r19, Y+7	; 0x07
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <DIO_voidSetPinDirection+0x4a>
    19aa:	8e 81       	ldd	r24, Y+6	; 0x06
    19ac:	9f 81       	ldd	r25, Y+7	; 0x07
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	61 f0       	breq	.+24     	; 0x19ca <DIO_voidSetPinDirection+0x60>
    19b2:	d2 c0       	rjmp	.+420    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
    19b4:	2e 81       	ldd	r18, Y+6	; 0x06
    19b6:	3f 81       	ldd	r19, Y+7	; 0x07
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	71 f1       	breq	.+92     	; 0x1a1a <DIO_voidSetPinDirection+0xb0>
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	e9 f1       	breq	.+122    	; 0x1a42 <DIO_voidSetPinDirection+0xd8>
    19c8:	c7 c0       	rjmp	.+398    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
		{
			 case DIO_PORTA:
				SET_BIT(DDRA,Copy_u8Pin);
    19ca:	aa e3       	ldi	r26, 0x3A	; 58
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ea e3       	ldi	r30, 0x3A	; 58
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_voidSetPinDirection+0x7e>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_voidSetPinDirection+0x7a>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	b3 c0       	rjmp	.+358    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			 break;
			 case DIO_PORTB:
				SET_BIT(DDRB,Copy_u8Pin);
    19f2:	a7 e3       	ldi	r26, 0x37	; 55
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e7 e3       	ldi	r30, 0x37	; 55
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_voidSetPinDirection+0xa6>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_voidSetPinDirection+0xa2>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	9f c0       	rjmp	.+318    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			 break;
			 case DIO_PORTC:
				SET_BIT(DDRC,Copy_u8Pin);
    1a1a:	a4 e3       	ldi	r26, 0x34	; 52
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e4 e3       	ldi	r30, 0x34	; 52
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_voidSetPinDirection+0xce>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_voidSetPinDirection+0xca>
    1a3c:	84 2b       	or	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	8b c0       	rjmp	.+278    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			 break;
			 case DIO_PORTD:				
				SET_BIT(DDRD,Copy_u8Pin);
    1a42:	a1 e3       	ldi	r26, 0x31	; 49
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e1 e3       	ldi	r30, 0x31	; 49
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_voidSetPinDirection+0xf6>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_voidSetPinDirection+0xf2>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	77 c0       	rjmp	.+238    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			 break;
				default: ;
	 
			 }
	}
	else if(Copy_u8Direction == DIO_INPUT)
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <DIO_voidSetPinDirection+0x108>
    1a70:	73 c0       	rjmp	.+230    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3d 83       	std	Y+5, r19	; 0x05
    1a7a:	2c 83       	std	Y+4, r18	; 0x04
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	91 05       	cpc	r25, r1
    1a84:	59 f1       	breq	.+86     	; 0x1adc <DIO_voidSetPinDirection+0x172>
    1a86:	2c 81       	ldd	r18, Y+4	; 0x04
    1a88:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <DIO_voidSetPinDirection+0x130>
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	69 f0       	breq	.+26     	; 0x1ab2 <DIO_voidSetPinDirection+0x148>
    1a98:	5f c0       	rjmp	.+190    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
    1a9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	89 f1       	breq	.+98     	; 0x1b06 <DIO_voidSetPinDirection+0x19c>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <DIO_voidSetPinDirection+0x146>
    1aae:	40 c0       	rjmp	.+128    	; 0x1b30 <DIO_voidSetPinDirection+0x1c6>
    1ab0:	53 c0       	rjmp	.+166    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA:
				CLEAR_BIT(DDRA,Copy_u8Pin);
    1ab2:	aa e3       	ldi	r26, 0x3A	; 58
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ea e3       	ldi	r30, 0x3A	; 58
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_voidSetPinDirection+0x166>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_voidSetPinDirection+0x162>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	3e c0       	rjmp	.+124    	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB,Copy_u8Pin);
    1adc:	a7 e3       	ldi	r26, 0x37	; 55
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e7 e3       	ldi	r30, 0x37	; 55
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_voidSetPinDirection+0x190>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_voidSetPinDirection+0x18c>
    1afe:	80 95       	com	r24
    1b00:	84 23       	and	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	29 c0       	rjmp	.+82     	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC,Copy_u8Pin);
    1b06:	a4 e3       	ldi	r26, 0x34	; 52
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e4 e3       	ldi	r30, 0x34	; 52
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_voidSetPinDirection+0x1ba>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_voidSetPinDirection+0x1b6>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <DIO_voidSetPinDirection+0x1ee>
			break;
			case DIO_PORTD:				
				CLEAR_BIT(DDRD,Copy_u8Pin);
    1b30:	a1 e3       	ldi	r26, 0x31	; 49
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e1 e3       	ldi	r30, 0x31	; 49
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <DIO_voidSetPinDirection+0x1e4>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <DIO_voidSetPinDirection+0x1e0>
    1b52:	80 95       	com	r24
    1b54:	84 23       	and	r24, r20
    1b56:	8c 93       	st	X, r24
				 
		}
	}
	 
	 
 }
    1b58:	27 96       	adiw	r28, 0x07	; 7
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <DIO_voidSetPinvalue>:
 
 
 void DIO_voidSetPinvalue (u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8value)
 {
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	27 97       	sbiw	r28, 0x07	; 7
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	6a 83       	std	Y+2, r22	; 0x02
    1b82:	4b 83       	std	Y+3, r20	; 0x03
	 if(Copy_u8value == DIO_HIGH)
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <DIO_voidSetPinvalue+0x22>
    1b8a:	6f c0       	rjmp	.+222    	; 0x1c6a <DIO_voidSetPinvalue+0x100>
	 {
		switch(Copy_u8Port)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3f 83       	std	Y+7, r19	; 0x07
    1b94:	2e 83       	std	Y+6, r18	; 0x06
    1b96:	8e 81       	ldd	r24, Y+6	; 0x06
    1b98:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	49 f1       	breq	.+82     	; 0x1bf2 <DIO_voidSetPinvalue+0x88>
    1ba0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <DIO_voidSetPinvalue+0x4a>
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	61 f0       	breq	.+24     	; 0x1bca <DIO_voidSetPinvalue+0x60>
    1bb2:	d2 c0       	rjmp	.+420    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
    1bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	71 f1       	breq	.+92     	; 0x1c1a <DIO_voidSetPinvalue+0xb0>
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	e9 f1       	breq	.+122    	; 0x1c42 <DIO_voidSetPinvalue+0xd8>
    1bc8:	c7 c0       	rjmp	.+398    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
		{
			 case DIO_PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    1bca:	ab e3       	ldi	r26, 0x3B	; 59
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb e3       	ldi	r30, 0x3B	; 59
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_voidSetPinvalue+0x7e>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_voidSetPinvalue+0x7a>
    1bec:	84 2b       	or	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	b3 c0       	rjmp	.+358    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			 break;
			 case DIO_PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1bf2:	a8 e3       	ldi	r26, 0x38	; 56
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e8 e3       	ldi	r30, 0x38	; 56
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_voidSetPinvalue+0xa6>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_voidSetPinvalue+0xa2>
    1c14:	84 2b       	or	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	9f c0       	rjmp	.+318    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			 break;
			 case DIO_PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    1c1a:	a5 e3       	ldi	r26, 0x35	; 53
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e3       	ldi	r30, 0x35	; 53
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_voidSetPinvalue+0xce>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_voidSetPinvalue+0xca>
    1c3c:	84 2b       	or	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	8b c0       	rjmp	.+278    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			 break;
			 case DIO_PORTD:				
				SET_BIT(PORTD,Copy_u8Pin);
    1c42:	a2 e3       	ldi	r26, 0x32	; 50
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e2 e3       	ldi	r30, 0x32	; 50
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_voidSetPinvalue+0xf6>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_voidSetPinvalue+0xf2>
    1c64:	84 2b       	or	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	77 c0       	rjmp	.+238    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			 break;
				default: ;
	 
		}
	}
	else if(Copy_u8value == DIO_LOW)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <DIO_voidSetPinvalue+0x108>
    1c70:	73 c0       	rjmp	.+230    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
	{
		switch(Copy_u8Port)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3d 83       	std	Y+5, r19	; 0x05
    1c7a:	2c 83       	std	Y+4, r18	; 0x04
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	59 f1       	breq	.+86     	; 0x1cdc <DIO_voidSetPinvalue+0x172>
    1c86:	2c 81       	ldd	r18, Y+4	; 0x04
    1c88:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <DIO_voidSetPinvalue+0x130>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f0       	breq	.+26     	; 0x1cb2 <DIO_voidSetPinvalue+0x148>
    1c98:	5f c0       	rjmp	.+190    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
    1c9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	89 f1       	breq	.+98     	; 0x1d06 <DIO_voidSetPinvalue+0x19c>
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	91 05       	cpc	r25, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <DIO_voidSetPinvalue+0x146>
    1cae:	40 c0       	rjmp	.+128    	; 0x1d30 <DIO_voidSetPinvalue+0x1c6>
    1cb0:	53 c0       	rjmp	.+166    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
		{
			case DIO_PORTA:
				CLEAR_BIT(PORTA,Copy_u8Pin);
    1cb2:	ab e3       	ldi	r26, 0x3B	; 59
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	eb e3       	ldi	r30, 0x3B	; 59
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 2e       	mov	r0, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <DIO_voidSetPinvalue+0x166>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <DIO_voidSetPinvalue+0x162>
    1cd4:	80 95       	com	r24
    1cd6:	84 23       	and	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	3e c0       	rjmp	.+124    	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB,Copy_u8Pin);
    1cdc:	a8 e3       	ldi	r26, 0x38	; 56
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e8 e3       	ldi	r30, 0x38	; 56
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_voidSetPinvalue+0x190>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_voidSetPinvalue+0x18c>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	29 c0       	rjmp	.+82     	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC,Copy_u8Pin);
    1d06:	a5 e3       	ldi	r26, 0x35	; 53
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e3       	ldi	r30, 0x35	; 53
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_voidSetPinvalue+0x1ba>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_voidSetPinvalue+0x1b6>
    1d28:	80 95       	com	r24
    1d2a:	84 23       	and	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <DIO_voidSetPinvalue+0x1ee>
			break;
			case DIO_PORTD:				
				CLEAR_BIT(PORTD,Copy_u8Pin);
    1d30:	a2 e3       	ldi	r26, 0x32	; 50
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e2 e3       	ldi	r30, 0x32	; 50
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_voidSetPinvalue+0x1e4>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_voidSetPinvalue+0x1e0>
    1d52:	80 95       	com	r24
    1d54:	84 23       	and	r24, r20
    1d56:	8c 93       	st	X, r24
				 
				 
		}
	}
	 
 }
    1d58:	27 96       	adiw	r28, 0x07	; 7
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <DIO_u8GetPinValue>:
 u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
 {
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <DIO_u8GetPinValue+0x6>
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <DIO_u8GetPinValue+0x8>
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	8a 83       	std	Y+2, r24	; 0x02
    1d7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 l_value =0;
    1d7c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3d 83       	std	Y+5, r19	; 0x05
    1d86:	2c 83       	std	Y+4, r18	; 0x04
    1d88:	4c 81       	ldd	r20, Y+4	; 0x04
    1d8a:	5d 81       	ldd	r21, Y+5	; 0x05
    1d8c:	41 30       	cpi	r20, 0x01	; 1
    1d8e:	51 05       	cpc	r21, r1
    1d90:	41 f1       	breq	.+80     	; 0x1de2 <DIO_u8GetPinValue+0x78>
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	91 05       	cpc	r25, r1
    1d9a:	34 f4       	brge	.+12     	; 0x1da8 <DIO_u8GetPinValue+0x3e>
    1d9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1da0:	21 15       	cp	r18, r1
    1da2:	31 05       	cpc	r19, r1
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <DIO_u8GetPinValue+0x54>
    1da6:	52 c0       	rjmp	.+164    	; 0x1e4c <DIO_u8GetPinValue+0xe2>
    1da8:	4c 81       	ldd	r20, Y+4	; 0x04
    1daa:	5d 81       	ldd	r21, Y+5	; 0x05
    1dac:	42 30       	cpi	r20, 0x02	; 2
    1dae:	51 05       	cpc	r21, r1
    1db0:	51 f1       	breq	.+84     	; 0x1e06 <DIO_u8GetPinValue+0x9c>
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	9d 81       	ldd	r25, Y+5	; 0x05
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	b9 f1       	breq	.+110    	; 0x1e2a <DIO_u8GetPinValue+0xc0>
    1dbc:	47 c0       	rjmp	.+142    	; 0x1e4c <DIO_u8GetPinValue+0xe2>
	{
		 case DIO_PORTA:
			 l_value = READ_BIT(PINA,Copy_u8Pin);
    1dbe:	e9 e3       	ldi	r30, 0x39	; 57
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a9 01       	movw	r20, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_u8GetPinValue+0x6c>
    1dd2:	55 95       	asr	r21
    1dd4:	47 95       	ror	r20
    1dd6:	8a 95       	dec	r24
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_u8GetPinValue+0x68>
    1dda:	ca 01       	movw	r24, r20
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	35 c0       	rjmp	.+106    	; 0x1e4c <DIO_u8GetPinValue+0xe2>
		 break;
		 case DIO_PORTB:
			 l_value = READ_BIT(PINB,Copy_u8Pin);
    1de2:	e6 e3       	ldi	r30, 0x36	; 54
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a9 01       	movw	r20, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <DIO_u8GetPinValue+0x90>
    1df6:	55 95       	asr	r21
    1df8:	47 95       	ror	r20
    1dfa:	8a 95       	dec	r24
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <DIO_u8GetPinValue+0x8c>
    1dfe:	ca 01       	movw	r24, r20
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	23 c0       	rjmp	.+70     	; 0x1e4c <DIO_u8GetPinValue+0xe2>
		 break;
		 case DIO_PORTC:
			 l_value = READ_BIT(PINC,Copy_u8Pin);
    1e06:	e3 e3       	ldi	r30, 0x33	; 51
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a9 01       	movw	r20, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_u8GetPinValue+0xb4>
    1e1a:	55 95       	asr	r21
    1e1c:	47 95       	ror	r20
    1e1e:	8a 95       	dec	r24
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_u8GetPinValue+0xb0>
    1e22:	ca 01       	movw	r24, r20
    1e24:	81 70       	andi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	11 c0       	rjmp	.+34     	; 0x1e4c <DIO_u8GetPinValue+0xe2>
		 break;
		 case DIO_PORTD:				
			 l_value = READ_BIT(PIND,Copy_u8Pin);
    1e2a:	e0 e3       	ldi	r30, 0x30	; 48
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_u8GetPinValue+0xd8>
    1e3e:	55 95       	asr	r21
    1e40:	47 95       	ror	r20
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_u8GetPinValue+0xd4>
    1e46:	ca 01       	movw	r24, r20
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
		 break;
		 default: ;
	 
	}
	return l_value;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
	
 }
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <DIO_voidTogglePinValue>:
 void DIO_voidTogglePinValue (u8 Copy_u8Port,u8 Copy_u8Pin)
 {
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <DIO_voidTogglePinValue+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <DIO_voidTogglePinValue+0x8>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3c 83       	std	Y+4, r19	; 0x04
    1e76:	2b 83       	std	Y+3, r18	; 0x03
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	49 f1       	breq	.+82     	; 0x1ed4 <DIO_voidTogglePinValue+0x76>
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <DIO_voidTogglePinValue+0x38>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	61 f0       	breq	.+24     	; 0x1eac <DIO_voidTogglePinValue+0x4e>
    1e94:	5a c0       	rjmp	.+180    	; 0x1f4a <DIO_voidTogglePinValue+0xec>
    1e96:	2b 81       	ldd	r18, Y+3	; 0x03
    1e98:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	71 f1       	breq	.+92     	; 0x1efc <DIO_voidTogglePinValue+0x9e>
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	e9 f1       	breq	.+122    	; 0x1f24 <DIO_voidTogglePinValue+0xc6>
    1eaa:	4f c0       	rjmp	.+158    	; 0x1f4a <DIO_voidTogglePinValue+0xec>
	{
		 case DIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8Pin);
    1eac:	ab e3       	ldi	r26, 0x3B	; 59
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e3       	ldi	r30, 0x3B	; 59
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_voidTogglePinValue+0x6c>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_voidTogglePinValue+0x68>
    1ece:	84 27       	eor	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	3b c0       	rjmp	.+118    	; 0x1f4a <DIO_voidTogglePinValue+0xec>
		 break;
		 case DIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8Pin);
    1ed4:	a8 e3       	ldi	r26, 0x38	; 56
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e8 e3       	ldi	r30, 0x38	; 56
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_voidTogglePinValue+0x94>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_voidTogglePinValue+0x90>
    1ef6:	84 27       	eor	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	27 c0       	rjmp	.+78     	; 0x1f4a <DIO_voidTogglePinValue+0xec>
		 break;
		 case DIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8Pin);
    1efc:	a5 e3       	ldi	r26, 0x35	; 53
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e5 e3       	ldi	r30, 0x35	; 53
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 2e       	mov	r0, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <DIO_voidTogglePinValue+0xbc>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	0a 94       	dec	r0
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <DIO_voidTogglePinValue+0xb8>
    1f1e:	84 27       	eor	r24, r20
    1f20:	8c 93       	st	X, r24
    1f22:	13 c0       	rjmp	.+38     	; 0x1f4a <DIO_voidTogglePinValue+0xec>
		 break;
		 case DIO_PORTD:				
			TOGGLE_BIT(PORTD,Copy_u8Pin);
    1f24:	a2 e3       	ldi	r26, 0x32	; 50
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e2 e3       	ldi	r30, 0x32	; 50
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <DIO_voidTogglePinValue+0xe4>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <DIO_voidTogglePinValue+0xe0>
    1f46:	84 27       	eor	r24, r20
    1f48:	8c 93       	st	X, r24
		 break;
		 default: ;
	 
	}
 }
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <DIO_voidSetPortDirection>:

 void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
 {
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <DIO_voidSetPortDirection+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <DIO_voidSetPortDirection+0x8>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	3c 83       	std	Y+4, r19	; 0x04
    1f70:	2b 83       	std	Y+3, r18	; 0x03
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	d1 f0       	breq	.+52     	; 0x1fb0 <DIO_voidSetPortDirection+0x58>
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	22 30       	cpi	r18, 0x02	; 2
    1f82:	31 05       	cpc	r19, r1
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <DIO_voidSetPortDirection+0x38>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <DIO_voidSetPortDirection+0x4e>
    1f8e:	1e c0       	rjmp	.+60     	; 0x1fcc <DIO_voidSetPortDirection+0x74>
    1f90:	2b 81       	ldd	r18, Y+3	; 0x03
    1f92:	3c 81       	ldd	r19, Y+4	; 0x04
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	31 05       	cpc	r19, r1
    1f98:	81 f0       	breq	.+32     	; 0x1fba <DIO_voidSetPortDirection+0x62>
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <DIO_voidSetPortDirection+0x6c>
    1fa4:	13 c0       	rjmp	.+38     	; 0x1fcc <DIO_voidSetPortDirection+0x74>
	{
		 case DIO_PORTA:
			DDRA = Copy_u8Direction;
    1fa6:	ea e3       	ldi	r30, 0x3A	; 58
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	80 83       	st	Z, r24
    1fae:	0e c0       	rjmp	.+28     	; 0x1fcc <DIO_voidSetPortDirection+0x74>
		 break;
		 case DIO_PORTB:
			DDRB = Copy_u8Direction;
    1fb0:	e7 e3       	ldi	r30, 0x37	; 55
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <DIO_voidSetPortDirection+0x74>
		 break;
		 case DIO_PORTC:
			DDRC = Copy_u8Direction;
    1fba:	e4 e3       	ldi	r30, 0x34	; 52
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <DIO_voidSetPortDirection+0x74>
		 break;
		 case DIO_PORTD:				
			DDRD = Copy_u8Direction;
    1fc4:	e1 e3       	ldi	r30, 0x31	; 49
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	80 83       	st	Z, r24
		 break;
		 default: ;
	 
	}
 }
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <DIO_voidSetPortvalue>:
 void DIO_voidSetPortvalue (u8 Copy_u8Port,u8 Copy_u8value)
 {
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <DIO_voidSetPortvalue+0x6>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <DIO_voidSetPortvalue+0x8>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	3c 83       	std	Y+4, r19	; 0x04
    1ff2:	2b 83       	std	Y+3, r18	; 0x03
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	d1 f0       	breq	.+52     	; 0x2032 <DIO_voidSetPortvalue+0x58>
    1ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    2000:	3c 81       	ldd	r19, Y+4	; 0x04
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	2c f4       	brge	.+10     	; 0x2012 <DIO_voidSetPortvalue+0x38>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	61 f0       	breq	.+24     	; 0x2028 <DIO_voidSetPortvalue+0x4e>
    2010:	1e c0       	rjmp	.+60     	; 0x204e <DIO_voidSetPortvalue+0x74>
    2012:	2b 81       	ldd	r18, Y+3	; 0x03
    2014:	3c 81       	ldd	r19, Y+4	; 0x04
    2016:	22 30       	cpi	r18, 0x02	; 2
    2018:	31 05       	cpc	r19, r1
    201a:	81 f0       	breq	.+32     	; 0x203c <DIO_voidSetPortvalue+0x62>
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	9c 81       	ldd	r25, Y+4	; 0x04
    2020:	83 30       	cpi	r24, 0x03	; 3
    2022:	91 05       	cpc	r25, r1
    2024:	81 f0       	breq	.+32     	; 0x2046 <DIO_voidSetPortvalue+0x6c>
    2026:	13 c0       	rjmp	.+38     	; 0x204e <DIO_voidSetPortvalue+0x74>
	{
		 case DIO_PORTA:
			PORTA = Copy_u8value;
    2028:	eb e3       	ldi	r30, 0x3B	; 59
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	80 83       	st	Z, r24
    2030:	0e c0       	rjmp	.+28     	; 0x204e <DIO_voidSetPortvalue+0x74>
		 break;
		 case DIO_PORTB:
			PORTB = Copy_u8value;
    2032:	e8 e3       	ldi	r30, 0x38	; 56
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	80 83       	st	Z, r24
    203a:	09 c0       	rjmp	.+18     	; 0x204e <DIO_voidSetPortvalue+0x74>
		 break;
		 case DIO_PORTC:
			PORTC = Copy_u8value;
    203c:	e5 e3       	ldi	r30, 0x35	; 53
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	80 83       	st	Z, r24
    2044:	04 c0       	rjmp	.+8      	; 0x204e <DIO_voidSetPortvalue+0x74>
		 break;
		 case DIO_PORTD:				
			PORTD = Copy_u8value;
    2046:	e2 e3       	ldi	r30, 0x32	; 50
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	80 83       	st	Z, r24
		 break;
		 default: ;
	 
	}
 }
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <DIO_u8GetPortValue>:
 u8   DIO_u8GetPortValue(u8 Copy_u8Port)
 {
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <DIO_u8GetPortValue+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <DIO_u8GetPortValue+0x8>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	8a 83       	std	Y+2, r24	; 0x02
	 u8 l_value = 0;
    206a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	3c 83       	std	Y+4, r19	; 0x04
    2074:	2b 83       	std	Y+3, r18	; 0x03
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	d1 f0       	breq	.+52     	; 0x20b4 <DIO_u8GetPortValue+0x58>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <DIO_u8GetPortValue+0x38>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	61 f0       	breq	.+24     	; 0x20aa <DIO_u8GetPortValue+0x4e>
    2092:	1e c0       	rjmp	.+60     	; 0x20d0 <DIO_u8GetPortValue+0x74>
    2094:	2b 81       	ldd	r18, Y+3	; 0x03
    2096:	3c 81       	ldd	r19, Y+4	; 0x04
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	81 f0       	breq	.+32     	; 0x20be <DIO_u8GetPortValue+0x62>
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	81 f0       	breq	.+32     	; 0x20c8 <DIO_u8GetPortValue+0x6c>
    20a8:	13 c0       	rjmp	.+38     	; 0x20d0 <DIO_u8GetPortValue+0x74>
	{
		 case DIO_PORTA:
			 l_value = PINA;
    20aa:	e9 e3       	ldi	r30, 0x39	; 57
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	0e c0       	rjmp	.+28     	; 0x20d0 <DIO_u8GetPortValue+0x74>
		 break;
		 case DIO_PORTB:
			 l_value = PINB;
    20b4:	e6 e3       	ldi	r30, 0x36	; 54
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	09 c0       	rjmp	.+18     	; 0x20d0 <DIO_u8GetPortValue+0x74>
		 break;
		 case DIO_PORTC:
			 l_value = PINC;
    20be:	e3 e3       	ldi	r30, 0x33	; 51
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <DIO_u8GetPortValue+0x74>
		 break;
		 case DIO_PORTD:				
			 l_value = PIND;
    20c8:	e0 e3       	ldi	r30, 0x30	; 48
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	89 83       	std	Y+1, r24	; 0x01
		 break;
		 default: ;
	 
	}
	return l_value;
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
 }
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <ADC_voidInit>:
#include "ADC.h"
#include <avr/interrupt.h>


void ADC_voidInit(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	/*Enable the adc */
	SET_BIT(ADCSRA,ADEN);
    20e8:	a6 e2       	ldi	r26, 0x26	; 38
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e6 e2       	ldi	r30, 0x26	; 38
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	8c 93       	st	X, r24
	/*Select v ref == Vcc*/
	SET_BIT(ADMUX,REFS0);
    20f6:	a7 e2       	ldi	r26, 0x27	; 39
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e7 e2       	ldi	r30, 0x27	; 39
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	80 64       	ori	r24, 0x40	; 64
    2102:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    2104:	a7 e2       	ldi	r26, 0x27	; 39
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e7 e2       	ldi	r30, 0x27	; 39
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	8c 93       	st	X, r24
	/*Select Right Adjst*/
	CLEAR_BIT(ADMUX,ADLAR);
    2112:	a7 e2       	ldi	r26, 0x27	; 39
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e7 e2       	ldi	r30, 0x27	; 39
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	8f 7d       	andi	r24, 0xDF	; 223
    211e:	8c 93       	st	X, r24
	/*disable the auto triger*/
	CLEAR_BIT(ADCSRA,ADATE);
    2120:	a6 e2       	ldi	r26, 0x26	; 38
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e6 e2       	ldi	r30, 0x26	; 38
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8f 7d       	andi	r24, 0xDF	; 223
    212c:	8c 93       	st	X, r24
	/*Select Prescaler*/
	SET_BIT(ADCSRA,ADPS2);
    212e:	a6 e2       	ldi	r26, 0x26	; 38
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e6 e2       	ldi	r30, 0x26	; 38
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	84 60       	ori	r24, 0x04	; 4
    213a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    213c:	a6 e2       	ldi	r26, 0x26	; 38
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e6 e2       	ldi	r30, 0x26	; 38
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	82 60       	ori	r24, 0x02	; 2
    2148:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADPS0);
    214a:	a6 e2       	ldi	r26, 0x26	; 38
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e6 e2       	ldi	r30, 0x26	; 38
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	8e 7f       	andi	r24, 0xFE	; 254
    2156:	8c 93       	st	X, r24
	
}
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <ADC_u16GetDigitalValue>:

u16  ADC_u16GetDigitalValue(u8 Copy_u8ChannelNum)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	0f 92       	push	r0
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits*/
	ADMUX &= CLEAR_MASK;
    216a:	a7 e2       	ldi	r26, 0x27	; 39
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e7 e2       	ldi	r30, 0x27	; 39
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	80 7e       	andi	r24, 0xE0	; 224
    2176:	8c 93       	st	X, r24
	/*Select channel*/
	ADMUX |= Copy_u8ChannelNum;
    2178:	a7 e2       	ldi	r26, 0x27	; 39
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e7 e2       	ldi	r30, 0x27	; 39
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	90 81       	ld	r25, Z
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	89 2b       	or	r24, r25
    2186:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADSC);
    2188:	a6 e2       	ldi	r26, 0x26	; 38
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e6 e2       	ldi	r30, 0x26	; 38
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 64       	ori	r24, 0x40	; 64
    2194:	8c 93       	st	X, r24
	/*wait conversion to complete*/
	while((READ_BIT(ADCSRA,ADIF)) == 0);
    2196:	e6 e2       	ldi	r30, 0x26	; 38
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	82 95       	swap	r24
    219e:	8f 70       	andi	r24, 0x0F	; 15
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	81 70       	andi	r24, 0x01	; 1
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	a9 f3       	breq	.-22     	; 0x2196 <ADC_u16GetDigitalValue+0x38>
	/*Clear the flag*/
	SET_BIT(ADCSRA,ADIF);
    21ac:	a6 e2       	ldi	r26, 0x26	; 38
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e6 e2       	ldi	r30, 0x26	; 38
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 61       	ori	r24, 0x10	; 16
    21b8:	8c 93       	st	X, r24
	/*Return the Digital value*/
	return ADC_REG;
    21ba:	e4 e2       	ldi	r30, 0x24	; 36
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
	
}
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <icu_callBack>:
#include "Ultra_Sonic.h"
static void icu_callBack(void);
static volatile u16 high =0;

static void icu_callBack(void)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	static u8 f = 0;
	static u16 a = 0;
	static u16 b = 0;
	if(f==0)
    21d2:	80 91 cc 00 	lds	r24, 0x00CC
    21d6:	88 23       	and	r24, r24
    21d8:	69 f4       	brne	.+26     	; 0x21f4 <icu_callBack+0x2a>
	{
		a = Timer1_u16ReadICR1Value();
    21da:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Timer1_u16ReadICR1Value>
    21de:	90 93 cb 00 	sts	0x00CB, r25
    21e2:	80 93 ca 00 	sts	0x00CA, r24
		Timer1_voidICUSetTriggerEdge(ICU_FALLING_EDGE);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	0e 94 23 08 	call	0x1046	; 0x1046 <Timer1_voidICUSetTriggerEdge>
		f=1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 cc 00 	sts	0x00CC, r24
    21f2:	1f c0       	rjmp	.+62     	; 0x2232 <icu_callBack+0x68>
	}
	else if(f==1)
    21f4:	80 91 cc 00 	lds	r24, 0x00CC
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	d9 f4       	brne	.+54     	; 0x2232 <icu_callBack+0x68>
	{
		b = Timer1_u16ReadICR1Value();
    21fc:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Timer1_u16ReadICR1Value>
    2200:	90 93 c9 00 	sts	0x00C9, r25
    2204:	80 93 c8 00 	sts	0x00C8, r24
		Timer1_voidICUSetTriggerEdge(ICU_RISING_EDGE);
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	0e 94 23 08 	call	0x1046	; 0x1046 <Timer1_voidICUSetTriggerEdge>
		f=0;
    220e:	10 92 cc 00 	sts	0x00CC, r1
		high = b - a;
    2212:	20 91 c8 00 	lds	r18, 0x00C8
    2216:	30 91 c9 00 	lds	r19, 0x00C9
    221a:	80 91 ca 00 	lds	r24, 0x00CA
    221e:	90 91 cb 00 	lds	r25, 0x00CB
    2222:	a9 01       	movw	r20, r18
    2224:	48 1b       	sub	r20, r24
    2226:	59 0b       	sbc	r21, r25
    2228:	ca 01       	movw	r24, r20
    222a:	90 93 c7 00 	sts	0x00C7, r25
    222e:	80 93 c6 00 	sts	0x00C6, r24
	}

}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <UltraSonic_voidInit>:


void UltraSonic_voidInit(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_INPUT);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	66 e0       	ldi	r22, 0x06	; 6
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(TRIGGER_PORT,TRIGGER_PIN,DIO_OUTPUT);
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	Timer1_voidICUSetCallBack(icu_callBack);
    2254:	85 ee       	ldi	r24, 0xE5	; 229
    2256:	90 e1       	ldi	r25, 0x10	; 16
    2258:	0e 94 11 08 	call	0x1022	; 0x1022 <Timer1_voidICUSetCallBack>
	Timer1_voidICUSetTriggerEdge(ICU_RISING_EDGE);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0e 94 23 08 	call	0x1046	; 0x1046 <Timer1_voidICUSetTriggerEdge>
	Timer1_voidICUInterruptEnable();
    2262:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Timer1_voidICUInterruptEnable>
}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <UltraSonic_u16ReadValue>:
u16 UltraSonic_u16ReadValue(u8 Timer1_prescaler)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	a9 97       	sbiw	r28, 0x29	; 41
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	89 a7       	std	Y+41, r24	; 0x29
	u16 distance = 0;
    2282:	18 a6       	std	Y+40, r1	; 0x28
    2284:	1f a2       	std	Y+39, r1	; 0x27
	DIO_voidSetPinvalue(TRIGGER_PORT,TRIGGER_PIN,DIO_HIGH);
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e2       	ldi	r26, 0x20	; 32
    2296:	b1 e4       	ldi	r27, 0x41	; 65
    2298:	8b a3       	std	Y+35, r24	; 0x23
    229a:	9c a3       	std	Y+36, r25	; 0x24
    229c:	ad a3       	std	Y+37, r26	; 0x25
    229e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22a0:	6b a1       	ldd	r22, Y+35	; 0x23
    22a2:	7c a1       	ldd	r23, Y+36	; 0x24
    22a4:	8d a1       	ldd	r24, Y+37	; 0x25
    22a6:	9e a1       	ldd	r25, Y+38	; 0x26
    22a8:	2b ea       	ldi	r18, 0xAB	; 171
    22aa:	3a ea       	ldi	r19, 0xAA	; 170
    22ac:	4a e2       	ldi	r20, 0x2A	; 42
    22ae:	50 e4       	ldi	r21, 0x40	; 64
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8f 8f       	std	Y+31, r24	; 0x1f
    22ba:	98 a3       	std	Y+32, r25	; 0x20
    22bc:	a9 a3       	std	Y+33, r26	; 0x21
    22be:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22c2:	78 a1       	ldd	r23, Y+32	; 0x20
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	1c f4       	brge	.+6      	; 0x22de <UltraSonic_u16ReadValue+0x72>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	8e 8f       	std	Y+30, r24	; 0x1e
    22dc:	91 c0       	rjmp	.+290    	; 0x2400 <UltraSonic_u16ReadValue+0x194>
	else if (__tmp > 255)
    22de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22e0:	78 a1       	ldd	r23, Y+32	; 0x20
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	53 e4       	ldi	r21, 0x43	; 67
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	0c f0       	brlt	.+2      	; 0x22f8 <UltraSonic_u16ReadValue+0x8c>
    22f6:	7b c0       	rjmp	.+246    	; 0x23ee <UltraSonic_u16ReadValue+0x182>
	{
		_delay_ms(__us / 1000.0);
    22f8:	6b a1       	ldd	r22, Y+35	; 0x23
    22fa:	7c a1       	ldd	r23, Y+36	; 0x24
    22fc:	8d a1       	ldd	r24, Y+37	; 0x25
    22fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8a 8f       	std	Y+26, r24	; 0x1a
    2312:	9b 8f       	std	Y+27, r25	; 0x1b
    2314:	ac 8f       	std	Y+28, r26	; 0x1c
    2316:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	6a 8d       	ldd	r22, Y+26	; 0x1a
    231a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    231c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    231e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a ef       	ldi	r20, 0xFA	; 250
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8e 8b       	std	Y+22, r24	; 0x16
    2332:	9f 8b       	std	Y+23, r25	; 0x17
    2334:	a8 8f       	std	Y+24, r26	; 0x18
    2336:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2338:	6e 89       	ldd	r22, Y+22	; 0x16
    233a:	7f 89       	ldd	r23, Y+23	; 0x17
    233c:	88 8d       	ldd	r24, Y+24	; 0x18
    233e:	99 8d       	ldd	r25, Y+25	; 0x19
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	2c f4       	brge	.+10     	; 0x235a <UltraSonic_u16ReadValue+0xee>
		__ticks = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9d 8b       	std	Y+21, r25	; 0x15
    2356:	8c 8b       	std	Y+20, r24	; 0x14
    2358:	3f c0       	rjmp	.+126    	; 0x23d8 <UltraSonic_u16ReadValue+0x16c>
	else if (__tmp > 65535)
    235a:	6e 89       	ldd	r22, Y+22	; 0x16
    235c:	7f 89       	ldd	r23, Y+23	; 0x17
    235e:	88 8d       	ldd	r24, Y+24	; 0x18
    2360:	99 8d       	ldd	r25, Y+25	; 0x19
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	4c f5       	brge	.+82     	; 0x23c4 <UltraSonic_u16ReadValue+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2374:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2376:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2378:	9d 8d       	ldd	r25, Y+29	; 0x1d
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9d 8b       	std	Y+21, r25	; 0x15
    2398:	8c 8b       	std	Y+20, r24	; 0x14
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <UltraSonic_u16ReadValue+0x14e>
    239c:	88 ec       	ldi	r24, 0xC8	; 200
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9b 8b       	std	Y+19, r25	; 0x13
    23a2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a4:	8a 89       	ldd	r24, Y+18	; 0x12
    23a6:	9b 89       	ldd	r25, Y+19	; 0x13
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <UltraSonic_u16ReadValue+0x13c>
    23ac:	9b 8b       	std	Y+19, r25	; 0x13
    23ae:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b0:	8c 89       	ldd	r24, Y+20	; 0x14
    23b2:	9d 89       	ldd	r25, Y+21	; 0x15
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9d 8b       	std	Y+21, r25	; 0x15
    23b8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	8c 89       	ldd	r24, Y+20	; 0x14
    23bc:	9d 89       	ldd	r25, Y+21	; 0x15
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f7       	brne	.-38     	; 0x239c <UltraSonic_u16ReadValue+0x130>
    23c2:	24 c0       	rjmp	.+72     	; 0x240c <UltraSonic_u16ReadValue+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c4:	6e 89       	ldd	r22, Y+22	; 0x16
    23c6:	7f 89       	ldd	r23, Y+23	; 0x17
    23c8:	88 8d       	ldd	r24, Y+24	; 0x18
    23ca:	99 8d       	ldd	r25, Y+25	; 0x19
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9d 8b       	std	Y+21, r25	; 0x15
    23d6:	8c 8b       	std	Y+20, r24	; 0x14
    23d8:	8c 89       	ldd	r24, Y+20	; 0x14
    23da:	9d 89       	ldd	r25, Y+21	; 0x15
    23dc:	99 8b       	std	Y+17, r25	; 0x11
    23de:	88 8b       	std	Y+16, r24	; 0x10
    23e0:	88 89       	ldd	r24, Y+16	; 0x10
    23e2:	99 89       	ldd	r25, Y+17	; 0x11
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <UltraSonic_u16ReadValue+0x178>
    23e8:	99 8b       	std	Y+17, r25	; 0x11
    23ea:	88 8b       	std	Y+16, r24	; 0x10
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <UltraSonic_u16ReadValue+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23ee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23f0:	78 a1       	ldd	r23, Y+32	; 0x20
    23f2:	89 a1       	ldd	r24, Y+33	; 0x21
    23f4:	9a a1       	ldd	r25, Y+34	; 0x22
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2400:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2402:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2404:	8f 85       	ldd	r24, Y+15	; 0x0f
    2406:	8a 95       	dec	r24
    2408:	f1 f7       	brne	.-4      	; 0x2406 <UltraSonic_u16ReadValue+0x19a>
    240a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(10);
	DIO_voidSetPinvalue(TRIGGER_PORT,TRIGGER_PIN,DIO_LOW);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 ea       	ldi	r26, 0xA0	; 160
    241c:	b0 e4       	ldi	r27, 0x40	; 64
    241e:	8b 87       	std	Y+11, r24	; 0x0b
    2420:	9c 87       	std	Y+12, r25	; 0x0c
    2422:	ad 87       	std	Y+13, r26	; 0x0d
    2424:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6b 85       	ldd	r22, Y+11	; 0x0b
    2428:	7c 85       	ldd	r23, Y+12	; 0x0c
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8f 83       	std	Y+7, r24	; 0x07
    2440:	98 87       	std	Y+8, r25	; 0x08
    2442:	a9 87       	std	Y+9, r26	; 0x09
    2444:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <UltraSonic_u16ReadValue+0x1fc>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <UltraSonic_u16ReadValue+0x27a>
	else if (__tmp > 65535)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <UltraSonic_u16ReadValue+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6b 85       	ldd	r22, Y+11	; 0x0b
    2482:	7c 85       	ldd	r23, Y+12	; 0x0c
    2484:	8d 85       	ldd	r24, Y+13	; 0x0d
    2486:	9e 85       	ldd	r25, Y+14	; 0x0e
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <UltraSonic_u16ReadValue+0x25c>
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <UltraSonic_u16ReadValue+0x24a>
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <UltraSonic_u16ReadValue+0x23e>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <UltraSonic_u16ReadValue+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <UltraSonic_u16ReadValue+0x286>
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	distance=((Timer1_prescaler*high*34600UL)/(F_CPU*2)) ;
    24fa:	89 a5       	ldd	r24, Y+41	; 0x29
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	80 91 c6 00 	lds	r24, 0x00C6
    2504:	90 91 c7 00 	lds	r25, 0x00C7
    2508:	ac 01       	movw	r20, r24
    250a:	24 9f       	mul	r18, r20
    250c:	c0 01       	movw	r24, r0
    250e:	25 9f       	mul	r18, r21
    2510:	90 0d       	add	r25, r0
    2512:	34 9f       	mul	r19, r20
    2514:	90 0d       	add	r25, r0
    2516:	11 24       	eor	r1, r1
    2518:	cc 01       	movw	r24, r24
    251a:	a0 e0       	ldi	r26, 0x00	; 0
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	28 e2       	ldi	r18, 0x28	; 40
    2520:	37 e8       	ldi	r19, 0x87	; 135
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsi3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	34 e2       	ldi	r19, 0x24	; 36
    2536:	44 ef       	ldi	r20, 0xF4	; 244
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 67 22 	call	0x44ce	; 0x44ce <__udivmodsi4>
    2542:	da 01       	movw	r26, r20
    2544:	c9 01       	movw	r24, r18
    2546:	98 a7       	std	Y+40, r25	; 0x28
    2548:	8f a3       	std	Y+39, r24	; 0x27

	return distance;
    254a:	8f a1       	ldd	r24, Y+39	; 0x27
    254c:	98 a5       	ldd	r25, Y+40	; 0x28
}
    254e:	a9 96       	adiw	r28, 0x29	; 41
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_voidSendCommand>:
static void LCD_voidSendEnable(void);
static void LCD_voidSend4Bit(u8 Copy_u8CommandData);
static void LCD_4Bit_voidSetCursor(u8 Copy_u8Row,u8 Copy_u8Coulmn);

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	0f 92       	push	r0
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);	
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	
	DIO_voidSetPortvalue(LCD_DATA_PORT,Copy_u8Command);
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	69 81       	ldd	r22, Y+1	; 0x01
    2584:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <DIO_voidSetPortvalue>
	
	LCD_voidSendEnable();
    2588:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_voidSendEnable>
}
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);	
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	
	DIO_voidSetPortvalue(LCD_DATA_PORT,Copy_u8Data);
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	69 81       	ldd	r22, Y+1	; 0x01
    25b8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <DIO_voidSetPortvalue>
	
	LCD_voidSendEnable();
    25bc:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_voidSendEnable>
}
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <LCD_voidSendDataPos>:
void LCD_voidSendDataPos(u8 Copy_u8Data,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <LCD_voidSendDataPos+0x6>
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	6a 83       	std	Y+2, r22	; 0x02
    25d8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	6b 81       	ldd	r22, Y+3	; 0x03
    25de:	0e 94 01 1c 	call	0x3802	; 0x3802 <LCD_voidSetCursor>

	LCD_voidSendData(Copy_u8Data);
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_voidSendData>
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LCD_8BitvoidInit>:

void LCD_8BitvoidInit(void)
{
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	cc 54       	subi	r28, 0x4C	; 76
    2602:	d0 40       	sbci	r29, 0x00	; 0
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	6f ef       	ldi	r22, 0xFF	; 255
    2612:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <DIO_voidSetPortDirection>
	
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	62 e0       	ldi	r22, 0x02	; 2
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
    2634:	fe 01       	movw	r30, r28
    2636:	e7 5b       	subi	r30, 0xB7	; 183
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	ac e0       	ldi	r26, 0x0C	; 12
    2640:	b2 e4       	ldi	r27, 0x42	; 66
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	8e 01       	movw	r16, r28
    264c:	0b 5b       	subi	r16, 0xBB	; 187
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	fe 01       	movw	r30, r28
    2652:	e7 5b       	subi	r30, 0xB7	; 183
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	f8 01       	movw	r30, r16
    2670:	80 83       	st	Z, r24
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	a2 83       	std	Z+2, r26	; 0x02
    2676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2678:	fe 01       	movw	r30, r28
    267a:	eb 5b       	subi	r30, 0xBB	; 187
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	44 f4       	brge	.+16     	; 0x26a6 <LCD_8BitvoidInit+0xb2>
		__ticks = 1;
    2696:	fe 01       	movw	r30, r28
    2698:	ed 5b       	subi	r30, 0xBD	; 189
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
    26a4:	64 c0       	rjmp	.+200    	; 0x276e <LCD_8BitvoidInit+0x17a>
	else if (__tmp > 65535)
    26a6:	fe 01       	movw	r30, r28
    26a8:	eb 5b       	subi	r30, 0xBB	; 187
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	0c f0       	brlt	.+2      	; 0x26c6 <LCD_8BitvoidInit+0xd2>
    26c4:	43 c0       	rjmp	.+134    	; 0x274c <LCD_8BitvoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 5b       	subi	r30, 0xB7	; 183
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e2       	ldi	r20, 0x20	; 32
    26da:	51 e4       	ldi	r21, 0x41	; 65
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8e 01       	movw	r16, r28
    26e6:	0d 5b       	subi	r16, 0xBD	; 189
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	1f c0       	rjmp	.+62     	; 0x273c <LCD_8BitvoidInit+0x148>
    26fe:	fe 01       	movw	r30, r28
    2700:	ef 5b       	subi	r30, 0xBF	; 191
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	88 ec       	ldi	r24, 0xC8	; 200
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
    270c:	fe 01       	movw	r30, r28
    270e:	ef 5b       	subi	r30, 0xBF	; 191
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_8BitvoidInit+0x122>
    271a:	fe 01       	movw	r30, r28
    271c:	ef 5b       	subi	r30, 0xBF	; 191
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2724:	de 01       	movw	r26, r28
    2726:	ad 5b       	subi	r26, 0xBD	; 189
    2728:	bf 4f       	sbci	r27, 0xFF	; 255
    272a:	fe 01       	movw	r30, r28
    272c:	ed 5b       	subi	r30, 0xBD	; 189
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	11 96       	adiw	r26, 0x01	; 1
    2738:	9c 93       	st	X, r25
    273a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	fe 01       	movw	r30, r28
    273e:	ed 5b       	subi	r30, 0xBD	; 189
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	d1 f6       	brne	.-76     	; 0x26fe <LCD_8BitvoidInit+0x10a>
    274a:	24 c0       	rjmp	.+72     	; 0x2794 <LCD_8BitvoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	8e 01       	movw	r16, r28
    274e:	0d 5b       	subi	r16, 0xBD	; 189
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	eb 5b       	subi	r30, 0xBB	; 187
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	f8 01       	movw	r30, r16
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
    276e:	fe 01       	movw	r30, r28
    2770:	ed 5b       	subi	r30, 0xBD	; 189
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	fe 01       	movw	r30, r28
    277a:	ff 96       	adiw	r30, 0x3f	; 63
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	fe 01       	movw	r30, r28
    2782:	ff 96       	adiw	r30, 0x3f	; 63
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_8BitvoidInit+0x194>
    278c:	fe 01       	movw	r30, r28
    278e:	ff 96       	adiw	r30, 0x3f	; 63
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
	
	_delay_ms(35);
	
	LCD_voidSendCommand(LCD_8BIT_FUNC_SET);
    2794:	88 e3       	ldi	r24, 0x38	; 56
    2796:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a8 e4       	ldi	r26, 0x48	; 72
    27a0:	b2 e4       	ldi	r27, 0x42	; 66
    27a2:	8b af       	std	Y+59, r24	; 0x3b
    27a4:	9c af       	std	Y+60, r25	; 0x3c
    27a6:	ad af       	std	Y+61, r26	; 0x3d
    27a8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27aa:	6b ad       	ldd	r22, Y+59	; 0x3b
    27ac:	7c ad       	ldd	r23, Y+60	; 0x3c
    27ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27b2:	2b ea       	ldi	r18, 0xAB	; 171
    27b4:	3a ea       	ldi	r19, 0xAA	; 170
    27b6:	4a e2       	ldi	r20, 0x2A	; 42
    27b8:	50 e4       	ldi	r21, 0x40	; 64
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8f ab       	std	Y+55, r24	; 0x37
    27c4:	98 af       	std	Y+56, r25	; 0x38
    27c6:	a9 af       	std	Y+57, r26	; 0x39
    27c8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    27ca:	6f a9       	ldd	r22, Y+55	; 0x37
    27cc:	78 ad       	ldd	r23, Y+56	; 0x38
    27ce:	89 ad       	ldd	r24, Y+57	; 0x39
    27d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	1c f4       	brge	.+6      	; 0x27e8 <LCD_8BitvoidInit+0x1f4>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	8e ab       	std	Y+54, r24	; 0x36
    27e6:	91 c0       	rjmp	.+290    	; 0x290a <LCD_8BitvoidInit+0x316>
	else if (__tmp > 255)
    27e8:	6f a9       	ldd	r22, Y+55	; 0x37
    27ea:	78 ad       	ldd	r23, Y+56	; 0x38
    27ec:	89 ad       	ldd	r24, Y+57	; 0x39
    27ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	53 e4       	ldi	r21, 0x43	; 67
    27f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	0c f0       	brlt	.+2      	; 0x2802 <LCD_8BitvoidInit+0x20e>
    2800:	7b c0       	rjmp	.+246    	; 0x28f8 <LCD_8BitvoidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2802:	6b ad       	ldd	r22, Y+59	; 0x3b
    2804:	7c ad       	ldd	r23, Y+60	; 0x3c
    2806:	8d ad       	ldd	r24, Y+61	; 0x3d
    2808:	9e ad       	ldd	r25, Y+62	; 0x3e
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	54 e4       	ldi	r21, 0x44	; 68
    2812:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8a ab       	std	Y+50, r24	; 0x32
    281c:	9b ab       	std	Y+51, r25	; 0x33
    281e:	ac ab       	std	Y+52, r26	; 0x34
    2820:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	6a a9       	ldd	r22, Y+50	; 0x32
    2824:	7b a9       	ldd	r23, Y+51	; 0x33
    2826:	8c a9       	ldd	r24, Y+52	; 0x34
    2828:	9d a9       	ldd	r25, Y+53	; 0x35
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a ef       	ldi	r20, 0xFA	; 250
    2830:	54 e4       	ldi	r21, 0x44	; 68
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8e a7       	std	Y+46, r24	; 0x2e
    283c:	9f a7       	std	Y+47, r25	; 0x2f
    283e:	a8 ab       	std	Y+48, r26	; 0x30
    2840:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2842:	6e a5       	ldd	r22, Y+46	; 0x2e
    2844:	7f a5       	ldd	r23, Y+47	; 0x2f
    2846:	88 a9       	ldd	r24, Y+48	; 0x30
    2848:	99 a9       	ldd	r25, Y+49	; 0x31
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <LCD_8BitvoidInit+0x270>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9d a7       	std	Y+45, r25	; 0x2d
    2860:	8c a7       	std	Y+44, r24	; 0x2c
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <LCD_8BitvoidInit+0x2ee>
	else if (__tmp > 65535)
    2864:	6e a5       	ldd	r22, Y+46	; 0x2e
    2866:	7f a5       	ldd	r23, Y+47	; 0x2f
    2868:	88 a9       	ldd	r24, Y+48	; 0x30
    286a:	99 a9       	ldd	r25, Y+49	; 0x31
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <LCD_8BitvoidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	6a a9       	ldd	r22, Y+50	; 0x32
    287e:	7b a9       	ldd	r23, Y+51	; 0x33
    2880:	8c a9       	ldd	r24, Y+52	; 0x34
    2882:	9d a9       	ldd	r25, Y+53	; 0x35
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9d a7       	std	Y+45, r25	; 0x2d
    28a2:	8c a7       	std	Y+44, r24	; 0x2c
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <LCD_8BitvoidInit+0x2d0>
    28a6:	88 ec       	ldi	r24, 0xC8	; 200
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9b a7       	std	Y+43, r25	; 0x2b
    28ac:	8a a7       	std	Y+42, r24	; 0x2a
    28ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    28b0:	9b a5       	ldd	r25, Y+43	; 0x2b
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_8BitvoidInit+0x2be>
    28b6:	9b a7       	std	Y+43, r25	; 0x2b
    28b8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    28bc:	9d a5       	ldd	r25, Y+45	; 0x2d
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9d a7       	std	Y+45, r25	; 0x2d
    28c2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    28c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <LCD_8BitvoidInit+0x2b2>
    28cc:	24 c0       	rjmp	.+72     	; 0x2916 <LCD_8BitvoidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    28d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    28d2:	88 a9       	ldd	r24, Y+48	; 0x30
    28d4:	99 a9       	ldd	r25, Y+49	; 0x31
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9d a7       	std	Y+45, r25	; 0x2d
    28e0:	8c a7       	std	Y+44, r24	; 0x2c
    28e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    28e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    28e6:	99 a7       	std	Y+41, r25	; 0x29
    28e8:	88 a7       	std	Y+40, r24	; 0x28
    28ea:	88 a5       	ldd	r24, Y+40	; 0x28
    28ec:	99 a5       	ldd	r25, Y+41	; 0x29
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_8BitvoidInit+0x2fa>
    28f2:	99 a7       	std	Y+41, r25	; 0x29
    28f4:	88 a7       	std	Y+40, r24	; 0x28
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <LCD_8BitvoidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28f8:	6f a9       	ldd	r22, Y+55	; 0x37
    28fa:	78 ad       	ldd	r23, Y+56	; 0x38
    28fc:	89 ad       	ldd	r24, Y+57	; 0x39
    28fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8e ab       	std	Y+54, r24	; 0x36
    290a:	8e a9       	ldd	r24, Y+54	; 0x36
    290c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    290e:	8f a1       	ldd	r24, Y+39	; 0x27
    2910:	8a 95       	dec	r24
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_8BitvoidInit+0x31c>
    2914:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_us(50);
	
	LCD_voidSendCommand(LCD_DISBLAY_ON_OFF);
    2916:	8c e0       	ldi	r24, 0x0C	; 12
    2918:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a8 e4       	ldi	r26, 0x48	; 72
    2922:	b2 e4       	ldi	r27, 0x42	; 66
    2924:	8b a3       	std	Y+35, r24	; 0x23
    2926:	9c a3       	std	Y+36, r25	; 0x24
    2928:	ad a3       	std	Y+37, r26	; 0x25
    292a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292c:	6b a1       	ldd	r22, Y+35	; 0x23
    292e:	7c a1       	ldd	r23, Y+36	; 0x24
    2930:	8d a1       	ldd	r24, Y+37	; 0x25
    2932:	9e a1       	ldd	r25, Y+38	; 0x26
    2934:	2b ea       	ldi	r18, 0xAB	; 171
    2936:	3a ea       	ldi	r19, 0xAA	; 170
    2938:	4a e2       	ldi	r20, 0x2A	; 42
    293a:	50 e4       	ldi	r21, 0x40	; 64
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	8f 8f       	std	Y+31, r24	; 0x1f
    2946:	98 a3       	std	Y+32, r25	; 0x20
    2948:	a9 a3       	std	Y+33, r26	; 0x21
    294a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    294c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    294e:	78 a1       	ldd	r23, Y+32	; 0x20
    2950:	89 a1       	ldd	r24, Y+33	; 0x21
    2952:	9a a1       	ldd	r25, Y+34	; 0x22
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	1c f4       	brge	.+6      	; 0x296a <LCD_8BitvoidInit+0x376>
		__ticks = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	8e 8f       	std	Y+30, r24	; 0x1e
    2968:	91 c0       	rjmp	.+290    	; 0x2a8c <LCD_8BitvoidInit+0x498>
	else if (__tmp > 255)
    296a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    296c:	78 a1       	ldd	r23, Y+32	; 0x20
    296e:	89 a1       	ldd	r24, Y+33	; 0x21
    2970:	9a a1       	ldd	r25, Y+34	; 0x22
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	53 e4       	ldi	r21, 0x43	; 67
    297a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <LCD_8BitvoidInit+0x390>
    2982:	7b c0       	rjmp	.+246    	; 0x2a7a <LCD_8BitvoidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    2984:	6b a1       	ldd	r22, Y+35	; 0x23
    2986:	7c a1       	ldd	r23, Y+36	; 0x24
    2988:	8d a1       	ldd	r24, Y+37	; 0x25
    298a:	9e a1       	ldd	r25, Y+38	; 0x26
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a e7       	ldi	r20, 0x7A	; 122
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8a 8f       	std	Y+26, r24	; 0x1a
    299e:	9b 8f       	std	Y+27, r25	; 0x1b
    29a0:	ac 8f       	std	Y+28, r26	; 0x1c
    29a2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8e 8b       	std	Y+22, r24	; 0x16
    29be:	9f 8b       	std	Y+23, r25	; 0x17
    29c0:	a8 8f       	std	Y+24, r26	; 0x18
    29c2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    29c4:	6e 89       	ldd	r22, Y+22	; 0x16
    29c6:	7f 89       	ldd	r23, Y+23	; 0x17
    29c8:	88 8d       	ldd	r24, Y+24	; 0x18
    29ca:	99 8d       	ldd	r25, Y+25	; 0x19
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <LCD_8BitvoidInit+0x3f2>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9d 8b       	std	Y+21, r25	; 0x15
    29e2:	8c 8b       	std	Y+20, r24	; 0x14
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <LCD_8BitvoidInit+0x470>
	else if (__tmp > 65535)
    29e6:	6e 89       	ldd	r22, Y+22	; 0x16
    29e8:	7f 89       	ldd	r23, Y+23	; 0x17
    29ea:	88 8d       	ldd	r24, Y+24	; 0x18
    29ec:	99 8d       	ldd	r25, Y+25	; 0x19
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fa:	18 16       	cp	r1, r24
    29fc:	4c f5       	brge	.+82     	; 0x2a50 <LCD_8BitvoidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a00:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9d 8b       	std	Y+21, r25	; 0x15
    2a24:	8c 8b       	std	Y+20, r24	; 0x14
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <LCD_8BitvoidInit+0x452>
    2a28:	88 ec       	ldi	r24, 0xC8	; 200
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9b 8b       	std	Y+19, r25	; 0x13
    2a2e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a30:	8a 89       	ldd	r24, Y+18	; 0x12
    2a32:	9b 89       	ldd	r25, Y+19	; 0x13
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_8BitvoidInit+0x440>
    2a38:	9b 8b       	std	Y+19, r25	; 0x13
    2a3a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8c 89       	ldd	r24, Y+20	; 0x14
    2a3e:	9d 89       	ldd	r25, Y+21	; 0x15
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9d 8b       	std	Y+21, r25	; 0x15
    2a44:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8c 89       	ldd	r24, Y+20	; 0x14
    2a48:	9d 89       	ldd	r25, Y+21	; 0x15
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <LCD_8BitvoidInit+0x434>
    2a4e:	24 c0       	rjmp	.+72     	; 0x2a98 <LCD_8BitvoidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	6e 89       	ldd	r22, Y+22	; 0x16
    2a52:	7f 89       	ldd	r23, Y+23	; 0x17
    2a54:	88 8d       	ldd	r24, Y+24	; 0x18
    2a56:	99 8d       	ldd	r25, Y+25	; 0x19
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9d 8b       	std	Y+21, r25	; 0x15
    2a62:	8c 8b       	std	Y+20, r24	; 0x14
    2a64:	8c 89       	ldd	r24, Y+20	; 0x14
    2a66:	9d 89       	ldd	r25, Y+21	; 0x15
    2a68:	99 8b       	std	Y+17, r25	; 0x11
    2a6a:	88 8b       	std	Y+16, r24	; 0x10
    2a6c:	88 89       	ldd	r24, Y+16	; 0x10
    2a6e:	99 89       	ldd	r25, Y+17	; 0x11
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_8BitvoidInit+0x47c>
    2a74:	99 8b       	std	Y+17, r25	; 0x11
    2a76:	88 8b       	std	Y+16, r24	; 0x10
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_8BitvoidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a7c:	78 a1       	ldd	r23, Y+32	; 0x20
    2a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a80:	9a a1       	ldd	r25, Y+34	; 0x22
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a8e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a92:	8a 95       	dec	r24
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_8BitvoidInit+0x49e>
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_us(50);
	
	LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 ea       	ldi	r26, 0xA0	; 160
    2aa4:	b0 e4       	ldi	r27, 0x40	; 64
    2aa6:	8b 87       	std	Y+11, r24	; 0x0b
    2aa8:	9c 87       	std	Y+12, r25	; 0x0c
    2aaa:	ad 87       	std	Y+13, r26	; 0x0d
    2aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8f 83       	std	Y+7, r24	; 0x07
    2ac8:	98 87       	std	Y+8, r25	; 0x08
    2aca:	a9 87       	std	Y+9, r26	; 0x09
    2acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ace:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad0:	78 85       	ldd	r23, Y+8	; 0x08
    2ad2:	89 85       	ldd	r24, Y+9	; 0x09
    2ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_8BitvoidInit+0x4fc>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_8BitvoidInit+0x57a>
	else if (__tmp > 65535)
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_8BitvoidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_8BitvoidInit+0x55c>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_8BitvoidInit+0x54a>
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_8BitvoidInit+0x53e>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_8BitvoidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_8BitvoidInit+0x586>
    2b7e:	9a 83       	std	Y+2, r25	; 0x02
    2b80:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(5);
	


}
    2b82:	c4 5b       	subi	r28, 0xB4	; 180
    2b84:	df 4f       	sbci	r29, 0xFF	; 255
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	08 95       	ret

00002b9a <LCD_voidSendString>:

void LCD_voidSendString(u8 *Copy_PAString)
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <LCD_voidSendString+0x6>
    2ba0:	0f 92       	push	r0
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	9b 83       	std	Y+3, r25	; 0x03
    2ba8:	8a 83       	std	Y+2, r24	; 0x02


	for(u8 i=0;Copy_PAString[i];i++)
    2baa:	19 82       	std	Y+1, r1	; 0x01
    2bac:	0e c0       	rjmp	.+28     	; 0x2bca <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_PAString[i]);
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	fc 01       	movw	r30, r24
    2bba:	e2 0f       	add	r30, r18
    2bbc:	f3 1f       	adc	r31, r19
    2bbe:	80 81       	ld	r24, Z
    2bc0:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_voidSendData>

void LCD_voidSendString(u8 *Copy_PAString)
{


	for(u8 i=0;Copy_PAString[i];i++)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e2 0f       	add	r30, r18
    2bd8:	f3 1f       	adc	r31, r19
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 23       	and	r24, r24
    2bde:	39 f7       	brne	.-50     	; 0x2bae <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_PAString[i]);
	}
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <LCD_voidSendStringPos>:

void LCD_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <LCD_voidSendStringPos+0x6>
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <LCD_voidSendStringPos+0x8>
    2bf4:	0f 92       	push	r0
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	9b 83       	std	Y+3, r25	; 0x03
    2bfc:	8a 83       	std	Y+2, r24	; 0x02
    2bfe:	6c 83       	std	Y+4, r22	; 0x04
    2c00:	4d 83       	std	Y+5, r20	; 0x05
	LCD_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    2c02:	8c 81       	ldd	r24, Y+4	; 0x04
    2c04:	6d 81       	ldd	r22, Y+5	; 0x05
    2c06:	0e 94 01 1c 	call	0x3802	; 0x3802 <LCD_voidSetCursor>

	for(u8 i=0;Copy_PAString[i];i++)
    2c0a:	19 82       	std	Y+1, r1	; 0x01
    2c0c:	0e c0       	rjmp	.+28     	; 0x2c2a <LCD_voidSendStringPos+0x3e>
	{
		LCD_voidSendData(Copy_PAString[i]);
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	fc 01       	movw	r30, r24
    2c1a:	e2 0f       	add	r30, r18
    2c1c:	f3 1f       	adc	r31, r19
    2c1e:	80 81       	ld	r24, Z
    2c20:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_voidSendData>

void LCD_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);

	for(u8 i=0;Copy_PAString[i];i++)
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	8f 5f       	subi	r24, 0xFF	; 255
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 0f       	add	r30, r18
    2c38:	f3 1f       	adc	r31, r19
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 23       	and	r24, r24
    2c3e:	39 f7       	brne	.-50     	; 0x2c0e <LCD_voidSendStringPos+0x22>
	{
		LCD_voidSendData(Copy_PAString[i]);
	}
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <LCD_voidSendNumberPos>:

void LCD_voidSendNumberPos(u32 Copy_u32number,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	2f 97       	sbiw	r28, 0x0f	; 15
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	9d 87       	std	Y+13, r25	; 0x0d
    2c66:	8c 87       	std	Y+12, r24	; 0x0c
    2c68:	6e 87       	std	Y+14, r22	; 0x0e
    2c6a:	4f 87       	std	Y+15, r20	; 0x0f
	u8 num[11] = {0};
    2c6c:	8b e0       	ldi	r24, 0x0B	; 11
    2c6e:	fe 01       	movw	r30, r28
    2c70:	31 96       	adiw	r30, 0x01	; 1
    2c72:	df 01       	movw	r26, r30
    2c74:	98 2f       	mov	r25, r24
    2c76:	1d 92       	st	X+, r1
    2c78:	9a 95       	dec	r25
    2c7a:	e9 f7       	brne	.-6      	; 0x2c76 <LCD_voidSendNumberPos+0x26>

	sprintf(num,"%i",Copy_u32number);
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <LCD_voidSendNumberPos+0x2e>
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <LCD_voidSendNumberPos+0x30>
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <LCD_voidSendNumberPos+0x32>
    2c82:	ed b7       	in	r30, 0x3d	; 61
    2c84:	fe b7       	in	r31, 0x3e	; 62
    2c86:	31 96       	adiw	r30, 0x01	; 1
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	80 83       	st	Z, r24
    2c90:	80 e6       	ldi	r24, 0x60	; 96
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	93 83       	std	Z+3, r25	; 0x03
    2c96:	82 83       	std	Z+2, r24	; 0x02
    2c98:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c9c:	95 83       	std	Z+5, r25	; 0x05
    2c9e:	84 83       	std	Z+4, r24	; 0x04
    2ca0:	0e 94 c0 22 	call	0x4580	; 0x4580 <sprintf>
    2ca4:	ad b7       	in	r26, 0x3d	; 61
    2ca6:	be b7       	in	r27, 0x3e	; 62
    2ca8:	16 96       	adiw	r26, 0x06	; 6
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	be bf       	out	0x3e, r27	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	ad bf       	out	0x3d, r26	; 61

	LCD_voidSendStringPos(num,Copy_u8Row,Copy_u8Coulmn);
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	6e 85       	ldd	r22, Y+14	; 0x0e
    2cba:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cbc:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_voidSendStringPos>


}
    2cc0:	2f 96       	adiw	r28, 0x0f	; 15
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <LCD_voidDrawCustomeCharPos>:

void LCD_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	6e 97       	sbiw	r28, 0x1e	; 30
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	9b 8f       	std	Y+27, r25	; 0x1b
    2ce8:	8a 8f       	std	Y+26, r24	; 0x1a
    2cea:	6c 8f       	std	Y+28, r22	; 0x1c
    2cec:	4d 8f       	std	Y+29, r20	; 0x1d
    2cee:	2e 8f       	std	Y+30, r18	; 0x1e
	LCD_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
    2cf0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	08 96       	adiw	r24, 0x08	; 8
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a8 e4       	ldi	r26, 0x48	; 72
    2d0e:	b2 e4       	ldi	r27, 0x42	; 66
    2d10:	8d 8b       	std	Y+21, r24	; 0x15
    2d12:	9e 8b       	std	Y+22, r25	; 0x16
    2d14:	af 8b       	std	Y+23, r26	; 0x17
    2d16:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d18:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d20:	2b ea       	ldi	r18, 0xAB	; 171
    2d22:	3a ea       	ldi	r19, 0xAA	; 170
    2d24:	4a e2       	ldi	r20, 0x2A	; 42
    2d26:	50 e4       	ldi	r21, 0x40	; 64
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	89 8b       	std	Y+17, r24	; 0x11
    2d32:	9a 8b       	std	Y+18, r25	; 0x12
    2d34:	ab 8b       	std	Y+19, r26	; 0x13
    2d36:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d38:	69 89       	ldd	r22, Y+17	; 0x11
    2d3a:	7a 89       	ldd	r23, Y+18	; 0x12
    2d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	1c f4       	brge	.+6      	; 0x2d56 <LCD_voidDrawCustomeCharPos+0x84>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	88 8b       	std	Y+16, r24	; 0x10
    2d54:	91 c0       	rjmp	.+290    	; 0x2e78 <LCD_voidDrawCustomeCharPos+0x1a6>
	else if (__tmp > 255)
    2d56:	69 89       	ldd	r22, Y+17	; 0x11
    2d58:	7a 89       	ldd	r23, Y+18	; 0x12
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	4f e7       	ldi	r20, 0x7F	; 127
    2d64:	53 e4       	ldi	r21, 0x43	; 67
    2d66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <LCD_voidDrawCustomeCharPos+0x9e>
    2d6e:	7b c0       	rjmp	.+246    	; 0x2e66 <LCD_voidDrawCustomeCharPos+0x194>
	{
		_delay_ms(__us / 1000.0);
    2d70:	6d 89       	ldd	r22, Y+21	; 0x15
    2d72:	7e 89       	ldd	r23, Y+22	; 0x16
    2d74:	8f 89       	ldd	r24, Y+23	; 0x17
    2d76:	98 8d       	ldd	r25, Y+24	; 0x18
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	4a e7       	ldi	r20, 0x7A	; 122
    2d7e:	54 e4       	ldi	r21, 0x44	; 68
    2d80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	8c 87       	std	Y+12, r24	; 0x0c
    2d8a:	9d 87       	std	Y+13, r25	; 0x0d
    2d8c:	ae 87       	std	Y+14, r26	; 0x0e
    2d8e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d90:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d92:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	4a ef       	ldi	r20, 0xFA	; 250
    2d9e:	54 e4       	ldi	r21, 0x44	; 68
    2da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	88 87       	std	Y+8, r24	; 0x08
    2daa:	99 87       	std	Y+9, r25	; 0x09
    2dac:	aa 87       	std	Y+10, r26	; 0x0a
    2dae:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2db0:	68 85       	ldd	r22, Y+8	; 0x08
    2db2:	79 85       	ldd	r23, Y+9	; 0x09
    2db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e8       	ldi	r20, 0x80	; 128
    2dbe:	5f e3       	ldi	r21, 0x3F	; 63
    2dc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc4:	88 23       	and	r24, r24
    2dc6:	2c f4       	brge	.+10     	; 0x2dd2 <LCD_voidDrawCustomeCharPos+0x100>
		__ticks = 1;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	9f 83       	std	Y+7, r25	; 0x07
    2dce:	8e 83       	std	Y+6, r24	; 0x06
    2dd0:	3f c0       	rjmp	.+126    	; 0x2e50 <LCD_voidDrawCustomeCharPos+0x17e>
	else if (__tmp > 65535)
    2dd2:	68 85       	ldd	r22, Y+8	; 0x08
    2dd4:	79 85       	ldd	r23, Y+9	; 0x09
    2dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	3f ef       	ldi	r19, 0xFF	; 255
    2dde:	4f e7       	ldi	r20, 0x7F	; 127
    2de0:	57 e4       	ldi	r21, 0x47	; 71
    2de2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de6:	18 16       	cp	r1, r24
    2de8:	4c f5       	brge	.+82     	; 0x2e3c <LCD_voidDrawCustomeCharPos+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dea:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dec:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dee:	8e 85       	ldd	r24, Y+14	; 0x0e
    2df0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e2       	ldi	r20, 0x20	; 32
    2df8:	51 e4       	ldi	r21, 0x41	; 65
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	9f 83       	std	Y+7, r25	; 0x07
    2e10:	8e 83       	std	Y+6, r24	; 0x06
    2e12:	0f c0       	rjmp	.+30     	; 0x2e32 <LCD_voidDrawCustomeCharPos+0x160>
    2e14:	88 ec       	ldi	r24, 0xC8	; 200
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	9d 83       	std	Y+5, r25	; 0x05
    2e1a:	8c 83       	std	Y+4, r24	; 0x04
    2e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <LCD_voidDrawCustomeCharPos+0x14e>
    2e24:	9d 83       	std	Y+5, r25	; 0x05
    2e26:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e28:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	9f 83       	std	Y+7, r25	; 0x07
    2e30:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e32:	8e 81       	ldd	r24, Y+6	; 0x06
    2e34:	9f 81       	ldd	r25, Y+7	; 0x07
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	69 f7       	brne	.-38     	; 0x2e14 <LCD_voidDrawCustomeCharPos+0x142>
    2e3a:	24 c0       	rjmp	.+72     	; 0x2e84 <LCD_voidDrawCustomeCharPos+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3c:	68 85       	ldd	r22, Y+8	; 0x08
    2e3e:	79 85       	ldd	r23, Y+9	; 0x09
    2e40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9f 83       	std	Y+7, r25	; 0x07
    2e4e:	8e 83       	std	Y+6, r24	; 0x06
    2e50:	8e 81       	ldd	r24, Y+6	; 0x06
    2e52:	9f 81       	ldd	r25, Y+7	; 0x07
    2e54:	9b 83       	std	Y+3, r25	; 0x03
    2e56:	8a 83       	std	Y+2, r24	; 0x02
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <LCD_voidDrawCustomeCharPos+0x18a>
    2e60:	9b 83       	std	Y+3, r25	; 0x03
    2e62:	8a 83       	std	Y+2, r24	; 0x02
    2e64:	0f c0       	rjmp	.+30     	; 0x2e84 <LCD_voidDrawCustomeCharPos+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e66:	69 89       	ldd	r22, Y+17	; 0x11
    2e68:	7a 89       	ldd	r23, Y+18	; 0x12
    2e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	88 8b       	std	Y+16, r24	; 0x10
    2e78:	88 89       	ldd	r24, Y+16	; 0x10
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	8a 95       	dec	r24
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <LCD_voidDrawCustomeCharPos+0x1ac>
    2e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    2e84:	19 8e       	std	Y+25, r1	; 0x19
    2e86:	0e c0       	rjmp	.+28     	; 0x2ea4 <LCD_voidDrawCustomeCharPos+0x1d2>
	{
		LCD_voidSendData(Copy_u8PAChar[i]);
    2e88:	89 8d       	ldd	r24, Y+25	; 0x19
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e92:	fc 01       	movw	r30, r24
    2e94:	e2 0f       	add	r30, r18
    2e96:	f3 1f       	adc	r31, r19
    2e98:	80 81       	ld	r24, Z
    2e9a:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_voidSendData>
void LCD_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    2e9e:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	89 8f       	std	Y+25, r24	; 0x19
    2ea4:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea6:	88 30       	cpi	r24, 0x08	; 8
    2ea8:	78 f3       	brcs	.-34     	; 0x2e88 <LCD_voidDrawCustomeCharPos+0x1b6>
	{
		LCD_voidSendData(Copy_u8PAChar[i]);
	}
	LCD_voidSendDataPos(Copy_u8CharAddress,Copy_u8Row,Copy_u8Coulmn);
    2eaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2eae:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2eb0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendDataPos>
}
    2eb4:	6e 96       	adiw	r28, 0x1e	; 30
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <LCD_4BitvoidInit>:




void LCD_4BitvoidInit(void)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	e4 97       	sbiw	r28, 0x34	; 52
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN0,DIO_OUTPUT);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN1,DIO_OUTPUT);
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	61 e0       	ldi	r22, 0x01	; 1
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN2,DIO_OUTPUT);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	62 e0       	ldi	r22, 0x02	; 2
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN3,DIO_OUTPUT);
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	63 e0       	ldi	r22, 0x03	; 3
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_CONTROL_PORT,DIO_PIN0,DIO_OUTPUT);
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,DIO_PIN1,DIO_OUTPUT);
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,DIO_PIN2,DIO_OUTPUT);
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a0 ea       	ldi	r26, 0xA0	; 160
    2f26:	b1 e4       	ldi	r27, 0x41	; 65
    2f28:	89 ab       	std	Y+49, r24	; 0x31
    2f2a:	9a ab       	std	Y+50, r25	; 0x32
    2f2c:	ab ab       	std	Y+51, r26	; 0x33
    2f2e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f30:	69 a9       	ldd	r22, Y+49	; 0x31
    2f32:	7a a9       	ldd	r23, Y+50	; 0x32
    2f34:	8b a9       	ldd	r24, Y+51	; 0x33
    2f36:	9c a9       	ldd	r25, Y+52	; 0x34
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	4a ef       	ldi	r20, 0xFA	; 250
    2f3e:	54 e4       	ldi	r21, 0x44	; 68
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8d a7       	std	Y+45, r24	; 0x2d
    2f4a:	9e a7       	std	Y+46, r25	; 0x2e
    2f4c:	af a7       	std	Y+47, r26	; 0x2f
    2f4e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2f50:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f52:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f56:	98 a9       	ldd	r25, Y+48	; 0x30
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e8       	ldi	r20, 0x80	; 128
    2f5e:	5f e3       	ldi	r21, 0x3F	; 63
    2f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f64:	88 23       	and	r24, r24
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <LCD_4BitvoidInit+0xac>
		__ticks = 1;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	9c a7       	std	Y+44, r25	; 0x2c
    2f6e:	8b a7       	std	Y+43, r24	; 0x2b
    2f70:	3f c0       	rjmp	.+126    	; 0x2ff0 <LCD_4BitvoidInit+0x12a>
	else if (__tmp > 65535)
    2f72:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f74:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f78:	98 a9       	ldd	r25, Y+48	; 0x30
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	3f ef       	ldi	r19, 0xFF	; 255
    2f7e:	4f e7       	ldi	r20, 0x7F	; 127
    2f80:	57 e4       	ldi	r21, 0x47	; 71
    2f82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f86:	18 16       	cp	r1, r24
    2f88:	4c f5       	brge	.+82     	; 0x2fdc <LCD_4BitvoidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f90:	9c a9       	ldd	r25, Y+52	; 0x34
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e2       	ldi	r20, 0x20	; 32
    2f98:	51 e4       	ldi	r21, 0x41	; 65
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9c a7       	std	Y+44, r25	; 0x2c
    2fb0:	8b a7       	std	Y+43, r24	; 0x2b
    2fb2:	0f c0       	rjmp	.+30     	; 0x2fd2 <LCD_4BitvoidInit+0x10c>
    2fb4:	88 ec       	ldi	r24, 0xC8	; 200
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9a a7       	std	Y+42, r25	; 0x2a
    2fba:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2fbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <LCD_4BitvoidInit+0xfa>
    2fc4:	9a a7       	std	Y+42, r25	; 0x2a
    2fc6:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fca:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	9c a7       	std	Y+44, r25	; 0x2c
    2fd0:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	69 f7       	brne	.-38     	; 0x2fb4 <LCD_4BitvoidInit+0xee>
    2fda:	14 c0       	rjmp	.+40     	; 0x3004 <LCD_4BitvoidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fdc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fde:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9c a7       	std	Y+44, r25	; 0x2c
    2fee:	8b a7       	std	Y+43, r24	; 0x2b
    2ff0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff4:	98 a7       	std	Y+40, r25	; 0x28
    2ff6:	8f a3       	std	Y+39, r24	; 0x27
    2ff8:	8f a1       	ldd	r24, Y+39	; 0x27
    2ffa:	98 a5       	ldd	r25, Y+40	; 0x28
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <LCD_4BitvoidInit+0x136>
    3000:	98 a7       	std	Y+40, r25	; 0x28
    3002:	8f a3       	std	Y+39, r24	; 0x27

	 _delay_ms(20);
	 LCD_4Bit_voidSendCommand(LCD_8BIT_FUNC_SET);
    3004:	88 e3       	ldi	r24, 0x38	; 56
    3006:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a0 ea       	ldi	r26, 0xA0	; 160
    3010:	b0 e4       	ldi	r27, 0x40	; 64
    3012:	8b a3       	std	Y+35, r24	; 0x23
    3014:	9c a3       	std	Y+36, r25	; 0x24
    3016:	ad a3       	std	Y+37, r26	; 0x25
    3018:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	6b a1       	ldd	r22, Y+35	; 0x23
    301c:	7c a1       	ldd	r23, Y+36	; 0x24
    301e:	8d a1       	ldd	r24, Y+37	; 0x25
    3020:	9e a1       	ldd	r25, Y+38	; 0x26
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	4a ef       	ldi	r20, 0xFA	; 250
    3028:	54 e4       	ldi	r21, 0x44	; 68
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	8f 8f       	std	Y+31, r24	; 0x1f
    3034:	98 a3       	std	Y+32, r25	; 0x20
    3036:	a9 a3       	std	Y+33, r26	; 0x21
    3038:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    303a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    303c:	78 a1       	ldd	r23, Y+32	; 0x20
    303e:	89 a1       	ldd	r24, Y+33	; 0x21
    3040:	9a a1       	ldd	r25, Y+34	; 0x22
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304e:	88 23       	and	r24, r24
    3050:	2c f4       	brge	.+10     	; 0x305c <LCD_4BitvoidInit+0x196>
		__ticks = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9e 8f       	std	Y+30, r25	; 0x1e
    3058:	8d 8f       	std	Y+29, r24	; 0x1d
    305a:	3f c0       	rjmp	.+126    	; 0x30da <LCD_4BitvoidInit+0x214>
	else if (__tmp > 65535)
    305c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    305e:	78 a1       	ldd	r23, Y+32	; 0x20
    3060:	89 a1       	ldd	r24, Y+33	; 0x21
    3062:	9a a1       	ldd	r25, Y+34	; 0x22
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	4c f5       	brge	.+82     	; 0x30c6 <LCD_4BitvoidInit+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	6b a1       	ldd	r22, Y+35	; 0x23
    3076:	7c a1       	ldd	r23, Y+36	; 0x24
    3078:	8d a1       	ldd	r24, Y+37	; 0x25
    307a:	9e a1       	ldd	r25, Y+38	; 0x26
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	9e 8f       	std	Y+30, r25	; 0x1e
    309a:	8d 8f       	std	Y+29, r24	; 0x1d
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <LCD_4BitvoidInit+0x1f6>
    309e:	88 ec       	ldi	r24, 0xC8	; 200
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9c 8f       	std	Y+28, r25	; 0x1c
    30a4:	8b 8f       	std	Y+27, r24	; 0x1b
    30a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <LCD_4BitvoidInit+0x1e4>
    30ae:	9c 8f       	std	Y+28, r25	; 0x1c
    30b0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	9e 8f       	std	Y+30, r25	; 0x1e
    30ba:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	69 f7       	brne	.-38     	; 0x309e <LCD_4BitvoidInit+0x1d8>
    30c4:	14 c0       	rjmp	.+40     	; 0x30ee <LCD_4BitvoidInit+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    30c8:	78 a1       	ldd	r23, Y+32	; 0x20
    30ca:	89 a1       	ldd	r24, Y+33	; 0x21
    30cc:	9a a1       	ldd	r25, Y+34	; 0x22
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e 8f       	std	Y+30, r25	; 0x1e
    30d8:	8d 8f       	std	Y+29, r24	; 0x1d
    30da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30de:	9a 8f       	std	Y+26, r25	; 0x1a
    30e0:	89 8f       	std	Y+25, r24	; 0x19
    30e2:	89 8d       	ldd	r24, Y+25	; 0x19
    30e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <LCD_4BitvoidInit+0x220>
    30ea:	9a 8f       	std	Y+26, r25	; 0x1a
    30ec:	89 8f       	std	Y+25, r24	; 0x19
	 _delay_ms(5);
	 LCD_4Bit_voidSendCommand(LCD_8BIT_FUNC_SET);
    30ee:	88 e3       	ldi	r24, 0x38	; 56
    30f0:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a6 e1       	ldi	r26, 0x16	; 22
    30fa:	b3 e4       	ldi	r27, 0x43	; 67
    30fc:	8d 8b       	std	Y+21, r24	; 0x15
    30fe:	9e 8b       	std	Y+22, r25	; 0x16
    3100:	af 8b       	std	Y+23, r26	; 0x17
    3102:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3104:	6d 89       	ldd	r22, Y+21	; 0x15
    3106:	7e 89       	ldd	r23, Y+22	; 0x16
    3108:	8f 89       	ldd	r24, Y+23	; 0x17
    310a:	98 8d       	ldd	r25, Y+24	; 0x18
    310c:	2b ea       	ldi	r18, 0xAB	; 171
    310e:	3a ea       	ldi	r19, 0xAA	; 170
    3110:	4a e2       	ldi	r20, 0x2A	; 42
    3112:	50 e4       	ldi	r21, 0x40	; 64
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	89 8b       	std	Y+17, r24	; 0x11
    311e:	9a 8b       	std	Y+18, r25	; 0x12
    3120:	ab 8b       	std	Y+19, r26	; 0x13
    3122:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3124:	69 89       	ldd	r22, Y+17	; 0x11
    3126:	7a 89       	ldd	r23, Y+18	; 0x12
    3128:	8b 89       	ldd	r24, Y+19	; 0x13
    312a:	9c 89       	ldd	r25, Y+20	; 0x14
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3138:	88 23       	and	r24, r24
    313a:	1c f4       	brge	.+6      	; 0x3142 <LCD_4BitvoidInit+0x27c>
		__ticks = 1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	88 8b       	std	Y+16, r24	; 0x10
    3140:	91 c0       	rjmp	.+290    	; 0x3264 <LCD_4BitvoidInit+0x39e>
	else if (__tmp > 255)
    3142:	69 89       	ldd	r22, Y+17	; 0x11
    3144:	7a 89       	ldd	r23, Y+18	; 0x12
    3146:	8b 89       	ldd	r24, Y+19	; 0x13
    3148:	9c 89       	ldd	r25, Y+20	; 0x14
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4f e7       	ldi	r20, 0x7F	; 127
    3150:	53 e4       	ldi	r21, 0x43	; 67
    3152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3156:	18 16       	cp	r1, r24
    3158:	0c f0       	brlt	.+2      	; 0x315c <LCD_4BitvoidInit+0x296>
    315a:	7b c0       	rjmp	.+246    	; 0x3252 <LCD_4BitvoidInit+0x38c>
	{
		_delay_ms(__us / 1000.0);
    315c:	6d 89       	ldd	r22, Y+21	; 0x15
    315e:	7e 89       	ldd	r23, Y+22	; 0x16
    3160:	8f 89       	ldd	r24, Y+23	; 0x17
    3162:	98 8d       	ldd	r25, Y+24	; 0x18
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a e7       	ldi	r20, 0x7A	; 122
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8c 87       	std	Y+12, r24	; 0x0c
    3176:	9d 87       	std	Y+13, r25	; 0x0d
    3178:	ae 87       	std	Y+14, r26	; 0x0e
    317a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317c:	6c 85       	ldd	r22, Y+12	; 0x0c
    317e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3180:	8e 85       	ldd	r24, Y+14	; 0x0e
    3182:	9f 85       	ldd	r25, Y+15	; 0x0f
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a ef       	ldi	r20, 0xFA	; 250
    318a:	54 e4       	ldi	r21, 0x44	; 68
    318c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	88 87       	std	Y+8, r24	; 0x08
    3196:	99 87       	std	Y+9, r25	; 0x09
    3198:	aa 87       	std	Y+10, r26	; 0x0a
    319a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    319c:	68 85       	ldd	r22, Y+8	; 0x08
    319e:	79 85       	ldd	r23, Y+9	; 0x09
    31a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e8       	ldi	r20, 0x80	; 128
    31aa:	5f e3       	ldi	r21, 0x3F	; 63
    31ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b0:	88 23       	and	r24, r24
    31b2:	2c f4       	brge	.+10     	; 0x31be <LCD_4BitvoidInit+0x2f8>
		__ticks = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9f 83       	std	Y+7, r25	; 0x07
    31ba:	8e 83       	std	Y+6, r24	; 0x06
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <LCD_4BitvoidInit+0x376>
	else if (__tmp > 65535)
    31be:	68 85       	ldd	r22, Y+8	; 0x08
    31c0:	79 85       	ldd	r23, Y+9	; 0x09
    31c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	3f ef       	ldi	r19, 0xFF	; 255
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	57 e4       	ldi	r21, 0x47	; 71
    31ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	4c f5       	brge	.+82     	; 0x3228 <LCD_4BitvoidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    31d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    31da:	8e 85       	ldd	r24, Y+14	; 0x0e
    31dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9f 83       	std	Y+7, r25	; 0x07
    31fc:	8e 83       	std	Y+6, r24	; 0x06
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <LCD_4BitvoidInit+0x358>
    3200:	88 ec       	ldi	r24, 0xC8	; 200
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9d 83       	std	Y+5, r25	; 0x05
    3206:	8c 83       	std	Y+4, r24	; 0x04
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <LCD_4BitvoidInit+0x346>
    3210:	9d 83       	std	Y+5, r25	; 0x05
    3212:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8e 81       	ldd	r24, Y+6	; 0x06
    3216:	9f 81       	ldd	r25, Y+7	; 0x07
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	9f 83       	std	Y+7, r25	; 0x07
    321c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8e 81       	ldd	r24, Y+6	; 0x06
    3220:	9f 81       	ldd	r25, Y+7	; 0x07
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <LCD_4BitvoidInit+0x33a>
    3226:	24 c0       	rjmp	.+72     	; 0x3270 <LCD_4BitvoidInit+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	68 85       	ldd	r22, Y+8	; 0x08
    322a:	79 85       	ldd	r23, Y+9	; 0x09
    322c:	8a 85       	ldd	r24, Y+10	; 0x0a
    322e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9f 83       	std	Y+7, r25	; 0x07
    323a:	8e 83       	std	Y+6, r24	; 0x06
    323c:	8e 81       	ldd	r24, Y+6	; 0x06
    323e:	9f 81       	ldd	r25, Y+7	; 0x07
    3240:	9b 83       	std	Y+3, r25	; 0x03
    3242:	8a 83       	std	Y+2, r24	; 0x02
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	9b 81       	ldd	r25, Y+3	; 0x03
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_4BitvoidInit+0x382>
    324c:	9b 83       	std	Y+3, r25	; 0x03
    324e:	8a 83       	std	Y+2, r24	; 0x02
    3250:	0f c0       	rjmp	.+30     	; 0x3270 <LCD_4BitvoidInit+0x3aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3252:	69 89       	ldd	r22, Y+17	; 0x11
    3254:	7a 89       	ldd	r23, Y+18	; 0x12
    3256:	8b 89       	ldd	r24, Y+19	; 0x13
    3258:	9c 89       	ldd	r25, Y+20	; 0x14
    325a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	88 8b       	std	Y+16, r24	; 0x10
    3264:	88 89       	ldd	r24, Y+16	; 0x10
    3266:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	8a 95       	dec	r24
    326c:	f1 f7       	brne	.-4      	; 0x326a <LCD_4BitvoidInit+0x3a4>
    326e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(150);
	 LCD_4Bit_voidSendCommand(LCD_8BIT_FUNC_SET);
    3270:	88 e3       	ldi	r24, 0x38	; 56
    3272:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_CLEAR_DISBLAY);
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_RETURN_HOME);
    327c:	82 e0       	ldi	r24, 0x02	; 2
    327e:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_ENTERY_MODE);
    3282:	86 e0       	ldi	r24, 0x06	; 6
    3284:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_DISBLAY_ON_OFF);
    3288:	8c e0       	ldi	r24, 0x0C	; 12
    328a:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_4BIT_FUNC_SET);
    328e:	88 e2       	ldi	r24, 0x28	; 40
    3290:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(DDRAM_START);
    3294:	80 e8       	ldi	r24, 0x80	; 128
    3296:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>



}
    329a:	e4 96       	adiw	r28, 0x34	; 52
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <LCD_4Bit_voidSendCommand>:



void LCD_4Bit_voidSendCommand(u8 Copy_u8Command)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	0f 92       	push	r0
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>

	LCD_voidSend4Bit(Copy_u8Command>>4);
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	82 95       	swap	r24
    32d0:	8f 70       	andi	r24, 0x0F	; 15
    32d2:	0e 94 42 1b 	call	0x3684	; 0x3684 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    32d6:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_voidSendEnable>
	LCD_voidSend4Bit(Copy_u8Command);
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	0e 94 42 1b 	call	0x3684	; 0x3684 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    32e0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_voidSendEnable>

}
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <LCD_4Bit_voidSendData>:

void LCD_4Bit_voidSendData(u8 Copy_u8Data)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	0f 92       	push	r0
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	61 e0       	ldi	r22, 0x01	; 1
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>

	LCD_voidSend4Bit(Copy_u8Data>>4);
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	82 95       	swap	r24
    3310:	8f 70       	andi	r24, 0x0F	; 15
    3312:	0e 94 42 1b 	call	0x3684	; 0x3684 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    3316:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_voidSendEnable>
	LCD_voidSend4Bit(Copy_u8Data);
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	0e 94 42 1b 	call	0x3684	; 0x3684 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    3320:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_voidSendEnable>

}
    3324:	0f 90       	pop	r0
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	08 95       	ret

0000332c <LCD_4Bit_voidSendDataPos>:

void LCD_4Bit_voidSendDataPos(u8 Copy_u8Data,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    332c:	df 93       	push	r29
    332e:	cf 93       	push	r28
    3330:	00 d0       	rcall	.+0      	; 0x3332 <LCD_4Bit_voidSendDataPos+0x6>
    3332:	0f 92       	push	r0
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	6a 83       	std	Y+2, r22	; 0x02
    333c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_4Bit_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	6b 81       	ldd	r22, Y+3	; 0x03
    3342:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_4Bit_voidSetCursor>
	LCD_4Bit_voidSendData(Copy_u8Data);
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_4Bit_voidSendData>

}
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <LCD_4Bit_voidSendString>:

void LCD_4Bit_voidSendString(u8 *Copy_PAString)
{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	00 d0       	rcall	.+0      	; 0x335e <LCD_4Bit_voidSendString+0x6>
    335e:	0f 92       	push	r0
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	9b 83       	std	Y+3, r25	; 0x03
    3366:	8a 83       	std	Y+2, r24	; 0x02


	for(u8 i=0;Copy_PAString[i];i++)
    3368:	19 82       	std	Y+1, r1	; 0x01
    336a:	0e c0       	rjmp	.+28     	; 0x3388 <LCD_4Bit_voidSendString+0x30>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	fc 01       	movw	r30, r24
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	80 81       	ld	r24, Z
    337e:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_4Bit_voidSendData>

void LCD_4Bit_voidSendString(u8 *Copy_PAString)
{


	for(u8 i=0;Copy_PAString[i];i++)
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	8f 5f       	subi	r24, 0xFF	; 255
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	fc 01       	movw	r30, r24
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	80 81       	ld	r24, Z
    339a:	88 23       	and	r24, r24
    339c:	39 f7       	brne	.-50     	; 0x336c <LCD_4Bit_voidSendString+0x14>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
	}
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <LCD_4Bit_voidSendStringPos>:

void LCD_4Bit_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <LCD_4Bit_voidSendStringPos+0x6>
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <LCD_4Bit_voidSendStringPos+0x8>
    33b2:	0f 92       	push	r0
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
    33b8:	9b 83       	std	Y+3, r25	; 0x03
    33ba:	8a 83       	std	Y+2, r24	; 0x02
    33bc:	6c 83       	std	Y+4, r22	; 0x04
    33be:	4d 83       	std	Y+5, r20	; 0x05
	LCD_4Bit_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    33c0:	8c 81       	ldd	r24, Y+4	; 0x04
    33c2:	6d 81       	ldd	r22, Y+5	; 0x05
    33c4:	0e 94 46 1c 	call	0x388c	; 0x388c <LCD_4Bit_voidSetCursor>

	for(u8 i=0;Copy_PAString[i];i++)
    33c8:	19 82       	std	Y+1, r1	; 0x01
    33ca:	0e c0       	rjmp	.+28     	; 0x33e8 <LCD_4Bit_voidSendStringPos+0x3e>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	9b 81       	ldd	r25, Y+3	; 0x03
    33d6:	fc 01       	movw	r30, r24
    33d8:	e2 0f       	add	r30, r18
    33da:	f3 1f       	adc	r31, r19
    33dc:	80 81       	ld	r24, Z
    33de:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_4Bit_voidSendData>

void LCD_4Bit_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_4Bit_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);

	for(u8 i=0;Copy_PAString[i];i++)
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
    33e4:	8f 5f       	subi	r24, 0xFF	; 255
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	9b 81       	ldd	r25, Y+3	; 0x03
    33f2:	fc 01       	movw	r30, r24
    33f4:	e2 0f       	add	r30, r18
    33f6:	f3 1f       	adc	r31, r19
    33f8:	80 81       	ld	r24, Z
    33fa:	88 23       	and	r24, r24
    33fc:	39 f7       	brne	.-50     	; 0x33cc <LCD_4Bit_voidSendStringPos+0x22>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
	}
}
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <LCD_4Bit_voidSendNumberPos>:


void LCD_4Bit_voidSendNumberPos(u32 Copy_u32number,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	2f 97       	sbiw	r28, 0x0f	; 15
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	9d 87       	std	Y+13, r25	; 0x0d
    3424:	8c 87       	std	Y+12, r24	; 0x0c
    3426:	6e 87       	std	Y+14, r22	; 0x0e
    3428:	4f 87       	std	Y+15, r20	; 0x0f
	u8 num[11] = {0};
    342a:	8b e0       	ldi	r24, 0x0B	; 11
    342c:	fe 01       	movw	r30, r28
    342e:	31 96       	adiw	r30, 0x01	; 1
    3430:	df 01       	movw	r26, r30
    3432:	98 2f       	mov	r25, r24
    3434:	1d 92       	st	X+, r1
    3436:	9a 95       	dec	r25
    3438:	e9 f7       	brne	.-6      	; 0x3434 <LCD_4Bit_voidSendNumberPos+0x26>

	sprintf(num,"%i",Copy_u32number);
    343a:	00 d0       	rcall	.+0      	; 0x343c <LCD_4Bit_voidSendNumberPos+0x2e>
    343c:	00 d0       	rcall	.+0      	; 0x343e <LCD_4Bit_voidSendNumberPos+0x30>
    343e:	00 d0       	rcall	.+0      	; 0x3440 <LCD_4Bit_voidSendNumberPos+0x32>
    3440:	ed b7       	in	r30, 0x3d	; 61
    3442:	fe b7       	in	r31, 0x3e	; 62
    3444:	31 96       	adiw	r30, 0x01	; 1
    3446:	ce 01       	movw	r24, r28
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	80 83       	st	Z, r24
    344e:	80 e6       	ldi	r24, 0x60	; 96
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	93 83       	std	Z+3, r25	; 0x03
    3454:	82 83       	std	Z+2, r24	; 0x02
    3456:	8c 85       	ldd	r24, Y+12	; 0x0c
    3458:	9d 85       	ldd	r25, Y+13	; 0x0d
    345a:	95 83       	std	Z+5, r25	; 0x05
    345c:	84 83       	std	Z+4, r24	; 0x04
    345e:	0e 94 c0 22 	call	0x4580	; 0x4580 <sprintf>
    3462:	ad b7       	in	r26, 0x3d	; 61
    3464:	be b7       	in	r27, 0x3e	; 62
    3466:	16 96       	adiw	r26, 0x06	; 6
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	be bf       	out	0x3e, r27	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	ad bf       	out	0x3d, r26	; 61

	LCD_4Bit_voidSendStringPos(num,Copy_u8Row,Copy_u8Coulmn);
    3472:	ce 01       	movw	r24, r28
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	6e 85       	ldd	r22, Y+14	; 0x0e
    3478:	4f 85       	ldd	r20, Y+15	; 0x0f
    347a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LCD_4Bit_voidSendStringPos>


}
    347e:	2f 96       	adiw	r28, 0x0f	; 15
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <LCD_4Bit_voidDrawCustomeCharPos>:

void LCD_4Bit_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	6e 97       	sbiw	r28, 0x1e	; 30
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	9b 8f       	std	Y+27, r25	; 0x1b
    34a6:	8a 8f       	std	Y+26, r24	; 0x1a
    34a8:	6c 8f       	std	Y+28, r22	; 0x1c
    34aa:	4d 8f       	std	Y+29, r20	; 0x1d
    34ac:	2e 8f       	std	Y+30, r18	; 0x1e
	LCD_4Bit_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
    34ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	08 96       	adiw	r24, 0x08	; 8
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	a8 e4       	ldi	r26, 0x48	; 72
    34cc:	b2 e4       	ldi	r27, 0x42	; 66
    34ce:	8d 8b       	std	Y+21, r24	; 0x15
    34d0:	9e 8b       	std	Y+22, r25	; 0x16
    34d2:	af 8b       	std	Y+23, r26	; 0x17
    34d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	2b ea       	ldi	r18, 0xAB	; 171
    34e0:	3a ea       	ldi	r19, 0xAA	; 170
    34e2:	4a e2       	ldi	r20, 0x2A	; 42
    34e4:	50 e4       	ldi	r21, 0x40	; 64
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	89 8b       	std	Y+17, r24	; 0x11
    34f0:	9a 8b       	std	Y+18, r25	; 0x12
    34f2:	ab 8b       	std	Y+19, r26	; 0x13
    34f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    34f6:	69 89       	ldd	r22, Y+17	; 0x11
    34f8:	7a 89       	ldd	r23, Y+18	; 0x12
    34fa:	8b 89       	ldd	r24, Y+19	; 0x13
    34fc:	9c 89       	ldd	r25, Y+20	; 0x14
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	40 e8       	ldi	r20, 0x80	; 128
    3504:	5f e3       	ldi	r21, 0x3F	; 63
    3506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    350a:	88 23       	and	r24, r24
    350c:	1c f4       	brge	.+6      	; 0x3514 <LCD_4Bit_voidDrawCustomeCharPos+0x84>
		__ticks = 1;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	88 8b       	std	Y+16, r24	; 0x10
    3512:	91 c0       	rjmp	.+290    	; 0x3636 <LCD_4Bit_voidDrawCustomeCharPos+0x1a6>
	else if (__tmp > 255)
    3514:	69 89       	ldd	r22, Y+17	; 0x11
    3516:	7a 89       	ldd	r23, Y+18	; 0x12
    3518:	8b 89       	ldd	r24, Y+19	; 0x13
    351a:	9c 89       	ldd	r25, Y+20	; 0x14
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	53 e4       	ldi	r21, 0x43	; 67
    3524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	0c f0       	brlt	.+2      	; 0x352e <LCD_4Bit_voidDrawCustomeCharPos+0x9e>
    352c:	7b c0       	rjmp	.+246    	; 0x3624 <LCD_4Bit_voidDrawCustomeCharPos+0x194>
	{
		_delay_ms(__us / 1000.0);
    352e:	6d 89       	ldd	r22, Y+21	; 0x15
    3530:	7e 89       	ldd	r23, Y+22	; 0x16
    3532:	8f 89       	ldd	r24, Y+23	; 0x17
    3534:	98 8d       	ldd	r25, Y+24	; 0x18
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	4a e7       	ldi	r20, 0x7A	; 122
    353c:	54 e4       	ldi	r21, 0x44	; 68
    353e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	8c 87       	std	Y+12, r24	; 0x0c
    3548:	9d 87       	std	Y+13, r25	; 0x0d
    354a:	ae 87       	std	Y+14, r26	; 0x0e
    354c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3550:	7d 85       	ldd	r23, Y+13	; 0x0d
    3552:	8e 85       	ldd	r24, Y+14	; 0x0e
    3554:	9f 85       	ldd	r25, Y+15	; 0x0f
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	4a ef       	ldi	r20, 0xFA	; 250
    355c:	54 e4       	ldi	r21, 0x44	; 68
    355e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	88 87       	std	Y+8, r24	; 0x08
    3568:	99 87       	std	Y+9, r25	; 0x09
    356a:	aa 87       	std	Y+10, r26	; 0x0a
    356c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    356e:	68 85       	ldd	r22, Y+8	; 0x08
    3570:	79 85       	ldd	r23, Y+9	; 0x09
    3572:	8a 85       	ldd	r24, Y+10	; 0x0a
    3574:	9b 85       	ldd	r25, Y+11	; 0x0b
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e8       	ldi	r20, 0x80	; 128
    357c:	5f e3       	ldi	r21, 0x3F	; 63
    357e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3582:	88 23       	and	r24, r24
    3584:	2c f4       	brge	.+10     	; 0x3590 <LCD_4Bit_voidDrawCustomeCharPos+0x100>
		__ticks = 1;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	9f 83       	std	Y+7, r25	; 0x07
    358c:	8e 83       	std	Y+6, r24	; 0x06
    358e:	3f c0       	rjmp	.+126    	; 0x360e <LCD_4Bit_voidDrawCustomeCharPos+0x17e>
	else if (__tmp > 65535)
    3590:	68 85       	ldd	r22, Y+8	; 0x08
    3592:	79 85       	ldd	r23, Y+9	; 0x09
    3594:	8a 85       	ldd	r24, Y+10	; 0x0a
    3596:	9b 85       	ldd	r25, Y+11	; 0x0b
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	3f ef       	ldi	r19, 0xFF	; 255
    359c:	4f e7       	ldi	r20, 0x7F	; 127
    359e:	57 e4       	ldi	r21, 0x47	; 71
    35a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35a4:	18 16       	cp	r1, r24
    35a6:	4c f5       	brge	.+82     	; 0x35fa <LCD_4Bit_voidDrawCustomeCharPos+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    35aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    35ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    35ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e2       	ldi	r20, 0x20	; 32
    35b6:	51 e4       	ldi	r21, 0x41	; 65
    35b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	bc 01       	movw	r22, r24
    35c2:	cd 01       	movw	r24, r26
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	9f 83       	std	Y+7, r25	; 0x07
    35ce:	8e 83       	std	Y+6, r24	; 0x06
    35d0:	0f c0       	rjmp	.+30     	; 0x35f0 <LCD_4Bit_voidDrawCustomeCharPos+0x160>
    35d2:	88 ec       	ldi	r24, 0xC8	; 200
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	9d 83       	std	Y+5, r25	; 0x05
    35d8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35da:	8c 81       	ldd	r24, Y+4	; 0x04
    35dc:	9d 81       	ldd	r25, Y+5	; 0x05
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <LCD_4Bit_voidDrawCustomeCharPos+0x14e>
    35e2:	9d 83       	std	Y+5, r25	; 0x05
    35e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e6:	8e 81       	ldd	r24, Y+6	; 0x06
    35e8:	9f 81       	ldd	r25, Y+7	; 0x07
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	9f 83       	std	Y+7, r25	; 0x07
    35ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f0:	8e 81       	ldd	r24, Y+6	; 0x06
    35f2:	9f 81       	ldd	r25, Y+7	; 0x07
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	69 f7       	brne	.-38     	; 0x35d2 <LCD_4Bit_voidDrawCustomeCharPos+0x142>
    35f8:	24 c0       	rjmp	.+72     	; 0x3642 <LCD_4Bit_voidDrawCustomeCharPos+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fa:	68 85       	ldd	r22, Y+8	; 0x08
    35fc:	79 85       	ldd	r23, Y+9	; 0x09
    35fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3600:	9b 85       	ldd	r25, Y+11	; 0x0b
    3602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	9f 83       	std	Y+7, r25	; 0x07
    360c:	8e 83       	std	Y+6, r24	; 0x06
    360e:	8e 81       	ldd	r24, Y+6	; 0x06
    3610:	9f 81       	ldd	r25, Y+7	; 0x07
    3612:	9b 83       	std	Y+3, r25	; 0x03
    3614:	8a 83       	std	Y+2, r24	; 0x02
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	f1 f7       	brne	.-4      	; 0x361a <LCD_4Bit_voidDrawCustomeCharPos+0x18a>
    361e:	9b 83       	std	Y+3, r25	; 0x03
    3620:	8a 83       	std	Y+2, r24	; 0x02
    3622:	0f c0       	rjmp	.+30     	; 0x3642 <LCD_4Bit_voidDrawCustomeCharPos+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3624:	69 89       	ldd	r22, Y+17	; 0x11
    3626:	7a 89       	ldd	r23, Y+18	; 0x12
    3628:	8b 89       	ldd	r24, Y+19	; 0x13
    362a:	9c 89       	ldd	r25, Y+20	; 0x14
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	88 8b       	std	Y+16, r24	; 0x10
    3636:	88 89       	ldd	r24, Y+16	; 0x10
    3638:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	8a 95       	dec	r24
    363e:	f1 f7       	brne	.-4      	; 0x363c <LCD_4Bit_voidDrawCustomeCharPos+0x1ac>
    3640:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    3642:	19 8e       	std	Y+25, r1	; 0x19
    3644:	0e c0       	rjmp	.+28     	; 0x3662 <LCD_4Bit_voidDrawCustomeCharPos+0x1d2>
	{
		LCD_4Bit_voidSendData(Copy_u8PAChar[i]);
    3646:	89 8d       	ldd	r24, Y+25	; 0x19
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    364e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3650:	fc 01       	movw	r30, r24
    3652:	e2 0f       	add	r30, r18
    3654:	f3 1f       	adc	r31, r19
    3656:	80 81       	ld	r24, Z
    3658:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_4Bit_voidSendData>
void LCD_4Bit_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_4Bit_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    365c:	89 8d       	ldd	r24, Y+25	; 0x19
    365e:	8f 5f       	subi	r24, 0xFF	; 255
    3660:	89 8f       	std	Y+25, r24	; 0x19
    3662:	89 8d       	ldd	r24, Y+25	; 0x19
    3664:	88 30       	cpi	r24, 0x08	; 8
    3666:	78 f3       	brcs	.-34     	; 0x3646 <LCD_4Bit_voidDrawCustomeCharPos+0x1b6>
	{
		LCD_4Bit_voidSendData(Copy_u8PAChar[i]);
	}
	LCD_4Bit_voidSendDataPos(Copy_u8CharAddress,Copy_u8Row,Copy_u8Coulmn);
    3668:	8c 8d       	ldd	r24, Y+28	; 0x1c
    366a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    366c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    366e:	0e 94 96 19 	call	0x332c	; 0x332c <LCD_4Bit_voidSendDataPos>
}
    3672:	6e 96       	adiw	r28, 0x1e	; 30
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	cf 91       	pop	r28
    3680:	df 91       	pop	r29
    3682:	08 95       	ret

00003684 <LCD_voidSend4Bit>:

static void LCD_voidSend4Bit(u8 Copy_u8CommandData)
{
    3684:	df 93       	push	r29
    3686:	cf 93       	push	r28
    3688:	0f 92       	push	r0
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN0,(Copy_u8CommandData>>0)&(u8)0x01);
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	98 2f       	mov	r25, r24
    3694:	91 70       	andi	r25, 0x01	; 1
    3696:	82 e0       	ldi	r24, 0x02	; 2
    3698:	60 e0       	ldi	r22, 0x00	; 0
    369a:	49 2f       	mov	r20, r25
    369c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN1,(Copy_u8CommandData>>1)&(u8)0x01);
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	86 95       	lsr	r24
    36a4:	98 2f       	mov	r25, r24
    36a6:	91 70       	andi	r25, 0x01	; 1
    36a8:	82 e0       	ldi	r24, 0x02	; 2
    36aa:	61 e0       	ldi	r22, 0x01	; 1
    36ac:	49 2f       	mov	r20, r25
    36ae:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN2,(Copy_u8CommandData>>2)&(u8)0x01);
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	86 95       	lsr	r24
    36b6:	86 95       	lsr	r24
    36b8:	98 2f       	mov	r25, r24
    36ba:	91 70       	andi	r25, 0x01	; 1
    36bc:	82 e0       	ldi	r24, 0x02	; 2
    36be:	62 e0       	ldi	r22, 0x02	; 2
    36c0:	49 2f       	mov	r20, r25
    36c2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN3,(Copy_u8CommandData>>3)&(u8)0x01);
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	86 95       	lsr	r24
    36ca:	86 95       	lsr	r24
    36cc:	86 95       	lsr	r24
    36ce:	98 2f       	mov	r25, r24
    36d0:	91 70       	andi	r25, 0x01	; 1
    36d2:	82 e0       	ldi	r24, 0x02	; 2
    36d4:	63 e0       	ldi	r22, 0x03	; 3
    36d6:	49 2f       	mov	r20, r25
    36d8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
}
    36dc:	0f 90       	pop	r0
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <LCD_voidSendEnable>:

static void LCD_voidSendEnable(void)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	2e 97       	sbiw	r28, 0x0e	; 14
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_HIGH);
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	62 e0       	ldi	r22, 0x02	; 2
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a0 e8       	ldi	r26, 0x80	; 128
    3708:	bf e3       	ldi	r27, 0x3F	; 63
    370a:	8b 87       	std	Y+11, r24	; 0x0b
    370c:	9c 87       	std	Y+12, r25	; 0x0c
    370e:	ad 87       	std	Y+13, r26	; 0x0d
    3710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	6b 85       	ldd	r22, Y+11	; 0x0b
    3714:	7c 85       	ldd	r23, Y+12	; 0x0c
    3716:	8d 85       	ldd	r24, Y+13	; 0x0d
    3718:	9e 85       	ldd	r25, Y+14	; 0x0e
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	4a ef       	ldi	r20, 0xFA	; 250
    3720:	54 e4       	ldi	r21, 0x44	; 68
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	8f 83       	std	Y+7, r24	; 0x07
    372c:	98 87       	std	Y+8, r25	; 0x08
    372e:	a9 87       	std	Y+9, r26	; 0x09
    3730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3746:	88 23       	and	r24, r24
    3748:	2c f4       	brge	.+10     	; 0x3754 <LCD_voidSendEnable+0x70>
		__ticks = 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	9e 83       	std	Y+6, r25	; 0x06
    3750:	8d 83       	std	Y+5, r24	; 0x05
    3752:	3f c0       	rjmp	.+126    	; 0x37d2 <LCD_voidSendEnable+0xee>
	else if (__tmp > 65535)
    3754:	6f 81       	ldd	r22, Y+7	; 0x07
    3756:	78 85       	ldd	r23, Y+8	; 0x08
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	9a 85       	ldd	r25, Y+10	; 0x0a
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	3f ef       	ldi	r19, 0xFF	; 255
    3760:	4f e7       	ldi	r20, 0x7F	; 127
    3762:	57 e4       	ldi	r21, 0x47	; 71
    3764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3768:	18 16       	cp	r1, r24
    376a:	4c f5       	brge	.+82     	; 0x37be <LCD_voidSendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376c:	6b 85       	ldd	r22, Y+11	; 0x0b
    376e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3770:	8d 85       	ldd	r24, Y+13	; 0x0d
    3772:	9e 85       	ldd	r25, Y+14	; 0x0e
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e2       	ldi	r20, 0x20	; 32
    377a:	51 e4       	ldi	r21, 0x41	; 65
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9e 83       	std	Y+6, r25	; 0x06
    3792:	8d 83       	std	Y+5, r24	; 0x05
    3794:	0f c0       	rjmp	.+30     	; 0x37b4 <LCD_voidSendEnable+0xd0>
    3796:	88 ec       	ldi	r24, 0xC8	; 200
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	9c 83       	std	Y+4, r25	; 0x04
    379c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	9c 81       	ldd	r25, Y+4	; 0x04
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <LCD_voidSendEnable+0xbe>
    37a6:	9c 83       	std	Y+4, r25	; 0x04
    37a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37aa:	8d 81       	ldd	r24, Y+5	; 0x05
    37ac:	9e 81       	ldd	r25, Y+6	; 0x06
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b4:	8d 81       	ldd	r24, Y+5	; 0x05
    37b6:	9e 81       	ldd	r25, Y+6	; 0x06
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	69 f7       	brne	.-38     	; 0x3796 <LCD_voidSendEnable+0xb2>
    37bc:	14 c0       	rjmp	.+40     	; 0x37e6 <LCD_voidSendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37be:	6f 81       	ldd	r22, Y+7	; 0x07
    37c0:	78 85       	ldd	r23, Y+8	; 0x08
    37c2:	89 85       	ldd	r24, Y+9	; 0x09
    37c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	9a 83       	std	Y+2, r25	; 0x02
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	9a 81       	ldd	r25, Y+2	; 0x02
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <LCD_voidSendEnable+0xfa>
    37e2:	9a 83       	std	Y+2, r25	; 0x02
    37e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_LOW);
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>

}
    37f0:	2e 96       	adiw	r28, 0x0e	; 14
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <LCD_voidSetCursor>:

static void LCD_voidSetCursor(u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	00 d0       	rcall	.+0      	; 0x3808 <LCD_voidSetCursor+0x6>
    3808:	00 d0       	rcall	.+0      	; 0x380a <LCD_voidSetCursor+0x8>
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	89 83       	std	Y+1, r24	; 0x01
    3810:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8Coulmn--;
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	81 50       	subi	r24, 0x01	; 1
    3816:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8Row)
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	28 2f       	mov	r18, r24
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	3c 83       	std	Y+4, r19	; 0x04
    3820:	2b 83       	std	Y+3, r18	; 0x03
    3822:	8b 81       	ldd	r24, Y+3	; 0x03
    3824:	9c 81       	ldd	r25, Y+4	; 0x04
    3826:	82 30       	cpi	r24, 0x02	; 2
    3828:	91 05       	cpc	r25, r1
    382a:	d9 f0       	breq	.+54     	; 0x3862 <LCD_voidSetCursor+0x60>
    382c:	2b 81       	ldd	r18, Y+3	; 0x03
    382e:	3c 81       	ldd	r19, Y+4	; 0x04
    3830:	23 30       	cpi	r18, 0x03	; 3
    3832:	31 05       	cpc	r19, r1
    3834:	34 f4       	brge	.+12     	; 0x3842 <LCD_voidSetCursor+0x40>
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	9c 81       	ldd	r25, Y+4	; 0x04
    383a:	81 30       	cpi	r24, 0x01	; 1
    383c:	91 05       	cpc	r25, r1
    383e:	61 f0       	breq	.+24     	; 0x3858 <LCD_voidSetCursor+0x56>
    3840:	1e c0       	rjmp	.+60     	; 0x387e <LCD_voidSetCursor+0x7c>
    3842:	2b 81       	ldd	r18, Y+3	; 0x03
    3844:	3c 81       	ldd	r19, Y+4	; 0x04
    3846:	23 30       	cpi	r18, 0x03	; 3
    3848:	31 05       	cpc	r19, r1
    384a:	81 f0       	breq	.+32     	; 0x386c <LCD_voidSetCursor+0x6a>
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	9c 81       	ldd	r25, Y+4	; 0x04
    3850:	84 30       	cpi	r24, 0x04	; 4
    3852:	91 05       	cpc	r25, r1
    3854:	81 f0       	breq	.+32     	; 0x3876 <LCD_voidSetCursor+0x74>
    3856:	13 c0       	rjmp	.+38     	; 0x387e <LCD_voidSetCursor+0x7c>
	{

		case ROW1:

			LCD_voidSendCommand(0x80+Copy_u8Coulmn);
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	80 58       	subi	r24, 0x80	; 128
    385c:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    3860:	0e c0       	rjmp	.+28     	; 0x387e <LCD_voidSetCursor+0x7c>

		break;
		case ROW2:

			LCD_voidSendCommand(0xC0+Copy_u8Coulmn);
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
    3864:	80 54       	subi	r24, 0x40	; 64
    3866:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    386a:	09 c0       	rjmp	.+18     	; 0x387e <LCD_voidSetCursor+0x7c>
		break;
		case ROW3:

			LCD_voidSendCommand(0x94+Copy_u8Coulmn);
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	8c 56       	subi	r24, 0x6C	; 108
    3870:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
    3874:	04 c0       	rjmp	.+8      	; 0x387e <LCD_voidSetCursor+0x7c>

		break;
		case ROW4:

			LCD_voidSendCommand(0xD4+Copy_u8Coulmn);
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	8c 52       	subi	r24, 0x2C	; 44
    387a:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
		break;
	}
}
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <LCD_4Bit_voidSetCursor>:

static void LCD_4Bit_voidSetCursor(u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	00 d0       	rcall	.+0      	; 0x3892 <LCD_4Bit_voidSetCursor+0x6>
    3892:	00 d0       	rcall	.+0      	; 0x3894 <LCD_4Bit_voidSetCursor+0x8>
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	89 83       	std	Y+1, r24	; 0x01
    389a:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8Coulmn--;
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	81 50       	subi	r24, 0x01	; 1
    38a0:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8Row)
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	28 2f       	mov	r18, r24
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	3c 83       	std	Y+4, r19	; 0x04
    38aa:	2b 83       	std	Y+3, r18	; 0x03
    38ac:	8b 81       	ldd	r24, Y+3	; 0x03
    38ae:	9c 81       	ldd	r25, Y+4	; 0x04
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	91 05       	cpc	r25, r1
    38b4:	31 f0       	breq	.+12     	; 0x38c2 <LCD_4Bit_voidSetCursor+0x36>
    38b6:	2b 81       	ldd	r18, Y+3	; 0x03
    38b8:	3c 81       	ldd	r19, Y+4	; 0x04
    38ba:	22 30       	cpi	r18, 0x02	; 2
    38bc:	31 05       	cpc	r19, r1
    38be:	31 f0       	breq	.+12     	; 0x38cc <LCD_4Bit_voidSetCursor+0x40>
    38c0:	09 c0       	rjmp	.+18     	; 0x38d4 <LCD_4Bit_voidSetCursor+0x48>
	{

		case ROW1:

			LCD_4Bit_voidSendCommand(0x80+Copy_u8Coulmn);
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	80 58       	subi	r24, 0x80	; 128
    38c6:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
    38ca:	04 c0       	rjmp	.+8      	; 0x38d4 <LCD_4Bit_voidSetCursor+0x48>

		break;
		case ROW2:

			LCD_4Bit_voidSendCommand(0xC0+Copy_u8Coulmn);
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	80 54       	subi	r24, 0x40	; 64
    38d0:	0e 94 56 19 	call	0x32ac	; 0x32ac <LCD_4Bit_voidSendCommand>
		break;
	}
}
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <KPD_voidInit>:

static u8 KPD_Au8RowPins[ROWS] = {KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};
static u8 KPD_Au8COULMNSPins[COULMNS] = {KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

void KPD_voidInit(void)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(KPD_PORT,KPD_CONTROL);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	6f e0       	ldi	r22, 0x0F	; 15
    38ee:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <DIO_voidSetPortDirection>
	DIO_voidSetPortvalue(KPD_PORT,0xFF);
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	6f ef       	ldi	r22, 0xFF	; 255
    38f6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <DIO_voidSetPortvalue>
}
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <KPD_u8GetPressKey>:
	
	
u8 KPD_u8GetPressKey(void)
{
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	63 97       	sbiw	r28, 0x13	; 19
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
	u8 l_u8RowCounter =0;
    3914:	1b 8a       	std	Y+19, r1	; 0x13
	u8 l_u8CoulmnCounter =0;
    3916:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_u8PressedKey =0;
    3918:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_u8Flag=0;
    391a:	18 8a       	std	Y+16, r1	; 0x10
	u8 l_u8ReturnedValue=KPD_CHECK_KEY;
    391c:	8f ef       	ldi	r24, 0xFF	; 255
    391e:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_u8RowCounter=0;l_u8RowCounter<ROWS;l_u8RowCounter++)
    3920:	1b 8a       	std	Y+19, r1	; 0x13
    3922:	db c0       	rjmp	.+438    	; 0x3ada <KPD_u8GetPressKey+0x1da>
	{
		DIO_voidSetPinvalue(KPD_PORT,KPD_Au8RowPins[l_u8RowCounter],DIO_LOW);
    3924:	8b 89       	ldd	r24, Y+19	; 0x13
    3926:	88 2f       	mov	r24, r24
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	fc 01       	movw	r30, r24
    392c:	e0 55       	subi	r30, 0x50	; 80
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	90 81       	ld	r25, Z
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	69 2f       	mov	r22, r25
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
		for(l_u8CoulmnCounter=0;l_u8CoulmnCounter<COULMNS;l_u8CoulmnCounter++)
    393c:	1a 8a       	std	Y+18, r1	; 0x12
    393e:	a4 c0       	rjmp	.+328    	; 0x3a88 <KPD_u8GetPressKey+0x188>
		{
			l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
    3940:	8a 89       	ldd	r24, Y+18	; 0x12
    3942:	88 2f       	mov	r24, r24
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	fc 01       	movw	r30, r24
    3948:	ec 54       	subi	r30, 0x4C	; 76
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	90 81       	ld	r25, Z
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	69 2f       	mov	r22, r25
    3952:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8GetPinValue>
    3956:	89 8b       	std	Y+17, r24	; 0x11
			if(l_u8PressedKey == DIO_LOW)
    3958:	89 89       	ldd	r24, Y+17	; 0x11
    395a:	88 23       	and	r24, r24
    395c:	09 f0       	breq	.+2      	; 0x3960 <KPD_u8GetPressKey+0x60>
    395e:	91 c0       	rjmp	.+290    	; 0x3a82 <KPD_u8GetPressKey+0x182>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	a0 ea       	ldi	r26, 0xA0	; 160
    3966:	b1 e4       	ldi	r27, 0x41	; 65
    3968:	8b 87       	std	Y+11, r24	; 0x0b
    396a:	9c 87       	std	Y+12, r25	; 0x0c
    396c:	ad 87       	std	Y+13, r26	; 0x0d
    396e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3970:	6b 85       	ldd	r22, Y+11	; 0x0b
    3972:	7c 85       	ldd	r23, Y+12	; 0x0c
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9e 85       	ldd	r25, Y+14	; 0x0e
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	4a ef       	ldi	r20, 0xFA	; 250
    397e:	54 e4       	ldi	r21, 0x44	; 68
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	8f 83       	std	Y+7, r24	; 0x07
    398a:	98 87       	std	Y+8, r25	; 0x08
    398c:	a9 87       	std	Y+9, r26	; 0x09
    398e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3990:	6f 81       	ldd	r22, Y+7	; 0x07
    3992:	78 85       	ldd	r23, Y+8	; 0x08
    3994:	89 85       	ldd	r24, Y+9	; 0x09
    3996:	9a 85       	ldd	r25, Y+10	; 0x0a
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	2c f4       	brge	.+10     	; 0x39b2 <KPD_u8GetPressKey+0xb2>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
    39b0:	3f c0       	rjmp	.+126    	; 0x3a30 <KPD_u8GetPressKey+0x130>
	else if (__tmp > 65535)
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	3f ef       	ldi	r19, 0xFF	; 255
    39be:	4f e7       	ldi	r20, 0x7F	; 127
    39c0:	57 e4       	ldi	r21, 0x47	; 71
    39c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c6:	18 16       	cp	r1, r24
    39c8:	4c f5       	brge	.+82     	; 0x3a1c <KPD_u8GetPressKey+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    39cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <KPD_u8GetPressKey+0x112>
    39f4:	88 ec       	ldi	r24, 0xC8	; 200
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9c 83       	std	Y+4, r25	; 0x04
    39fa:	8b 83       	std	Y+3, r24	; 0x03
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <KPD_u8GetPressKey+0x100>
    3a04:	9c 83       	std	Y+4, r25	; 0x04
    3a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	9e 83       	std	Y+6, r25	; 0x06
    3a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	69 f7       	brne	.-38     	; 0x39f4 <KPD_u8GetPressKey+0xf4>
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <KPD_u8GetPressKey+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1e:	78 85       	ldd	r23, Y+8	; 0x08
    3a20:	89 85       	ldd	r24, Y+9	; 0x09
    3a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <KPD_u8GetPressKey+0x13c>
    3a40:	9a 83       	std	Y+2, r25	; 0x02
    3a42:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
    3a44:	8a 89       	ldd	r24, Y+18	; 0x12
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	ec 54       	subi	r30, 0x4C	; 76
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	90 81       	ld	r25, Z
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	69 2f       	mov	r22, r25
    3a56:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8GetPinValue>
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
    3a5c:	0c c0       	rjmp	.+24     	; 0x3a76 <KPD_u8GetPressKey+0x176>
				while(l_u8PressedKey == DIO_LOW )
				{
					l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
    3a5e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a60:	88 2f       	mov	r24, r24
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	fc 01       	movw	r30, r24
    3a66:	ec 54       	subi	r30, 0x4C	; 76
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	90 81       	ld	r25, Z
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	69 2f       	mov	r22, r25
    3a70:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8GetPinValue>
    3a74:	89 8b       	std	Y+17, r24	; 0x11
			l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
			if(l_u8PressedKey == DIO_LOW)
			{
				_delay_ms(20);
				l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
				while(l_u8PressedKey == DIO_LOW )
    3a76:	89 89       	ldd	r24, Y+17	; 0x11
    3a78:	88 23       	and	r24, r24
    3a7a:	89 f3       	breq	.-30     	; 0x3a5e <KPD_u8GetPressKey+0x15e>
				{
					l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
				}
				l_u8Flag = 1;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	88 8b       	std	Y+16, r24	; 0x10
    3a80:	07 c0       	rjmp	.+14     	; 0x3a90 <KPD_u8GetPressKey+0x190>
	u8 l_u8Flag=0;
	u8 l_u8ReturnedValue=KPD_CHECK_KEY;
	for(l_u8RowCounter=0;l_u8RowCounter<ROWS;l_u8RowCounter++)
	{
		DIO_voidSetPinvalue(KPD_PORT,KPD_Au8RowPins[l_u8RowCounter],DIO_LOW);
		for(l_u8CoulmnCounter=0;l_u8CoulmnCounter<COULMNS;l_u8CoulmnCounter++)
    3a82:	8a 89       	ldd	r24, Y+18	; 0x12
    3a84:	8f 5f       	subi	r24, 0xFF	; 255
    3a86:	8a 8b       	std	Y+18, r24	; 0x12
    3a88:	8a 89       	ldd	r24, Y+18	; 0x12
    3a8a:	83 30       	cpi	r24, 0x03	; 3
    3a8c:	08 f4       	brcc	.+2      	; 0x3a90 <KPD_u8GetPressKey+0x190>
    3a8e:	58 cf       	rjmp	.-336    	; 0x3940 <KPD_u8GetPressKey+0x40>
				}
				l_u8Flag = 1;
				break;
			}
		}
		DIO_voidSetPinvalue(KPD_PORT,KPD_Au8RowPins[l_u8RowCounter],DIO_HIGH);
    3a90:	8b 89       	ldd	r24, Y+19	; 0x13
    3a92:	88 2f       	mov	r24, r24
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	fc 01       	movw	r30, r24
    3a98:	e0 55       	subi	r30, 0x50	; 80
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	90 81       	ld	r25, Z
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	69 2f       	mov	r22, r25
    3aa2:	41 e0       	ldi	r20, 0x01	; 1
    3aa4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
		if(l_u8Flag==1)
    3aa8:	88 89       	ldd	r24, Y+16	; 0x10
    3aaa:	81 30       	cpi	r24, 0x01	; 1
    3aac:	99 f4       	brne	.+38     	; 0x3ad4 <KPD_u8GetPressKey+0x1d4>
		{
			l_u8ReturnedValue =  KPD_Au8Keys[l_u8RowCounter][l_u8CoulmnCounter];
    3aae:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab0:	28 2f       	mov	r18, r24
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ab6:	48 2f       	mov	r20, r24
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	c9 01       	movw	r24, r18
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	82 0f       	add	r24, r18
    3ac2:	93 1f       	adc	r25, r19
    3ac4:	84 0f       	add	r24, r20
    3ac6:	95 1f       	adc	r25, r21
    3ac8:	fc 01       	movw	r30, r24
    3aca:	ec 55       	subi	r30, 0x5C	; 92
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	8f 87       	std	Y+15, r24	; 0x0f
    3ad2:	07 c0       	rjmp	.+14     	; 0x3ae2 <KPD_u8GetPressKey+0x1e2>
	u8 l_u8RowCounter =0;
	u8 l_u8CoulmnCounter =0;
	u8 l_u8PressedKey =0;
	u8 l_u8Flag=0;
	u8 l_u8ReturnedValue=KPD_CHECK_KEY;
	for(l_u8RowCounter=0;l_u8RowCounter<ROWS;l_u8RowCounter++)
    3ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad6:	8f 5f       	subi	r24, 0xFF	; 255
    3ad8:	8b 8b       	std	Y+19, r24	; 0x13
    3ada:	8b 89       	ldd	r24, Y+19	; 0x13
    3adc:	84 30       	cpi	r24, 0x04	; 4
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <KPD_u8GetPressKey+0x1e2>
    3ae0:	21 cf       	rjmp	.-446    	; 0x3924 <KPD_u8GetPressKey+0x24>
		}
	}
	


	return l_u8ReturnedValue;
    3ae2:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    3ae4:	63 96       	adiw	r28, 0x13	; 19
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	08 95       	ret

00003af6 <EEPROM_voidWriteData>:
#include "EEPROM.h"
#include "../../MCAL/I2C/I2C.h"
#include <util/delay.h>

 void EEPROM_voidWriteData(u8 Copy_u8Data,u16 Copy_u16Address)
 {
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
    3afe:	61 97       	sbiw	r28, 0x11	; 17
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	8f 87       	std	Y+15, r24	; 0x0f
    3b0c:	79 8b       	std	Y+17, r23	; 0x11
    3b0e:	68 8b       	std	Y+16, r22	; 0x10
	 I2C_voidStartCondition();
    3b10:	0e 94 df 0b 	call	0x17be	; 0x17be <I2C_voidStartCondition>
	 I2C_voidMasterSendAddressWrite((0x50)| (A2_PIN <<2) | (Copy_u16Address>>8));
    3b14:	88 89       	ldd	r24, Y+16	; 0x10
    3b16:	99 89       	ldd	r25, Y+17	; 0x11
    3b18:	89 2f       	mov	r24, r25
    3b1a:	99 27       	eor	r25, r25
    3b1c:	80 65       	ori	r24, 0x50	; 80
    3b1e:	0e 94 0e 0c 	call	0x181c	; 0x181c <I2C_voidMasterSendAddressWrite>
	 I2C_voidMasterSendData(((u8)Copy_u16Address));
    3b22:	88 89       	ldd	r24, Y+16	; 0x10
    3b24:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <I2C_voidMasterSendData>
	 I2C_voidMasterSendData(Copy_u8Data);
    3b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b2a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <I2C_voidMasterSendData>
	 I2C_voidStopCondition();
    3b2e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <I2C_voidStopCondition>
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	a0 e2       	ldi	r26, 0x20	; 32
    3b38:	b1 e4       	ldi	r27, 0x41	; 65
    3b3a:	8b 87       	std	Y+11, r24	; 0x0b
    3b3c:	9c 87       	std	Y+12, r25	; 0x0c
    3b3e:	ad 87       	std	Y+13, r26	; 0x0d
    3b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	4a ef       	ldi	r20, 0xFA	; 250
    3b50:	54 e4       	ldi	r21, 0x44	; 68
    3b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	8f 83       	std	Y+7, r24	; 0x07
    3b5c:	98 87       	std	Y+8, r25	; 0x08
    3b5e:	a9 87       	std	Y+9, r26	; 0x09
    3b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b62:	6f 81       	ldd	r22, Y+7	; 0x07
    3b64:	78 85       	ldd	r23, Y+8	; 0x08
    3b66:	89 85       	ldd	r24, Y+9	; 0x09
    3b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e8       	ldi	r20, 0x80	; 128
    3b70:	5f e3       	ldi	r21, 0x3F	; 63
    3b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b76:	88 23       	and	r24, r24
    3b78:	2c f4       	brge	.+10     	; 0x3b84 <EEPROM_voidWriteData+0x8e>
		__ticks = 1;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	9e 83       	std	Y+6, r25	; 0x06
    3b80:	8d 83       	std	Y+5, r24	; 0x05
    3b82:	3f c0       	rjmp	.+126    	; 0x3c02 <EEPROM_voidWriteData+0x10c>
	else if (__tmp > 65535)
    3b84:	6f 81       	ldd	r22, Y+7	; 0x07
    3b86:	78 85       	ldd	r23, Y+8	; 0x08
    3b88:	89 85       	ldd	r24, Y+9	; 0x09
    3b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	3f ef       	ldi	r19, 0xFF	; 255
    3b90:	4f e7       	ldi	r20, 0x7F	; 127
    3b92:	57 e4       	ldi	r21, 0x47	; 71
    3b94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b98:	18 16       	cp	r1, r24
    3b9a:	4c f5       	brge	.+82     	; 0x3bee <EEPROM_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e2       	ldi	r20, 0x20	; 32
    3baa:	51 e4       	ldi	r21, 0x41	; 65
    3bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
    3bc4:	0f c0       	rjmp	.+30     	; 0x3be4 <EEPROM_voidWriteData+0xee>
    3bc6:	88 ec       	ldi	r24, 0xC8	; 200
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	9c 83       	std	Y+4, r25	; 0x04
    3bcc:	8b 83       	std	Y+3, r24	; 0x03
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	f1 f7       	brne	.-4      	; 0x3bd2 <EEPROM_voidWriteData+0xdc>
    3bd6:	9c 83       	std	Y+4, r25	; 0x04
    3bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bda:	8d 81       	ldd	r24, Y+5	; 0x05
    3bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	9e 83       	std	Y+6, r25	; 0x06
    3be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be4:	8d 81       	ldd	r24, Y+5	; 0x05
    3be6:	9e 81       	ldd	r25, Y+6	; 0x06
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	69 f7       	brne	.-38     	; 0x3bc6 <EEPROM_voidWriteData+0xd0>
    3bec:	14 c0       	rjmp	.+40     	; 0x3c16 <EEPROM_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bee:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf0:	78 85       	ldd	r23, Y+8	; 0x08
    3bf2:	89 85       	ldd	r24, Y+9	; 0x09
    3bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	f1 f7       	brne	.-4      	; 0x3c0e <EEPROM_voidWriteData+0x118>
    3c12:	9a 83       	std	Y+2, r25	; 0x02
    3c14:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10);
 }
    3c16:	61 96       	adiw	r28, 0x11	; 17
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <EEPROM_voidReadData>:
 u8 EEPROM_voidReadData(u16 Copy_u16Address)
 {
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <EEPROM_voidReadData+0x6>
    3c2e:	0f 92       	push	r0
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	9b 83       	std	Y+3, r25	; 0x03
    3c36:	8a 83       	std	Y+2, r24	; 0x02
	 u8 l_data =0;
    3c38:	19 82       	std	Y+1, r1	; 0x01
	 I2C_voidStartCondition();
    3c3a:	0e 94 df 0b 	call	0x17be	; 0x17be <I2C_voidStartCondition>

	 I2C_voidMasterSendAddressWrite((0x50) | (A2_PIN <<2) | (Copy_u16Address>>8));
    3c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c40:	9b 81       	ldd	r25, Y+3	; 0x03
    3c42:	89 2f       	mov	r24, r25
    3c44:	99 27       	eor	r25, r25
    3c46:	80 65       	ori	r24, 0x50	; 80
    3c48:	0e 94 0e 0c 	call	0x181c	; 0x181c <I2C_voidMasterSendAddressWrite>

	 I2C_voidMasterSendData(((u8)Copy_u16Address));
    3c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <I2C_voidMasterSendData>

	 I2C_voidStartCondition();
    3c52:	0e 94 df 0b 	call	0x17be	; 0x17be <I2C_voidStartCondition>

	 I2C_voidMasterSendAddressRead((0x50) | (A2_PIN <<2) | (Copy_u16Address>>8));
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5a:	89 2f       	mov	r24, r25
    3c5c:	99 27       	eor	r25, r25
    3c5e:	80 65       	ori	r24, 0x50	; 80
    3c60:	0e 94 37 0c 	call	0x186e	; 0x186e <I2C_voidMasterSendAddressRead>

	 l_data = I2C_u8MasterReadData();
    3c64:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <I2C_u8MasterReadData>
    3c68:	89 83       	std	Y+1, r24	; 0x01

	 I2C_voidStopCondition();
    3c6a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <I2C_voidStopCondition>
	 
	 return l_data;
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
 }
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <DC_Motor_voidInit>:

#include "DC_Motor.h"


void DC_Motor_voidInit(void)
{
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_OUTPUT);
    3c84:	83 e0       	ldi	r24, 0x03	; 3
    3c86:	64 e0       	ldi	r22, 0x04	; 4
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DC_MOTOR_PORT,DC_MOTOR_PIN2,DIO_OUTPUT);
    3c8e:	83 e0       	ldi	r24, 0x03	; 3
    3c90:	67 e0       	ldi	r22, 0x07	; 7
    3c92:	41 e0       	ldi	r20, 0x01	; 1
    3c94:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_LOW);
    3c98:	83 e0       	ldi	r24, 0x03	; 3
    3c9a:	64 e0       	ldi	r22, 0x04	; 4
    3c9c:	40 e0       	ldi	r20, 0x00	; 0
    3c9e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN2,DIO_LOW);
    3ca2:	83 e0       	ldi	r24, 0x03	; 3
    3ca4:	67 e0       	ldi	r22, 0x07	; 7
    3ca6:	40 e0       	ldi	r20, 0x00	; 0
    3ca8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
}
    3cac:	cf 91       	pop	r28
    3cae:	df 91       	pop	r29
    3cb0:	08 95       	ret

00003cb2 <DC_Motor_voidMoveRight>:
void DC_Motor_voidMoveRight(void)
{
    3cb2:	df 93       	push	r29
    3cb4:	cf 93       	push	r28
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_HIGH);
    3cba:	83 e0       	ldi	r24, 0x03	; 3
    3cbc:	64 e0       	ldi	r22, 0x04	; 4
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN2,DIO_LOW);
    3cc4:	83 e0       	ldi	r24, 0x03	; 3
    3cc6:	67 e0       	ldi	r22, 0x07	; 7
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
}
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <DC_Motor_voidMoveLeft>:
void DC_Motor_voidMoveLeft(void)
{
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_LOW);
    3cdc:	83 e0       	ldi	r24, 0x03	; 3
    3cde:	64 e0       	ldi	r22, 0x04	; 4
    3ce0:	40 e0       	ldi	r20, 0x00	; 0
    3ce2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN2,DIO_HIGH);
    3ce6:	83 e0       	ldi	r24, 0x03	; 3
    3ce8:	67 e0       	ldi	r22, 0x07	; 7
    3cea:	41 e0       	ldi	r20, 0x01	; 1
    3cec:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
}
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <DC_Motor_voidStop>:
void DC_Motor_voidStop(void)
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_LOW);
    3cfe:	83 e0       	ldi	r24, 0x03	; 3
    3d00:	64 e0       	ldi	r22, 0x04	; 4
    3d02:	40 e0       	ldi	r20, 0x00	; 0
    3d04:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DC_MOTOR_PORT,DC_MOTOR_PIN2,DIO_LOW);
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	67 e0       	ldi	r22, 0x07	; 7
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
}
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <main>:
u8 room = 0;
u8 garage_Flag = 0;
u8 switch_flag = 0;
u16 distance = 0;
int main(void)
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	ee 97       	sbiw	r28, 0x3e	; 62
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
	SPI_voidInit();
    3d2c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SPI_voidInit>
	DC_Motor_voidInit();
    3d30:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <DC_Motor_voidInit>
	UltraSonic_voidInit();
    3d34:	0e 94 1c 11 	call	0x2238	; 0x2238 <UltraSonic_voidInit>
	Timer1_voidInit(TIMER1_NORMAL_MODE,TIMER1_SCALER_8,TIMER1_OC1A_DISCONNECTED,TIMER1_OC1B_DISCONNECTED);
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	62 e0       	ldi	r22, 0x02	; 2
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Timer1_voidInit>
	sei();
    3d44:	78 94       	sei
	LCD_8BitvoidInit();
    3d46:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_8BitvoidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_OUTPUT);
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	62 e0       	ldi	r22, 0x02	; 2
    3d4e:	41 e0       	ldi	r20, 0x01	; 1
    3d50:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN3,DIO_OUTPUT);
    3d54:	83 e0       	ldi	r24, 0x03	; 3
    3d56:	63 e0       	ldi	r22, 0x03	; 3
    3d58:	41 e0       	ldi	r20, 0x01	; 1
    3d5a:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	63 e0       	ldi	r22, 0x03	; 3
    3d62:	41 e0       	ldi	r20, 0x01	; 1
    3d64:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	64 e0       	ldi	r22, 0x04	; 4
    3d6c:	41 e0       	ldi	r20, 0x01	; 1
    3d6e:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	65 e0       	ldi	r22, 0x05	; 5
    3d76:	41 e0       	ldi	r20, 0x01	; 1
    3d78:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	66 e0       	ldi	r22, 0x06	; 6
    3d80:	41 e0       	ldi	r20, 0x01	; 1
    3d82:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN0,DIO_OUTPUT);
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	41 e0       	ldi	r20, 0x01	; 1
    3d8c:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN1,DIO_OUTPUT);
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	61 e0       	ldi	r22, 0x01	; 1
    3d94:	41 e0       	ldi	r20, 0x01	; 1
    3d96:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN2,DIO_OUTPUT);
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	62 e0       	ldi	r22, 0x02	; 2
    3d9e:	41 e0       	ldi	r20, 0x01	; 1
    3da0:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	63 e0       	ldi	r22, 0x03	; 3
    3da8:	41 e0       	ldi	r20, 0x01	; 1
    3daa:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_voidSetPinDirection>
	DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    3dae:	83 e0       	ldi	r24, 0x03	; 3
    3db0:	63 e0       	ldi	r22, 0x03	; 3
    3db2:	41 e0       	ldi	r20, 0x01	; 1
    3db4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	66 e0       	ldi	r22, 0x06	; 6
    3dbc:	41 e0       	ldi	r20, 0x01	; 1
    3dbe:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
	while(1)
	{

		mode = SPI_u8Tranceive(0xff);
    3dc2:	8f ef       	ldi	r24, 0xFF	; 255
    3dc4:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    3dc8:	80 93 cd 00 	sts	0x00CD, r24
		switch(mode)
    3dcc:	80 91 cd 00 	lds	r24, 0x00CD
    3dd0:	28 2f       	mov	r18, r24
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	3e af       	std	Y+62, r19	; 0x3e
    3dd6:	2d af       	std	Y+61, r18	; 0x3d
    3dd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dda:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ddc:	84 33       	cpi	r24, 0x34	; 52
    3dde:	91 05       	cpc	r25, r1
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <main+0xcc>
    3de2:	7d c1       	rjmp	.+762    	; 0x40de <main+0x3c6>
    3de4:	2d ad       	ldd	r18, Y+61	; 0x3d
    3de6:	3e ad       	ldd	r19, Y+62	; 0x3e
    3de8:	25 33       	cpi	r18, 0x35	; 53
    3dea:	31 05       	cpc	r19, r1
    3dec:	34 f4       	brge	.+12     	; 0x3dfa <main+0xe2>
    3dee:	8d ad       	ldd	r24, Y+61	; 0x3d
    3df0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3df2:	83 33       	cpi	r24, 0x33	; 51
    3df4:	91 05       	cpc	r25, r1
    3df6:	e9 f0       	breq	.+58     	; 0x3e32 <main+0x11a>
    3df8:	5c c2       	rjmp	.+1208   	; 0x42b2 <main+0x59a>
    3dfa:	2d ad       	ldd	r18, Y+61	; 0x3d
    3dfc:	3e ad       	ldd	r19, Y+62	; 0x3e
    3dfe:	25 33       	cpi	r18, 0x35	; 53
    3e00:	31 05       	cpc	r19, r1
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <main+0xee>
    3e04:	1c c2       	rjmp	.+1080   	; 0x423e <main+0x526>
    3e06:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e08:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e0a:	81 34       	cpi	r24, 0x41	; 65
    3e0c:	91 05       	cpc	r25, r1
    3e0e:	09 f0       	breq	.+2      	; 0x3e12 <main+0xfa>
    3e10:	50 c2       	rjmp	.+1184   	; 0x42b2 <main+0x59a>
		{
			case 'A':
				DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN5,DIO_LOW);
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	65 e0       	ldi	r22, 0x05	; 5
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	63 e0       	ldi	r22, 0x03	; 3
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	66 e0       	ldi	r22, 0x06	; 6
    3e2a:	41 e0       	ldi	r20, 0x01	; 1
    3e2c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    3e30:	40 c2       	rjmp	.+1152   	; 0x42b2 <main+0x59a>
				break;
			case '3':
				room = SPI_u8Tranceive(0xff);
    3e32:	8f ef       	ldi	r24, 0xFF	; 255
    3e34:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    3e38:	80 93 cf 00 	sts	0x00CF, r24
				switch(room)
    3e3c:	80 91 cf 00 	lds	r24, 0x00CF
    3e40:	28 2f       	mov	r18, r24
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	3c af       	std	Y+60, r19	; 0x3c
    3e46:	2b af       	std	Y+59, r18	; 0x3b
    3e48:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e4c:	81 33       	cpi	r24, 0x31	; 49
    3e4e:	91 05       	cpc	r25, r1
    3e50:	31 f0       	breq	.+12     	; 0x3e5e <main+0x146>
    3e52:	2b ad       	ldd	r18, Y+59	; 0x3b
    3e54:	3c ad       	ldd	r19, Y+60	; 0x3c
    3e56:	22 33       	cpi	r18, 0x32	; 50
    3e58:	31 05       	cpc	r19, r1
    3e5a:	19 f1       	breq	.+70     	; 0x3ea2 <main+0x18a>
    3e5c:	2a c2       	rjmp	.+1108   	; 0x42b2 <main+0x59a>
				{
					case '1':
						mode_f = SPI_u8Tranceive(0xff);
    3e5e:	8f ef       	ldi	r24, 0xFF	; 255
    3e60:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    3e64:	80 93 ce 00 	sts	0x00CE, r24
						switch(mode_f)
    3e68:	80 91 ce 00 	lds	r24, 0x00CE
    3e6c:	28 2f       	mov	r18, r24
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	3a af       	std	Y+58, r19	; 0x3a
    3e72:	29 af       	std	Y+57, r18	; 0x39
    3e74:	89 ad       	ldd	r24, Y+57	; 0x39
    3e76:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e78:	81 33       	cpi	r24, 0x31	; 49
    3e7a:	91 05       	cpc	r25, r1
    3e7c:	31 f0       	breq	.+12     	; 0x3e8a <main+0x172>
    3e7e:	29 ad       	ldd	r18, Y+57	; 0x39
    3e80:	3a ad       	ldd	r19, Y+58	; 0x3a
    3e82:	22 33       	cpi	r18, 0x32	; 50
    3e84:	31 05       	cpc	r19, r1
    3e86:	39 f0       	breq	.+14     	; 0x3e96 <main+0x17e>
    3e88:	14 c2       	rjmp	.+1064   	; 0x42b2 <main+0x59a>
						{
							case '1':
								DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	64 e0       	ldi	r22, 0x04	; 4
    3e8e:	41 e0       	ldi	r20, 0x01	; 1
    3e90:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    3e94:	0e c2       	rjmp	.+1052   	; 0x42b2 <main+0x59a>
								break;
							case '2':
								DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN4,DIO_LOW);
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	64 e0       	ldi	r22, 0x04	; 4
    3e9a:	40 e0       	ldi	r20, 0x00	; 0
    3e9c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    3ea0:	08 c2       	rjmp	.+1040   	; 0x42b2 <main+0x59a>
								break;
						}
						break;
					case '2':
						mode_f = SPI_u8Tranceive(0xff);
    3ea2:	8f ef       	ldi	r24, 0xFF	; 255
    3ea4:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    3ea8:	80 93 ce 00 	sts	0x00CE, r24
						switch(mode_f)
    3eac:	80 91 ce 00 	lds	r24, 0x00CE
    3eb0:	28 2f       	mov	r18, r24
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	38 af       	std	Y+56, r19	; 0x38
    3eb6:	2f ab       	std	Y+55, r18	; 0x37
    3eb8:	8f a9       	ldd	r24, Y+55	; 0x37
    3eba:	98 ad       	ldd	r25, Y+56	; 0x38
    3ebc:	81 33       	cpi	r24, 0x31	; 49
    3ebe:	91 05       	cpc	r25, r1
    3ec0:	39 f0       	breq	.+14     	; 0x3ed0 <main+0x1b8>
    3ec2:	2f a9       	ldd	r18, Y+55	; 0x37
    3ec4:	38 ad       	ldd	r19, Y+56	; 0x38
    3ec6:	22 33       	cpi	r18, 0x32	; 50
    3ec8:	31 05       	cpc	r19, r1
    3eca:	09 f4       	brne	.+2      	; 0x3ece <main+0x1b6>
    3ecc:	85 c0       	rjmp	.+266    	; 0x3fd8 <main+0x2c0>
    3ece:	f1 c1       	rjmp	.+994    	; 0x42b2 <main+0x59a>
						{
							case '1':
								garage_Flag = 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	80 93 d0 00 	sts	0x00D0, r24
								DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    3ed6:	83 e0       	ldi	r24, 0x03	; 3
    3ed8:	62 e0       	ldi	r22, 0x02	; 2
    3eda:	41 e0       	ldi	r20, 0x01	; 1
    3edc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
								DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    3ee0:	83 e0       	ldi	r24, 0x03	; 3
    3ee2:	63 e0       	ldi	r22, 0x03	; 3
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
								DC_Motor_voidMoveRight();
    3eea:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <DC_Motor_voidMoveRight>
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	aa e7       	ldi	r26, 0x7A	; 122
    3ef4:	b4 e4       	ldi	r27, 0x44	; 68
    3ef6:	8f a3       	std	Y+39, r24	; 0x27
    3ef8:	98 a7       	std	Y+40, r25	; 0x28
    3efa:	a9 a7       	std	Y+41, r26	; 0x29
    3efc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3efe:	6f a1       	ldd	r22, Y+39	; 0x27
    3f00:	78 a5       	ldd	r23, Y+40	; 0x28
    3f02:	89 a5       	ldd	r24, Y+41	; 0x29
    3f04:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	4a ef       	ldi	r20, 0xFA	; 250
    3f0c:	54 e4       	ldi	r21, 0x44	; 68
    3f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	8b a3       	std	Y+35, r24	; 0x23
    3f18:	9c a3       	std	Y+36, r25	; 0x24
    3f1a:	ad a3       	std	Y+37, r26	; 0x25
    3f1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f20:	7c a1       	ldd	r23, Y+36	; 0x24
    3f22:	8d a1       	ldd	r24, Y+37	; 0x25
    3f24:	9e a1       	ldd	r25, Y+38	; 0x26
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e8       	ldi	r20, 0x80	; 128
    3f2c:	5f e3       	ldi	r21, 0x3F	; 63
    3f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f32:	88 23       	and	r24, r24
    3f34:	2c f4       	brge	.+10     	; 0x3f40 <main+0x228>
		__ticks = 1;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	9a a3       	std	Y+34, r25	; 0x22
    3f3c:	89 a3       	std	Y+33, r24	; 0x21
    3f3e:	3f c0       	rjmp	.+126    	; 0x3fbe <main+0x2a6>
	else if (__tmp > 65535)
    3f40:	6b a1       	ldd	r22, Y+35	; 0x23
    3f42:	7c a1       	ldd	r23, Y+36	; 0x24
    3f44:	8d a1       	ldd	r24, Y+37	; 0x25
    3f46:	9e a1       	ldd	r25, Y+38	; 0x26
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	3f ef       	ldi	r19, 0xFF	; 255
    3f4c:	4f e7       	ldi	r20, 0x7F	; 127
    3f4e:	57 e4       	ldi	r21, 0x47	; 71
    3f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f54:	18 16       	cp	r1, r24
    3f56:	4c f5       	brge	.+82     	; 0x3faa <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f58:	6f a1       	ldd	r22, Y+39	; 0x27
    3f5a:	78 a5       	ldd	r23, Y+40	; 0x28
    3f5c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	40 e2       	ldi	r20, 0x20	; 32
    3f66:	51 e4       	ldi	r21, 0x41	; 65
    3f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	9a a3       	std	Y+34, r25	; 0x22
    3f7e:	89 a3       	std	Y+33, r24	; 0x21
    3f80:	0f c0       	rjmp	.+30     	; 0x3fa0 <main+0x288>
    3f82:	88 ec       	ldi	r24, 0xC8	; 200
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	98 a3       	std	Y+32, r25	; 0x20
    3f88:	8f 8f       	std	Y+31, r24	; 0x1f
    3f8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f8c:	98 a1       	ldd	r25, Y+32	; 0x20
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	f1 f7       	brne	.-4      	; 0x3f8e <main+0x276>
    3f92:	98 a3       	std	Y+32, r25	; 0x20
    3f94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f96:	89 a1       	ldd	r24, Y+33	; 0x21
    3f98:	9a a1       	ldd	r25, Y+34	; 0x22
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	9a a3       	std	Y+34, r25	; 0x22
    3f9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    3fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    3fa4:	00 97       	sbiw	r24, 0x00	; 0
    3fa6:	69 f7       	brne	.-38     	; 0x3f82 <main+0x26a>
    3fa8:	14 c0       	rjmp	.+40     	; 0x3fd2 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3faa:	6b a1       	ldd	r22, Y+35	; 0x23
    3fac:	7c a1       	ldd	r23, Y+36	; 0x24
    3fae:	8d a1       	ldd	r24, Y+37	; 0x25
    3fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    3fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	9a a3       	std	Y+34, r25	; 0x22
    3fbc:	89 a3       	std	Y+33, r24	; 0x21
    3fbe:	89 a1       	ldd	r24, Y+33	; 0x21
    3fc0:	9a a1       	ldd	r25, Y+34	; 0x22
    3fc2:	9e 8f       	std	Y+30, r25	; 0x1e
    3fc4:	8d 8f       	std	Y+29, r24	; 0x1d
    3fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	f1 f7       	brne	.-4      	; 0x3fca <main+0x2b2>
    3fce:	9e 8f       	std	Y+30, r25	; 0x1e
    3fd0:	8d 8f       	std	Y+29, r24	; 0x1d
								_delay_ms(1000);
								DC_Motor_voidStop();
    3fd2:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <DC_Motor_voidStop>
    3fd6:	6d c1       	rjmp	.+730    	; 0x42b2 <main+0x59a>
								break;
							case '2':
								garage_Flag = 0;
    3fd8:	10 92 d0 00 	sts	0x00D0, r1
								DC_Motor_voidMoveLeft();
    3fdc:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <DC_Motor_voidMoveLeft>
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	aa e7       	ldi	r26, 0x7A	; 122
    3fe6:	b4 e4       	ldi	r27, 0x44	; 68
    3fe8:	89 8f       	std	Y+25, r24	; 0x19
    3fea:	9a 8f       	std	Y+26, r25	; 0x1a
    3fec:	ab 8f       	std	Y+27, r26	; 0x1b
    3fee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	4a ef       	ldi	r20, 0xFA	; 250
    3ffe:	54 e4       	ldi	r21, 0x44	; 68
    4000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	8d 8b       	std	Y+21, r24	; 0x15
    400a:	9e 8b       	std	Y+22, r25	; 0x16
    400c:	af 8b       	std	Y+23, r26	; 0x17
    400e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4010:	6d 89       	ldd	r22, Y+21	; 0x15
    4012:	7e 89       	ldd	r23, Y+22	; 0x16
    4014:	8f 89       	ldd	r24, Y+23	; 0x17
    4016:	98 8d       	ldd	r25, Y+24	; 0x18
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	40 e8       	ldi	r20, 0x80	; 128
    401e:	5f e3       	ldi	r21, 0x3F	; 63
    4020:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4024:	88 23       	and	r24, r24
    4026:	2c f4       	brge	.+10     	; 0x4032 <main+0x31a>
		__ticks = 1;
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	9c 8b       	std	Y+20, r25	; 0x14
    402e:	8b 8b       	std	Y+19, r24	; 0x13
    4030:	3f c0       	rjmp	.+126    	; 0x40b0 <main+0x398>
	else if (__tmp > 65535)
    4032:	6d 89       	ldd	r22, Y+21	; 0x15
    4034:	7e 89       	ldd	r23, Y+22	; 0x16
    4036:	8f 89       	ldd	r24, Y+23	; 0x17
    4038:	98 8d       	ldd	r25, Y+24	; 0x18
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	3f ef       	ldi	r19, 0xFF	; 255
    403e:	4f e7       	ldi	r20, 0x7F	; 127
    4040:	57 e4       	ldi	r21, 0x47	; 71
    4042:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4046:	18 16       	cp	r1, r24
    4048:	4c f5       	brge	.+82     	; 0x409c <main+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404a:	69 8d       	ldd	r22, Y+25	; 0x19
    404c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    404e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e2       	ldi	r20, 0x20	; 32
    4058:	51 e4       	ldi	r21, 0x41	; 65
    405a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	bc 01       	movw	r22, r24
    4064:	cd 01       	movw	r24, r26
    4066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	9c 8b       	std	Y+20, r25	; 0x14
    4070:	8b 8b       	std	Y+19, r24	; 0x13
    4072:	0f c0       	rjmp	.+30     	; 0x4092 <main+0x37a>
    4074:	88 ec       	ldi	r24, 0xC8	; 200
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	9a 8b       	std	Y+18, r25	; 0x12
    407a:	89 8b       	std	Y+17, r24	; 0x11
    407c:	89 89       	ldd	r24, Y+17	; 0x11
    407e:	9a 89       	ldd	r25, Y+18	; 0x12
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <main+0x368>
    4084:	9a 8b       	std	Y+18, r25	; 0x12
    4086:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4088:	8b 89       	ldd	r24, Y+19	; 0x13
    408a:	9c 89       	ldd	r25, Y+20	; 0x14
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	9c 8b       	std	Y+20, r25	; 0x14
    4090:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4092:	8b 89       	ldd	r24, Y+19	; 0x13
    4094:	9c 89       	ldd	r25, Y+20	; 0x14
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	69 f7       	brne	.-38     	; 0x4074 <main+0x35c>
    409a:	14 c0       	rjmp	.+40     	; 0x40c4 <main+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    409c:	6d 89       	ldd	r22, Y+21	; 0x15
    409e:	7e 89       	ldd	r23, Y+22	; 0x16
    40a0:	8f 89       	ldd	r24, Y+23	; 0x17
    40a2:	98 8d       	ldd	r25, Y+24	; 0x18
    40a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	9c 8b       	std	Y+20, r25	; 0x14
    40ae:	8b 8b       	std	Y+19, r24	; 0x13
    40b0:	8b 89       	ldd	r24, Y+19	; 0x13
    40b2:	9c 89       	ldd	r25, Y+20	; 0x14
    40b4:	98 8b       	std	Y+16, r25	; 0x10
    40b6:	8f 87       	std	Y+15, r24	; 0x0f
    40b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ba:	98 89       	ldd	r25, Y+16	; 0x10
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <main+0x3a4>
    40c0:	98 8b       	std	Y+16, r25	; 0x10
    40c2:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(1000);
								DC_Motor_voidStop();
    40c4:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <DC_Motor_voidStop>
								DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN2,DIO_LOW);
    40c8:	83 e0       	ldi	r24, 0x03	; 3
    40ca:	62 e0       	ldi	r22, 0x02	; 2
    40cc:	40 e0       	ldi	r20, 0x00	; 0
    40ce:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
								DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    40d2:	83 e0       	ldi	r24, 0x03	; 3
    40d4:	63 e0       	ldi	r22, 0x03	; 3
    40d6:	41 e0       	ldi	r20, 0x01	; 1
    40d8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    40dc:	ea c0       	rjmp	.+468    	; 0x42b2 <main+0x59a>

						break;
				}
				break;
			case '4':
				room = SPI_u8Tranceive(0xff);
    40de:	8f ef       	ldi	r24, 0xFF	; 255
    40e0:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    40e4:	80 93 cf 00 	sts	0x00CF, r24
				switch(room)
    40e8:	80 91 cf 00 	lds	r24, 0x00CF
    40ec:	28 2f       	mov	r18, r24
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	3e ab       	std	Y+54, r19	; 0x36
    40f2:	2d ab       	std	Y+53, r18	; 0x35
    40f4:	8d a9       	ldd	r24, Y+53	; 0x35
    40f6:	9e a9       	ldd	r25, Y+54	; 0x36
    40f8:	82 33       	cpi	r24, 0x32	; 50
    40fa:	91 05       	cpc	r25, r1
    40fc:	d1 f1       	breq	.+116    	; 0x4172 <main+0x45a>
    40fe:	2d a9       	ldd	r18, Y+53	; 0x35
    4100:	3e a9       	ldd	r19, Y+54	; 0x36
    4102:	23 33       	cpi	r18, 0x33	; 51
    4104:	31 05       	cpc	r19, r1
    4106:	34 f4       	brge	.+12     	; 0x4114 <main+0x3fc>
    4108:	8d a9       	ldd	r24, Y+53	; 0x35
    410a:	9e a9       	ldd	r25, Y+54	; 0x36
    410c:	81 33       	cpi	r24, 0x31	; 49
    410e:	91 05       	cpc	r25, r1
    4110:	71 f0       	breq	.+28     	; 0x412e <main+0x416>
    4112:	cf c0       	rjmp	.+414    	; 0x42b2 <main+0x59a>
    4114:	2d a9       	ldd	r18, Y+53	; 0x35
    4116:	3e a9       	ldd	r19, Y+54	; 0x36
    4118:	23 33       	cpi	r18, 0x33	; 51
    411a:	31 05       	cpc	r19, r1
    411c:	09 f4       	brne	.+2      	; 0x4120 <main+0x408>
    411e:	4b c0       	rjmp	.+150    	; 0x41b6 <main+0x49e>
    4120:	8d a9       	ldd	r24, Y+53	; 0x35
    4122:	9e a9       	ldd	r25, Y+54	; 0x36
    4124:	84 33       	cpi	r24, 0x34	; 52
    4126:	91 05       	cpc	r25, r1
    4128:	09 f4       	brne	.+2      	; 0x412c <main+0x414>
    412a:	67 c0       	rjmp	.+206    	; 0x41fa <main+0x4e2>
    412c:	c2 c0       	rjmp	.+388    	; 0x42b2 <main+0x59a>
				{
					case '1':
						mode_f = SPI_u8Tranceive(0xff);
    412e:	8f ef       	ldi	r24, 0xFF	; 255
    4130:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    4134:	80 93 ce 00 	sts	0x00CE, r24
						switch(mode_f)
    4138:	80 91 ce 00 	lds	r24, 0x00CE
    413c:	28 2f       	mov	r18, r24
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	3c ab       	std	Y+52, r19	; 0x34
    4142:	2b ab       	std	Y+51, r18	; 0x33
    4144:	8b a9       	ldd	r24, Y+51	; 0x33
    4146:	9c a9       	ldd	r25, Y+52	; 0x34
    4148:	81 33       	cpi	r24, 0x31	; 49
    414a:	91 05       	cpc	r25, r1
    414c:	31 f0       	breq	.+12     	; 0x415a <main+0x442>
    414e:	2b a9       	ldd	r18, Y+51	; 0x33
    4150:	3c a9       	ldd	r19, Y+52	; 0x34
    4152:	22 33       	cpi	r18, 0x32	; 50
    4154:	31 05       	cpc	r19, r1
    4156:	39 f0       	breq	.+14     	; 0x4166 <main+0x44e>
    4158:	ac c0       	rjmp	.+344    	; 0x42b2 <main+0x59a>
						{
							case '1':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	41 e0       	ldi	r20, 0x01	; 1
    4160:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    4164:	a6 c0       	rjmp	.+332    	; 0x42b2 <main+0x59a>
								break;
							case '2':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    4170:	a0 c0       	rjmp	.+320    	; 0x42b2 <main+0x59a>
								break;
						}
						break;
					case '2':
						mode_f = SPI_u8Tranceive(0xff);
    4172:	8f ef       	ldi	r24, 0xFF	; 255
    4174:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    4178:	80 93 ce 00 	sts	0x00CE, r24
						switch(mode_f)
    417c:	80 91 ce 00 	lds	r24, 0x00CE
    4180:	28 2f       	mov	r18, r24
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	3a ab       	std	Y+50, r19	; 0x32
    4186:	29 ab       	std	Y+49, r18	; 0x31
    4188:	89 a9       	ldd	r24, Y+49	; 0x31
    418a:	9a a9       	ldd	r25, Y+50	; 0x32
    418c:	81 33       	cpi	r24, 0x31	; 49
    418e:	91 05       	cpc	r25, r1
    4190:	31 f0       	breq	.+12     	; 0x419e <main+0x486>
    4192:	29 a9       	ldd	r18, Y+49	; 0x31
    4194:	3a a9       	ldd	r19, Y+50	; 0x32
    4196:	22 33       	cpi	r18, 0x32	; 50
    4198:	31 05       	cpc	r19, r1
    419a:	39 f0       	breq	.+14     	; 0x41aa <main+0x492>
    419c:	8a c0       	rjmp	.+276    	; 0x42b2 <main+0x59a>
						{
							case '1':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	61 e0       	ldi	r22, 0x01	; 1
    41a2:	41 e0       	ldi	r20, 0x01	; 1
    41a4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    41a8:	84 c0       	rjmp	.+264    	; 0x42b2 <main+0x59a>
								break;
							case '2':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	61 e0       	ldi	r22, 0x01	; 1
    41ae:	40 e0       	ldi	r20, 0x00	; 0
    41b0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    41b4:	7e c0       	rjmp	.+252    	; 0x42b2 <main+0x59a>
								break;
						}
						break;
					case '3':
						mode_f = SPI_u8Tranceive(0xff);
    41b6:	8f ef       	ldi	r24, 0xFF	; 255
    41b8:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    41bc:	80 93 ce 00 	sts	0x00CE, r24
						switch(mode_f)
    41c0:	80 91 ce 00 	lds	r24, 0x00CE
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	38 ab       	std	Y+48, r19	; 0x30
    41ca:	2f a7       	std	Y+47, r18	; 0x2f
    41cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ce:	98 a9       	ldd	r25, Y+48	; 0x30
    41d0:	81 33       	cpi	r24, 0x31	; 49
    41d2:	91 05       	cpc	r25, r1
    41d4:	31 f0       	breq	.+12     	; 0x41e2 <main+0x4ca>
    41d6:	2f a5       	ldd	r18, Y+47	; 0x2f
    41d8:	38 a9       	ldd	r19, Y+48	; 0x30
    41da:	22 33       	cpi	r18, 0x32	; 50
    41dc:	31 05       	cpc	r19, r1
    41de:	39 f0       	breq	.+14     	; 0x41ee <main+0x4d6>
    41e0:	68 c0       	rjmp	.+208    	; 0x42b2 <main+0x59a>
						{
							case '1':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN2,DIO_HIGH);
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	62 e0       	ldi	r22, 0x02	; 2
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    41ec:	62 c0       	rjmp	.+196    	; 0x42b2 <main+0x59a>
								break;
							case '2':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	62 e0       	ldi	r22, 0x02	; 2
    41f2:	40 e0       	ldi	r20, 0x00	; 0
    41f4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    41f8:	5c c0       	rjmp	.+184    	; 0x42b2 <main+0x59a>
								break;
						}
						break;
					case '4':
						mode_f = SPI_u8Tranceive(0xff);
    41fa:	8f ef       	ldi	r24, 0xFF	; 255
    41fc:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    4200:	80 93 ce 00 	sts	0x00CE, r24
						switch(mode_f)
    4204:	80 91 ce 00 	lds	r24, 0x00CE
    4208:	28 2f       	mov	r18, r24
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	3e a7       	std	Y+46, r19	; 0x2e
    420e:	2d a7       	std	Y+45, r18	; 0x2d
    4210:	8d a5       	ldd	r24, Y+45	; 0x2d
    4212:	9e a5       	ldd	r25, Y+46	; 0x2e
    4214:	81 33       	cpi	r24, 0x31	; 49
    4216:	91 05       	cpc	r25, r1
    4218:	31 f0       	breq	.+12     	; 0x4226 <main+0x50e>
    421a:	2d a5       	ldd	r18, Y+45	; 0x2d
    421c:	3e a5       	ldd	r19, Y+46	; 0x2e
    421e:	22 33       	cpi	r18, 0x32	; 50
    4220:	31 05       	cpc	r19, r1
    4222:	39 f0       	breq	.+14     	; 0x4232 <main+0x51a>
    4224:	46 c0       	rjmp	.+140    	; 0x42b2 <main+0x59a>
						{
							case '1':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN3,DIO_HIGH);
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	63 e0       	ldi	r22, 0x03	; 3
    422a:	41 e0       	ldi	r20, 0x01	; 1
    422c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    4230:	40 c0       	rjmp	.+128    	; 0x42b2 <main+0x59a>
								break;
							case '2':
								DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	63 e0       	ldi	r22, 0x03	; 3
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    423c:	3a c0       	rjmp	.+116    	; 0x42b2 <main+0x59a>
						}
						break;
				}
				break;
			case '5':
				room = SPI_u8Tranceive(0xff);
    423e:	8f ef       	ldi	r24, 0xFF	; 255
    4240:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    4244:	80 93 cf 00 	sts	0x00CF, r24
				switch(room)
    4248:	80 91 cf 00 	lds	r24, 0x00CF
    424c:	28 2f       	mov	r18, r24
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	3c a7       	std	Y+44, r19	; 0x2c
    4252:	2b a7       	std	Y+43, r18	; 0x2b
    4254:	8b a5       	ldd	r24, Y+43	; 0x2b
    4256:	9c a5       	ldd	r25, Y+44	; 0x2c
    4258:	82 33       	cpi	r24, 0x32	; 50
    425a:	91 05       	cpc	r25, r1
    425c:	31 f0       	breq	.+12     	; 0x426a <main+0x552>
    425e:	2b a5       	ldd	r18, Y+43	; 0x2b
    4260:	3c a5       	ldd	r19, Y+44	; 0x2c
    4262:	23 33       	cpi	r18, 0x33	; 51
    4264:	31 05       	cpc	r19, r1
    4266:	89 f0       	breq	.+34     	; 0x428a <main+0x572>
    4268:	24 c0       	rjmp	.+72     	; 0x42b2 <main+0x59a>
				{
					case'2':
						DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN5,DIO_HIGH);
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	65 e0       	ldi	r22, 0x05	; 5
    426e:	41 e0       	ldi	r20, 0x01	; 1
    4270:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	63 e0       	ldi	r22, 0x03	; 3
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN6,DIO_LOW);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	66 e0       	ldi	r22, 0x06	; 6
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
    4288:	14 c0       	rjmp	.+40     	; 0x42b2 <main+0x59a>
						break;
					case '3':
						mode_f = SPI_u8Tranceive(0xff);
    428a:	8f ef       	ldi	r24, 0xFF	; 255
    428c:	0e 94 97 09 	call	0x132e	; 0x132e <SPI_u8Tranceive>
    4290:	80 93 ce 00 	sts	0x00CE, r24
						DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN5,DIO_LOW);
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	65 e0       	ldi	r22, 0x05	; 5
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	63 e0       	ldi	r22, 0x03	; 3
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
						DIO_voidSetPinvalue(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	66 e0       	ldi	r22, 0x06	; 6
    42ac:	41 e0       	ldi	r20, 0x01	; 1
    42ae:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
						break;
				}
				break;

		}
		if(garage_Flag == 1)
    42b2:	80 91 d0 00 	lds	r24, 0x00D0
    42b6:	81 30       	cpi	r24, 0x01	; 1
    42b8:	09 f0       	breq	.+2      	; 0x42bc <main+0x5a4>
    42ba:	83 cd       	rjmp	.-1274   	; 0x3dc2 <main+0xaa>
		{
			distance = UltraSonic_u16ReadValue(ULTRASONIC_TIMER1_PRESCALER_8);
    42bc:	88 e0       	ldi	r24, 0x08	; 8
    42be:	0e 94 36 11 	call	0x226c	; 0x226c <UltraSonic_u16ReadValue>
    42c2:	90 93 d3 00 	sts	0x00D3, r25
    42c6:	80 93 d2 00 	sts	0x00D2, r24
			LCD_voidSendStringPos("Distance = ",1,1);
    42ca:	83 e6       	ldi	r24, 0x63	; 99
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	61 e0       	ldi	r22, 0x01	; 1
    42d0:	41 e0       	ldi	r20, 0x01	; 1
    42d2:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_voidSendStringPos>
			LCD_voidSendNumberPos(distance,1,12);
    42d6:	80 91 d2 00 	lds	r24, 0x00D2
    42da:	90 91 d3 00 	lds	r25, 0x00D3
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	4c e0       	ldi	r20, 0x0C	; 12
    42e2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <LCD_voidSendNumberPos>
			if(distance > 20)
    42e6:	80 91 d2 00 	lds	r24, 0x00D2
    42ea:	90 91 d3 00 	lds	r25, 0x00D3
    42ee:	85 31       	cpi	r24, 0x15	; 21
    42f0:	91 05       	cpc	r25, r1
    42f2:	88 f0       	brcs	.+34     	; 0x4316 <main+0x5fe>
			{
				if(switch_flag != 1)
    42f4:	80 91 d1 00 	lds	r24, 0x00D1
    42f8:	81 30       	cpi	r24, 0x01	; 1
    42fa:	19 f0       	breq	.+6      	; 0x4302 <main+0x5ea>
				{
					LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
				}

				LCD_voidSendStringPos("Move Backward",2,1);
    4302:	8f e6       	ldi	r24, 0x6F	; 111
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	62 e0       	ldi	r22, 0x02	; 2
    4308:	41 e0       	ldi	r20, 0x01	; 1
    430a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_voidSendStringPos>
				switch_flag = 1;
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	80 93 d1 00 	sts	0x00D1, r24
    4314:	56 cd       	rjmp	.-1364   	; 0x3dc2 <main+0xaa>
			}
			else if ((distance <= 20)&&(distance > 15))
    4316:	80 91 d2 00 	lds	r24, 0x00D2
    431a:	90 91 d3 00 	lds	r25, 0x00D3
    431e:	85 31       	cpi	r24, 0x15	; 21
    4320:	91 05       	cpc	r25, r1
    4322:	08 f0       	brcs	.+2      	; 0x4326 <main+0x60e>
    4324:	a4 c0       	rjmp	.+328    	; 0x446e <main+0x756>
    4326:	80 91 d2 00 	lds	r24, 0x00D2
    432a:	90 91 d3 00 	lds	r25, 0x00D3
    432e:	80 31       	cpi	r24, 0x10	; 16
    4330:	91 05       	cpc	r25, r1
    4332:	08 f4       	brcc	.+2      	; 0x4336 <main+0x61e>
    4334:	9c c0       	rjmp	.+312    	; 0x446e <main+0x756>
			{
				if(switch_flag != 2)
    4336:	80 91 d1 00 	lds	r24, 0x00D1
    433a:	82 30       	cpi	r24, 0x02	; 2
    433c:	19 f0       	breq	.+6      	; 0x4344 <main+0x62c>
				{
					LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
				}
				LCD_voidSendStringPos("Stop",1,7);
    4344:	8d e7       	ldi	r24, 0x7D	; 125
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	61 e0       	ldi	r22, 0x01	; 1
    434a:	47 e0       	ldi	r20, 0x07	; 7
    434c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_voidSendStringPos>
				garage_Flag = 0;
    4350:	10 92 d0 00 	sts	0x00D0, r1
				DC_Motor_voidMoveLeft();
    4354:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <DC_Motor_voidMoveLeft>
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	aa e7       	ldi	r26, 0x7A	; 122
    435e:	b4 e4       	ldi	r27, 0x44	; 68
    4360:	8b 87       	std	Y+11, r24	; 0x0b
    4362:	9c 87       	std	Y+12, r25	; 0x0c
    4364:	ad 87       	std	Y+13, r26	; 0x0d
    4366:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4368:	6b 85       	ldd	r22, Y+11	; 0x0b
    436a:	7c 85       	ldd	r23, Y+12	; 0x0c
    436c:	8d 85       	ldd	r24, Y+13	; 0x0d
    436e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	4a ef       	ldi	r20, 0xFA	; 250
    4376:	54 e4       	ldi	r21, 0x44	; 68
    4378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	8f 83       	std	Y+7, r24	; 0x07
    4382:	98 87       	std	Y+8, r25	; 0x08
    4384:	a9 87       	std	Y+9, r26	; 0x09
    4386:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4388:	6f 81       	ldd	r22, Y+7	; 0x07
    438a:	78 85       	ldd	r23, Y+8	; 0x08
    438c:	89 85       	ldd	r24, Y+9	; 0x09
    438e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	40 e8       	ldi	r20, 0x80	; 128
    4396:	5f e3       	ldi	r21, 0x3F	; 63
    4398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    439c:	88 23       	and	r24, r24
    439e:	2c f4       	brge	.+10     	; 0x43aa <main+0x692>
		__ticks = 1;
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	9e 83       	std	Y+6, r25	; 0x06
    43a6:	8d 83       	std	Y+5, r24	; 0x05
    43a8:	3f c0       	rjmp	.+126    	; 0x4428 <main+0x710>
	else if (__tmp > 65535)
    43aa:	6f 81       	ldd	r22, Y+7	; 0x07
    43ac:	78 85       	ldd	r23, Y+8	; 0x08
    43ae:	89 85       	ldd	r24, Y+9	; 0x09
    43b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	3f ef       	ldi	r19, 0xFF	; 255
    43b6:	4f e7       	ldi	r20, 0x7F	; 127
    43b8:	57 e4       	ldi	r21, 0x47	; 71
    43ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43be:	18 16       	cp	r1, r24
    43c0:	4c f5       	brge	.+82     	; 0x4414 <main+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e2       	ldi	r20, 0x20	; 32
    43d0:	51 e4       	ldi	r21, 0x41	; 65
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	9e 83       	std	Y+6, r25	; 0x06
    43e8:	8d 83       	std	Y+5, r24	; 0x05
    43ea:	0f c0       	rjmp	.+30     	; 0x440a <main+0x6f2>
    43ec:	88 ec       	ldi	r24, 0xC8	; 200
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	9c 83       	std	Y+4, r25	; 0x04
    43f2:	8b 83       	std	Y+3, r24	; 0x03
    43f4:	8b 81       	ldd	r24, Y+3	; 0x03
    43f6:	9c 81       	ldd	r25, Y+4	; 0x04
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	f1 f7       	brne	.-4      	; 0x43f8 <main+0x6e0>
    43fc:	9c 83       	std	Y+4, r25	; 0x04
    43fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4400:	8d 81       	ldd	r24, Y+5	; 0x05
    4402:	9e 81       	ldd	r25, Y+6	; 0x06
    4404:	01 97       	sbiw	r24, 0x01	; 1
    4406:	9e 83       	std	Y+6, r25	; 0x06
    4408:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440a:	8d 81       	ldd	r24, Y+5	; 0x05
    440c:	9e 81       	ldd	r25, Y+6	; 0x06
    440e:	00 97       	sbiw	r24, 0x00	; 0
    4410:	69 f7       	brne	.-38     	; 0x43ec <main+0x6d4>
    4412:	14 c0       	rjmp	.+40     	; 0x443c <main+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4414:	6f 81       	ldd	r22, Y+7	; 0x07
    4416:	78 85       	ldd	r23, Y+8	; 0x08
    4418:	89 85       	ldd	r24, Y+9	; 0x09
    441a:	9a 85       	ldd	r25, Y+10	; 0x0a
    441c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	9e 83       	std	Y+6, r25	; 0x06
    4426:	8d 83       	std	Y+5, r24	; 0x05
    4428:	8d 81       	ldd	r24, Y+5	; 0x05
    442a:	9e 81       	ldd	r25, Y+6	; 0x06
    442c:	9a 83       	std	Y+2, r25	; 0x02
    442e:	89 83       	std	Y+1, r24	; 0x01
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <main+0x71c>
    4438:	9a 83       	std	Y+2, r25	; 0x02
    443a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				DC_Motor_voidStop();
    443c:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <DC_Motor_voidStop>
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
				LCD_voidSendStringPos("Parking Done",1,1);
    4446:	82 e8       	ldi	r24, 0x82	; 130
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	61 e0       	ldi	r22, 0x01	; 1
    444c:	41 e0       	ldi	r20, 0x01	; 1
    444e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_voidSendStringPos>
				DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN2,DIO_LOW);
    4452:	83 e0       	ldi	r24, 0x03	; 3
    4454:	62 e0       	ldi	r22, 0x02	; 2
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    445c:	83 e0       	ldi	r24, 0x03	; 3
    445e:	63 e0       	ldi	r22, 0x03	; 3
    4460:	41 e0       	ldi	r20, 0x01	; 1
    4462:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_voidSetPinvalue>
				switch_flag = 2;
    4466:	82 e0       	ldi	r24, 0x02	; 2
    4468:	80 93 d1 00 	sts	0x00D1, r24
    446c:	aa cc       	rjmp	.-1708   	; 0x3dc2 <main+0xaa>
			}
			else
			{
				if(switch_flag != 3)
    446e:	80 91 d1 00 	lds	r24, 0x00D1
    4472:	83 30       	cpi	r24, 0x03	; 3
    4474:	19 f0       	breq	.+6      	; 0x447c <main+0x764>
				{
					LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_voidSendCommand>
				}
				LCD_voidSendStringPos("Move Forward",2,1);
    447c:	8f e8       	ldi	r24, 0x8F	; 143
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	62 e0       	ldi	r22, 0x02	; 2
    4482:	41 e0       	ldi	r20, 0x01	; 1
    4484:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_voidSendStringPos>
				switch_flag = 3;
    4488:	83 e0       	ldi	r24, 0x03	; 3
    448a:	80 93 d1 00 	sts	0x00D1, r24
    448e:	99 cc       	rjmp	.-1742   	; 0x3dc2 <main+0xaa>

00004490 <__mulsi3>:
    4490:	62 9f       	mul	r22, r18
    4492:	d0 01       	movw	r26, r0
    4494:	73 9f       	mul	r23, r19
    4496:	f0 01       	movw	r30, r0
    4498:	82 9f       	mul	r24, r18
    449a:	e0 0d       	add	r30, r0
    449c:	f1 1d       	adc	r31, r1
    449e:	64 9f       	mul	r22, r20
    44a0:	e0 0d       	add	r30, r0
    44a2:	f1 1d       	adc	r31, r1
    44a4:	92 9f       	mul	r25, r18
    44a6:	f0 0d       	add	r31, r0
    44a8:	83 9f       	mul	r24, r19
    44aa:	f0 0d       	add	r31, r0
    44ac:	74 9f       	mul	r23, r20
    44ae:	f0 0d       	add	r31, r0
    44b0:	65 9f       	mul	r22, r21
    44b2:	f0 0d       	add	r31, r0
    44b4:	99 27       	eor	r25, r25
    44b6:	72 9f       	mul	r23, r18
    44b8:	b0 0d       	add	r27, r0
    44ba:	e1 1d       	adc	r30, r1
    44bc:	f9 1f       	adc	r31, r25
    44be:	63 9f       	mul	r22, r19
    44c0:	b0 0d       	add	r27, r0
    44c2:	e1 1d       	adc	r30, r1
    44c4:	f9 1f       	adc	r31, r25
    44c6:	bd 01       	movw	r22, r26
    44c8:	cf 01       	movw	r24, r30
    44ca:	11 24       	eor	r1, r1
    44cc:	08 95       	ret

000044ce <__udivmodsi4>:
    44ce:	a1 e2       	ldi	r26, 0x21	; 33
    44d0:	1a 2e       	mov	r1, r26
    44d2:	aa 1b       	sub	r26, r26
    44d4:	bb 1b       	sub	r27, r27
    44d6:	fd 01       	movw	r30, r26
    44d8:	0d c0       	rjmp	.+26     	; 0x44f4 <__udivmodsi4_ep>

000044da <__udivmodsi4_loop>:
    44da:	aa 1f       	adc	r26, r26
    44dc:	bb 1f       	adc	r27, r27
    44de:	ee 1f       	adc	r30, r30
    44e0:	ff 1f       	adc	r31, r31
    44e2:	a2 17       	cp	r26, r18
    44e4:	b3 07       	cpc	r27, r19
    44e6:	e4 07       	cpc	r30, r20
    44e8:	f5 07       	cpc	r31, r21
    44ea:	20 f0       	brcs	.+8      	; 0x44f4 <__udivmodsi4_ep>
    44ec:	a2 1b       	sub	r26, r18
    44ee:	b3 0b       	sbc	r27, r19
    44f0:	e4 0b       	sbc	r30, r20
    44f2:	f5 0b       	sbc	r31, r21

000044f4 <__udivmodsi4_ep>:
    44f4:	66 1f       	adc	r22, r22
    44f6:	77 1f       	adc	r23, r23
    44f8:	88 1f       	adc	r24, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	1a 94       	dec	r1
    44fe:	69 f7       	brne	.-38     	; 0x44da <__udivmodsi4_loop>
    4500:	60 95       	com	r22
    4502:	70 95       	com	r23
    4504:	80 95       	com	r24
    4506:	90 95       	com	r25
    4508:	9b 01       	movw	r18, r22
    450a:	ac 01       	movw	r20, r24
    450c:	bd 01       	movw	r22, r26
    450e:	cf 01       	movw	r24, r30
    4510:	08 95       	ret

00004512 <__prologue_saves__>:
    4512:	2f 92       	push	r2
    4514:	3f 92       	push	r3
    4516:	4f 92       	push	r4
    4518:	5f 92       	push	r5
    451a:	6f 92       	push	r6
    451c:	7f 92       	push	r7
    451e:	8f 92       	push	r8
    4520:	9f 92       	push	r9
    4522:	af 92       	push	r10
    4524:	bf 92       	push	r11
    4526:	cf 92       	push	r12
    4528:	df 92       	push	r13
    452a:	ef 92       	push	r14
    452c:	ff 92       	push	r15
    452e:	0f 93       	push	r16
    4530:	1f 93       	push	r17
    4532:	cf 93       	push	r28
    4534:	df 93       	push	r29
    4536:	cd b7       	in	r28, 0x3d	; 61
    4538:	de b7       	in	r29, 0x3e	; 62
    453a:	ca 1b       	sub	r28, r26
    453c:	db 0b       	sbc	r29, r27
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	09 94       	ijmp

0000454a <__epilogue_restores__>:
    454a:	2a 88       	ldd	r2, Y+18	; 0x12
    454c:	39 88       	ldd	r3, Y+17	; 0x11
    454e:	48 88       	ldd	r4, Y+16	; 0x10
    4550:	5f 84       	ldd	r5, Y+15	; 0x0f
    4552:	6e 84       	ldd	r6, Y+14	; 0x0e
    4554:	7d 84       	ldd	r7, Y+13	; 0x0d
    4556:	8c 84       	ldd	r8, Y+12	; 0x0c
    4558:	9b 84       	ldd	r9, Y+11	; 0x0b
    455a:	aa 84       	ldd	r10, Y+10	; 0x0a
    455c:	b9 84       	ldd	r11, Y+9	; 0x09
    455e:	c8 84       	ldd	r12, Y+8	; 0x08
    4560:	df 80       	ldd	r13, Y+7	; 0x07
    4562:	ee 80       	ldd	r14, Y+6	; 0x06
    4564:	fd 80       	ldd	r15, Y+5	; 0x05
    4566:	0c 81       	ldd	r16, Y+4	; 0x04
    4568:	1b 81       	ldd	r17, Y+3	; 0x03
    456a:	aa 81       	ldd	r26, Y+2	; 0x02
    456c:	b9 81       	ldd	r27, Y+1	; 0x01
    456e:	ce 0f       	add	r28, r30
    4570:	d1 1d       	adc	r29, r1
    4572:	0f b6       	in	r0, 0x3f	; 63
    4574:	f8 94       	cli
    4576:	de bf       	out	0x3e, r29	; 62
    4578:	0f be       	out	0x3f, r0	; 63
    457a:	cd bf       	out	0x3d, r28	; 61
    457c:	ed 01       	movw	r28, r26
    457e:	08 95       	ret

00004580 <sprintf>:
    4580:	ae e0       	ldi	r26, 0x0E	; 14
    4582:	b0 e0       	ldi	r27, 0x00	; 0
    4584:	e6 ec       	ldi	r30, 0xC6	; 198
    4586:	f2 e2       	ldi	r31, 0x22	; 34
    4588:	0c 94 97 22 	jmp	0x452e	; 0x452e <__prologue_saves__+0x1c>
    458c:	0d 89       	ldd	r16, Y+21	; 0x15
    458e:	1e 89       	ldd	r17, Y+22	; 0x16
    4590:	86 e0       	ldi	r24, 0x06	; 6
    4592:	8c 83       	std	Y+4, r24	; 0x04
    4594:	1a 83       	std	Y+2, r17	; 0x02
    4596:	09 83       	std	Y+1, r16	; 0x01
    4598:	8f ef       	ldi	r24, 0xFF	; 255
    459a:	9f e7       	ldi	r25, 0x7F	; 127
    459c:	9e 83       	std	Y+6, r25	; 0x06
    459e:	8d 83       	std	Y+5, r24	; 0x05
    45a0:	9e 01       	movw	r18, r28
    45a2:	27 5e       	subi	r18, 0xE7	; 231
    45a4:	3f 4f       	sbci	r19, 0xFF	; 255
    45a6:	ce 01       	movw	r24, r28
    45a8:	01 96       	adiw	r24, 0x01	; 1
    45aa:	6f 89       	ldd	r22, Y+23	; 0x17
    45ac:	78 8d       	ldd	r23, Y+24	; 0x18
    45ae:	a9 01       	movw	r20, r18
    45b0:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <vfprintf>
    45b4:	2f 81       	ldd	r18, Y+7	; 0x07
    45b6:	38 85       	ldd	r19, Y+8	; 0x08
    45b8:	02 0f       	add	r16, r18
    45ba:	13 1f       	adc	r17, r19
    45bc:	f8 01       	movw	r30, r16
    45be:	10 82       	st	Z, r1
    45c0:	2e 96       	adiw	r28, 0x0e	; 14
    45c2:	e4 e0       	ldi	r30, 0x04	; 4
    45c4:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__epilogue_restores__+0x1c>

000045c8 <vfprintf>:
    45c8:	ab e0       	ldi	r26, 0x0B	; 11
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	ea ee       	ldi	r30, 0xEA	; 234
    45ce:	f2 e2       	ldi	r31, 0x22	; 34
    45d0:	0c 94 89 22 	jmp	0x4512	; 0x4512 <__prologue_saves__>
    45d4:	3c 01       	movw	r6, r24
    45d6:	2b 01       	movw	r4, r22
    45d8:	5a 01       	movw	r10, r20
    45da:	fc 01       	movw	r30, r24
    45dc:	17 82       	std	Z+7, r1	; 0x07
    45de:	16 82       	std	Z+6, r1	; 0x06
    45e0:	83 81       	ldd	r24, Z+3	; 0x03
    45e2:	81 fd       	sbrc	r24, 1
    45e4:	03 c0       	rjmp	.+6      	; 0x45ec <vfprintf+0x24>
    45e6:	6f ef       	ldi	r22, 0xFF	; 255
    45e8:	7f ef       	ldi	r23, 0xFF	; 255
    45ea:	c6 c1       	rjmp	.+908    	; 0x4978 <vfprintf+0x3b0>
    45ec:	9a e0       	ldi	r25, 0x0A	; 10
    45ee:	89 2e       	mov	r8, r25
    45f0:	1e 01       	movw	r2, r28
    45f2:	08 94       	sec
    45f4:	21 1c       	adc	r2, r1
    45f6:	31 1c       	adc	r3, r1
    45f8:	f3 01       	movw	r30, r6
    45fa:	23 81       	ldd	r18, Z+3	; 0x03
    45fc:	f2 01       	movw	r30, r4
    45fe:	23 fd       	sbrc	r18, 3
    4600:	85 91       	lpm	r24, Z+
    4602:	23 ff       	sbrs	r18, 3
    4604:	81 91       	ld	r24, Z+
    4606:	2f 01       	movw	r4, r30
    4608:	88 23       	and	r24, r24
    460a:	09 f4       	brne	.+2      	; 0x460e <vfprintf+0x46>
    460c:	b2 c1       	rjmp	.+868    	; 0x4972 <vfprintf+0x3aa>
    460e:	85 32       	cpi	r24, 0x25	; 37
    4610:	39 f4       	brne	.+14     	; 0x4620 <vfprintf+0x58>
    4612:	23 fd       	sbrc	r18, 3
    4614:	85 91       	lpm	r24, Z+
    4616:	23 ff       	sbrs	r18, 3
    4618:	81 91       	ld	r24, Z+
    461a:	2f 01       	movw	r4, r30
    461c:	85 32       	cpi	r24, 0x25	; 37
    461e:	29 f4       	brne	.+10     	; 0x462a <vfprintf+0x62>
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	b3 01       	movw	r22, r6
    4624:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    4628:	e7 cf       	rjmp	.-50     	; 0x45f8 <vfprintf+0x30>
    462a:	98 2f       	mov	r25, r24
    462c:	ff 24       	eor	r15, r15
    462e:	ee 24       	eor	r14, r14
    4630:	99 24       	eor	r9, r9
    4632:	ff e1       	ldi	r31, 0x1F	; 31
    4634:	ff 15       	cp	r31, r15
    4636:	d0 f0       	brcs	.+52     	; 0x466c <vfprintf+0xa4>
    4638:	9b 32       	cpi	r25, 0x2B	; 43
    463a:	69 f0       	breq	.+26     	; 0x4656 <vfprintf+0x8e>
    463c:	9c 32       	cpi	r25, 0x2C	; 44
    463e:	28 f4       	brcc	.+10     	; 0x464a <vfprintf+0x82>
    4640:	90 32       	cpi	r25, 0x20	; 32
    4642:	59 f0       	breq	.+22     	; 0x465a <vfprintf+0x92>
    4644:	93 32       	cpi	r25, 0x23	; 35
    4646:	91 f4       	brne	.+36     	; 0x466c <vfprintf+0xa4>
    4648:	0e c0       	rjmp	.+28     	; 0x4666 <vfprintf+0x9e>
    464a:	9d 32       	cpi	r25, 0x2D	; 45
    464c:	49 f0       	breq	.+18     	; 0x4660 <vfprintf+0x98>
    464e:	90 33       	cpi	r25, 0x30	; 48
    4650:	69 f4       	brne	.+26     	; 0x466c <vfprintf+0xa4>
    4652:	41 e0       	ldi	r20, 0x01	; 1
    4654:	24 c0       	rjmp	.+72     	; 0x469e <vfprintf+0xd6>
    4656:	52 e0       	ldi	r21, 0x02	; 2
    4658:	f5 2a       	or	r15, r21
    465a:	84 e0       	ldi	r24, 0x04	; 4
    465c:	f8 2a       	or	r15, r24
    465e:	28 c0       	rjmp	.+80     	; 0x46b0 <vfprintf+0xe8>
    4660:	98 e0       	ldi	r25, 0x08	; 8
    4662:	f9 2a       	or	r15, r25
    4664:	25 c0       	rjmp	.+74     	; 0x46b0 <vfprintf+0xe8>
    4666:	e0 e1       	ldi	r30, 0x10	; 16
    4668:	fe 2a       	or	r15, r30
    466a:	22 c0       	rjmp	.+68     	; 0x46b0 <vfprintf+0xe8>
    466c:	f7 fc       	sbrc	r15, 7
    466e:	29 c0       	rjmp	.+82     	; 0x46c2 <vfprintf+0xfa>
    4670:	89 2f       	mov	r24, r25
    4672:	80 53       	subi	r24, 0x30	; 48
    4674:	8a 30       	cpi	r24, 0x0A	; 10
    4676:	70 f4       	brcc	.+28     	; 0x4694 <vfprintf+0xcc>
    4678:	f6 fe       	sbrs	r15, 6
    467a:	05 c0       	rjmp	.+10     	; 0x4686 <vfprintf+0xbe>
    467c:	98 9c       	mul	r9, r8
    467e:	90 2c       	mov	r9, r0
    4680:	11 24       	eor	r1, r1
    4682:	98 0e       	add	r9, r24
    4684:	15 c0       	rjmp	.+42     	; 0x46b0 <vfprintf+0xe8>
    4686:	e8 9c       	mul	r14, r8
    4688:	e0 2c       	mov	r14, r0
    468a:	11 24       	eor	r1, r1
    468c:	e8 0e       	add	r14, r24
    468e:	f0 e2       	ldi	r31, 0x20	; 32
    4690:	ff 2a       	or	r15, r31
    4692:	0e c0       	rjmp	.+28     	; 0x46b0 <vfprintf+0xe8>
    4694:	9e 32       	cpi	r25, 0x2E	; 46
    4696:	29 f4       	brne	.+10     	; 0x46a2 <vfprintf+0xda>
    4698:	f6 fc       	sbrc	r15, 6
    469a:	6b c1       	rjmp	.+726    	; 0x4972 <vfprintf+0x3aa>
    469c:	40 e4       	ldi	r20, 0x40	; 64
    469e:	f4 2a       	or	r15, r20
    46a0:	07 c0       	rjmp	.+14     	; 0x46b0 <vfprintf+0xe8>
    46a2:	9c 36       	cpi	r25, 0x6C	; 108
    46a4:	19 f4       	brne	.+6      	; 0x46ac <vfprintf+0xe4>
    46a6:	50 e8       	ldi	r21, 0x80	; 128
    46a8:	f5 2a       	or	r15, r21
    46aa:	02 c0       	rjmp	.+4      	; 0x46b0 <vfprintf+0xe8>
    46ac:	98 36       	cpi	r25, 0x68	; 104
    46ae:	49 f4       	brne	.+18     	; 0x46c2 <vfprintf+0xfa>
    46b0:	f2 01       	movw	r30, r4
    46b2:	23 fd       	sbrc	r18, 3
    46b4:	95 91       	lpm	r25, Z+
    46b6:	23 ff       	sbrs	r18, 3
    46b8:	91 91       	ld	r25, Z+
    46ba:	2f 01       	movw	r4, r30
    46bc:	99 23       	and	r25, r25
    46be:	09 f0       	breq	.+2      	; 0x46c2 <vfprintf+0xfa>
    46c0:	b8 cf       	rjmp	.-144    	; 0x4632 <vfprintf+0x6a>
    46c2:	89 2f       	mov	r24, r25
    46c4:	85 54       	subi	r24, 0x45	; 69
    46c6:	83 30       	cpi	r24, 0x03	; 3
    46c8:	18 f0       	brcs	.+6      	; 0x46d0 <vfprintf+0x108>
    46ca:	80 52       	subi	r24, 0x20	; 32
    46cc:	83 30       	cpi	r24, 0x03	; 3
    46ce:	38 f4       	brcc	.+14     	; 0x46de <vfprintf+0x116>
    46d0:	44 e0       	ldi	r20, 0x04	; 4
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	a4 0e       	add	r10, r20
    46d6:	b5 1e       	adc	r11, r21
    46d8:	5f e3       	ldi	r21, 0x3F	; 63
    46da:	59 83       	std	Y+1, r21	; 0x01
    46dc:	0f c0       	rjmp	.+30     	; 0x46fc <vfprintf+0x134>
    46de:	93 36       	cpi	r25, 0x63	; 99
    46e0:	31 f0       	breq	.+12     	; 0x46ee <vfprintf+0x126>
    46e2:	93 37       	cpi	r25, 0x73	; 115
    46e4:	79 f0       	breq	.+30     	; 0x4704 <vfprintf+0x13c>
    46e6:	93 35       	cpi	r25, 0x53	; 83
    46e8:	09 f0       	breq	.+2      	; 0x46ec <vfprintf+0x124>
    46ea:	56 c0       	rjmp	.+172    	; 0x4798 <vfprintf+0x1d0>
    46ec:	20 c0       	rjmp	.+64     	; 0x472e <vfprintf+0x166>
    46ee:	f5 01       	movw	r30, r10
    46f0:	80 81       	ld	r24, Z
    46f2:	89 83       	std	Y+1, r24	; 0x01
    46f4:	42 e0       	ldi	r20, 0x02	; 2
    46f6:	50 e0       	ldi	r21, 0x00	; 0
    46f8:	a4 0e       	add	r10, r20
    46fa:	b5 1e       	adc	r11, r21
    46fc:	61 01       	movw	r12, r2
    46fe:	01 e0       	ldi	r16, 0x01	; 1
    4700:	10 e0       	ldi	r17, 0x00	; 0
    4702:	12 c0       	rjmp	.+36     	; 0x4728 <vfprintf+0x160>
    4704:	f5 01       	movw	r30, r10
    4706:	c0 80       	ld	r12, Z
    4708:	d1 80       	ldd	r13, Z+1	; 0x01
    470a:	f6 fc       	sbrc	r15, 6
    470c:	03 c0       	rjmp	.+6      	; 0x4714 <vfprintf+0x14c>
    470e:	6f ef       	ldi	r22, 0xFF	; 255
    4710:	7f ef       	ldi	r23, 0xFF	; 255
    4712:	02 c0       	rjmp	.+4      	; 0x4718 <vfprintf+0x150>
    4714:	69 2d       	mov	r22, r9
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	42 e0       	ldi	r20, 0x02	; 2
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	a4 0e       	add	r10, r20
    471e:	b5 1e       	adc	r11, r21
    4720:	c6 01       	movw	r24, r12
    4722:	0e 94 cc 24 	call	0x4998	; 0x4998 <strnlen>
    4726:	8c 01       	movw	r16, r24
    4728:	5f e7       	ldi	r21, 0x7F	; 127
    472a:	f5 22       	and	r15, r21
    472c:	14 c0       	rjmp	.+40     	; 0x4756 <vfprintf+0x18e>
    472e:	f5 01       	movw	r30, r10
    4730:	c0 80       	ld	r12, Z
    4732:	d1 80       	ldd	r13, Z+1	; 0x01
    4734:	f6 fc       	sbrc	r15, 6
    4736:	03 c0       	rjmp	.+6      	; 0x473e <vfprintf+0x176>
    4738:	6f ef       	ldi	r22, 0xFF	; 255
    473a:	7f ef       	ldi	r23, 0xFF	; 255
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <vfprintf+0x17a>
    473e:	69 2d       	mov	r22, r9
    4740:	70 e0       	ldi	r23, 0x00	; 0
    4742:	42 e0       	ldi	r20, 0x02	; 2
    4744:	50 e0       	ldi	r21, 0x00	; 0
    4746:	a4 0e       	add	r10, r20
    4748:	b5 1e       	adc	r11, r21
    474a:	c6 01       	movw	r24, r12
    474c:	0e 94 c1 24 	call	0x4982	; 0x4982 <strnlen_P>
    4750:	8c 01       	movw	r16, r24
    4752:	50 e8       	ldi	r21, 0x80	; 128
    4754:	f5 2a       	or	r15, r21
    4756:	f3 fe       	sbrs	r15, 3
    4758:	07 c0       	rjmp	.+14     	; 0x4768 <vfprintf+0x1a0>
    475a:	1a c0       	rjmp	.+52     	; 0x4790 <vfprintf+0x1c8>
    475c:	80 e2       	ldi	r24, 0x20	; 32
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	b3 01       	movw	r22, r6
    4762:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    4766:	ea 94       	dec	r14
    4768:	8e 2d       	mov	r24, r14
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	08 17       	cp	r16, r24
    476e:	19 07       	cpc	r17, r25
    4770:	a8 f3       	brcs	.-22     	; 0x475c <vfprintf+0x194>
    4772:	0e c0       	rjmp	.+28     	; 0x4790 <vfprintf+0x1c8>
    4774:	f6 01       	movw	r30, r12
    4776:	f7 fc       	sbrc	r15, 7
    4778:	85 91       	lpm	r24, Z+
    477a:	f7 fe       	sbrs	r15, 7
    477c:	81 91       	ld	r24, Z+
    477e:	6f 01       	movw	r12, r30
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	b3 01       	movw	r22, r6
    4784:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    4788:	e1 10       	cpse	r14, r1
    478a:	ea 94       	dec	r14
    478c:	01 50       	subi	r16, 0x01	; 1
    478e:	10 40       	sbci	r17, 0x00	; 0
    4790:	01 15       	cp	r16, r1
    4792:	11 05       	cpc	r17, r1
    4794:	79 f7       	brne	.-34     	; 0x4774 <vfprintf+0x1ac>
    4796:	ea c0       	rjmp	.+468    	; 0x496c <vfprintf+0x3a4>
    4798:	94 36       	cpi	r25, 0x64	; 100
    479a:	11 f0       	breq	.+4      	; 0x47a0 <vfprintf+0x1d8>
    479c:	99 36       	cpi	r25, 0x69	; 105
    479e:	69 f5       	brne	.+90     	; 0x47fa <vfprintf+0x232>
    47a0:	f7 fe       	sbrs	r15, 7
    47a2:	08 c0       	rjmp	.+16     	; 0x47b4 <vfprintf+0x1ec>
    47a4:	f5 01       	movw	r30, r10
    47a6:	20 81       	ld	r18, Z
    47a8:	31 81       	ldd	r19, Z+1	; 0x01
    47aa:	42 81       	ldd	r20, Z+2	; 0x02
    47ac:	53 81       	ldd	r21, Z+3	; 0x03
    47ae:	84 e0       	ldi	r24, 0x04	; 4
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	0a c0       	rjmp	.+20     	; 0x47c8 <vfprintf+0x200>
    47b4:	f5 01       	movw	r30, r10
    47b6:	80 81       	ld	r24, Z
    47b8:	91 81       	ldd	r25, Z+1	; 0x01
    47ba:	9c 01       	movw	r18, r24
    47bc:	44 27       	eor	r20, r20
    47be:	37 fd       	sbrc	r19, 7
    47c0:	40 95       	com	r20
    47c2:	54 2f       	mov	r21, r20
    47c4:	82 e0       	ldi	r24, 0x02	; 2
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	a8 0e       	add	r10, r24
    47ca:	b9 1e       	adc	r11, r25
    47cc:	9f e6       	ldi	r25, 0x6F	; 111
    47ce:	f9 22       	and	r15, r25
    47d0:	57 ff       	sbrs	r21, 7
    47d2:	09 c0       	rjmp	.+18     	; 0x47e6 <vfprintf+0x21e>
    47d4:	50 95       	com	r21
    47d6:	40 95       	com	r20
    47d8:	30 95       	com	r19
    47da:	21 95       	neg	r18
    47dc:	3f 4f       	sbci	r19, 0xFF	; 255
    47de:	4f 4f       	sbci	r20, 0xFF	; 255
    47e0:	5f 4f       	sbci	r21, 0xFF	; 255
    47e2:	e0 e8       	ldi	r30, 0x80	; 128
    47e4:	fe 2a       	or	r15, r30
    47e6:	ca 01       	movw	r24, r20
    47e8:	b9 01       	movw	r22, r18
    47ea:	a1 01       	movw	r20, r2
    47ec:	2a e0       	ldi	r18, 0x0A	; 10
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__ultoa_invert>
    47f4:	d8 2e       	mov	r13, r24
    47f6:	d2 18       	sub	r13, r2
    47f8:	40 c0       	rjmp	.+128    	; 0x487a <vfprintf+0x2b2>
    47fa:	95 37       	cpi	r25, 0x75	; 117
    47fc:	29 f4       	brne	.+10     	; 0x4808 <vfprintf+0x240>
    47fe:	1f 2d       	mov	r17, r15
    4800:	1f 7e       	andi	r17, 0xEF	; 239
    4802:	2a e0       	ldi	r18, 0x0A	; 10
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	1d c0       	rjmp	.+58     	; 0x4842 <vfprintf+0x27a>
    4808:	1f 2d       	mov	r17, r15
    480a:	19 7f       	andi	r17, 0xF9	; 249
    480c:	9f 36       	cpi	r25, 0x6F	; 111
    480e:	61 f0       	breq	.+24     	; 0x4828 <vfprintf+0x260>
    4810:	90 37       	cpi	r25, 0x70	; 112
    4812:	20 f4       	brcc	.+8      	; 0x481c <vfprintf+0x254>
    4814:	98 35       	cpi	r25, 0x58	; 88
    4816:	09 f0       	breq	.+2      	; 0x481a <vfprintf+0x252>
    4818:	ac c0       	rjmp	.+344    	; 0x4972 <vfprintf+0x3aa>
    481a:	0f c0       	rjmp	.+30     	; 0x483a <vfprintf+0x272>
    481c:	90 37       	cpi	r25, 0x70	; 112
    481e:	39 f0       	breq	.+14     	; 0x482e <vfprintf+0x266>
    4820:	98 37       	cpi	r25, 0x78	; 120
    4822:	09 f0       	breq	.+2      	; 0x4826 <vfprintf+0x25e>
    4824:	a6 c0       	rjmp	.+332    	; 0x4972 <vfprintf+0x3aa>
    4826:	04 c0       	rjmp	.+8      	; 0x4830 <vfprintf+0x268>
    4828:	28 e0       	ldi	r18, 0x08	; 8
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	0a c0       	rjmp	.+20     	; 0x4842 <vfprintf+0x27a>
    482e:	10 61       	ori	r17, 0x10	; 16
    4830:	14 fd       	sbrc	r17, 4
    4832:	14 60       	ori	r17, 0x04	; 4
    4834:	20 e1       	ldi	r18, 0x10	; 16
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	04 c0       	rjmp	.+8      	; 0x4842 <vfprintf+0x27a>
    483a:	14 fd       	sbrc	r17, 4
    483c:	16 60       	ori	r17, 0x06	; 6
    483e:	20 e1       	ldi	r18, 0x10	; 16
    4840:	32 e0       	ldi	r19, 0x02	; 2
    4842:	17 ff       	sbrs	r17, 7
    4844:	08 c0       	rjmp	.+16     	; 0x4856 <vfprintf+0x28e>
    4846:	f5 01       	movw	r30, r10
    4848:	60 81       	ld	r22, Z
    484a:	71 81       	ldd	r23, Z+1	; 0x01
    484c:	82 81       	ldd	r24, Z+2	; 0x02
    484e:	93 81       	ldd	r25, Z+3	; 0x03
    4850:	44 e0       	ldi	r20, 0x04	; 4
    4852:	50 e0       	ldi	r21, 0x00	; 0
    4854:	08 c0       	rjmp	.+16     	; 0x4866 <vfprintf+0x29e>
    4856:	f5 01       	movw	r30, r10
    4858:	80 81       	ld	r24, Z
    485a:	91 81       	ldd	r25, Z+1	; 0x01
    485c:	bc 01       	movw	r22, r24
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	42 e0       	ldi	r20, 0x02	; 2
    4864:	50 e0       	ldi	r21, 0x00	; 0
    4866:	a4 0e       	add	r10, r20
    4868:	b5 1e       	adc	r11, r21
    486a:	a1 01       	movw	r20, r2
    486c:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__ultoa_invert>
    4870:	d8 2e       	mov	r13, r24
    4872:	d2 18       	sub	r13, r2
    4874:	8f e7       	ldi	r24, 0x7F	; 127
    4876:	f8 2e       	mov	r15, r24
    4878:	f1 22       	and	r15, r17
    487a:	f6 fe       	sbrs	r15, 6
    487c:	0b c0       	rjmp	.+22     	; 0x4894 <vfprintf+0x2cc>
    487e:	5e ef       	ldi	r21, 0xFE	; 254
    4880:	f5 22       	and	r15, r21
    4882:	d9 14       	cp	r13, r9
    4884:	38 f4       	brcc	.+14     	; 0x4894 <vfprintf+0x2cc>
    4886:	f4 fe       	sbrs	r15, 4
    4888:	07 c0       	rjmp	.+14     	; 0x4898 <vfprintf+0x2d0>
    488a:	f2 fc       	sbrc	r15, 2
    488c:	05 c0       	rjmp	.+10     	; 0x4898 <vfprintf+0x2d0>
    488e:	8f ee       	ldi	r24, 0xEF	; 239
    4890:	f8 22       	and	r15, r24
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <vfprintf+0x2d0>
    4894:	1d 2d       	mov	r17, r13
    4896:	01 c0       	rjmp	.+2      	; 0x489a <vfprintf+0x2d2>
    4898:	19 2d       	mov	r17, r9
    489a:	f4 fe       	sbrs	r15, 4
    489c:	0d c0       	rjmp	.+26     	; 0x48b8 <vfprintf+0x2f0>
    489e:	fe 01       	movw	r30, r28
    48a0:	ed 0d       	add	r30, r13
    48a2:	f1 1d       	adc	r31, r1
    48a4:	80 81       	ld	r24, Z
    48a6:	80 33       	cpi	r24, 0x30	; 48
    48a8:	19 f4       	brne	.+6      	; 0x48b0 <vfprintf+0x2e8>
    48aa:	99 ee       	ldi	r25, 0xE9	; 233
    48ac:	f9 22       	and	r15, r25
    48ae:	08 c0       	rjmp	.+16     	; 0x48c0 <vfprintf+0x2f8>
    48b0:	1f 5f       	subi	r17, 0xFF	; 255
    48b2:	f2 fe       	sbrs	r15, 2
    48b4:	05 c0       	rjmp	.+10     	; 0x48c0 <vfprintf+0x2f8>
    48b6:	03 c0       	rjmp	.+6      	; 0x48be <vfprintf+0x2f6>
    48b8:	8f 2d       	mov	r24, r15
    48ba:	86 78       	andi	r24, 0x86	; 134
    48bc:	09 f0       	breq	.+2      	; 0x48c0 <vfprintf+0x2f8>
    48be:	1f 5f       	subi	r17, 0xFF	; 255
    48c0:	0f 2d       	mov	r16, r15
    48c2:	f3 fc       	sbrc	r15, 3
    48c4:	14 c0       	rjmp	.+40     	; 0x48ee <vfprintf+0x326>
    48c6:	f0 fe       	sbrs	r15, 0
    48c8:	0f c0       	rjmp	.+30     	; 0x48e8 <vfprintf+0x320>
    48ca:	1e 15       	cp	r17, r14
    48cc:	10 f0       	brcs	.+4      	; 0x48d2 <vfprintf+0x30a>
    48ce:	9d 2c       	mov	r9, r13
    48d0:	0b c0       	rjmp	.+22     	; 0x48e8 <vfprintf+0x320>
    48d2:	9d 2c       	mov	r9, r13
    48d4:	9e 0c       	add	r9, r14
    48d6:	91 1a       	sub	r9, r17
    48d8:	1e 2d       	mov	r17, r14
    48da:	06 c0       	rjmp	.+12     	; 0x48e8 <vfprintf+0x320>
    48dc:	80 e2       	ldi	r24, 0x20	; 32
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	b3 01       	movw	r22, r6
    48e2:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    48e6:	1f 5f       	subi	r17, 0xFF	; 255
    48e8:	1e 15       	cp	r17, r14
    48ea:	c0 f3       	brcs	.-16     	; 0x48dc <vfprintf+0x314>
    48ec:	04 c0       	rjmp	.+8      	; 0x48f6 <vfprintf+0x32e>
    48ee:	1e 15       	cp	r17, r14
    48f0:	10 f4       	brcc	.+4      	; 0x48f6 <vfprintf+0x32e>
    48f2:	e1 1a       	sub	r14, r17
    48f4:	01 c0       	rjmp	.+2      	; 0x48f8 <vfprintf+0x330>
    48f6:	ee 24       	eor	r14, r14
    48f8:	04 ff       	sbrs	r16, 4
    48fa:	0f c0       	rjmp	.+30     	; 0x491a <vfprintf+0x352>
    48fc:	80 e3       	ldi	r24, 0x30	; 48
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	b3 01       	movw	r22, r6
    4902:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    4906:	02 ff       	sbrs	r16, 2
    4908:	1d c0       	rjmp	.+58     	; 0x4944 <vfprintf+0x37c>
    490a:	01 fd       	sbrc	r16, 1
    490c:	03 c0       	rjmp	.+6      	; 0x4914 <vfprintf+0x34c>
    490e:	88 e7       	ldi	r24, 0x78	; 120
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0e c0       	rjmp	.+28     	; 0x4930 <vfprintf+0x368>
    4914:	88 e5       	ldi	r24, 0x58	; 88
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0b c0       	rjmp	.+22     	; 0x4930 <vfprintf+0x368>
    491a:	80 2f       	mov	r24, r16
    491c:	86 78       	andi	r24, 0x86	; 134
    491e:	91 f0       	breq	.+36     	; 0x4944 <vfprintf+0x37c>
    4920:	01 ff       	sbrs	r16, 1
    4922:	02 c0       	rjmp	.+4      	; 0x4928 <vfprintf+0x360>
    4924:	8b e2       	ldi	r24, 0x2B	; 43
    4926:	01 c0       	rjmp	.+2      	; 0x492a <vfprintf+0x362>
    4928:	80 e2       	ldi	r24, 0x20	; 32
    492a:	f7 fc       	sbrc	r15, 7
    492c:	8d e2       	ldi	r24, 0x2D	; 45
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	b3 01       	movw	r22, r6
    4932:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    4936:	06 c0       	rjmp	.+12     	; 0x4944 <vfprintf+0x37c>
    4938:	80 e3       	ldi	r24, 0x30	; 48
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	b3 01       	movw	r22, r6
    493e:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    4942:	9a 94       	dec	r9
    4944:	d9 14       	cp	r13, r9
    4946:	c0 f3       	brcs	.-16     	; 0x4938 <vfprintf+0x370>
    4948:	da 94       	dec	r13
    494a:	f1 01       	movw	r30, r2
    494c:	ed 0d       	add	r30, r13
    494e:	f1 1d       	adc	r31, r1
    4950:	80 81       	ld	r24, Z
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	b3 01       	movw	r22, r6
    4956:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    495a:	dd 20       	and	r13, r13
    495c:	a9 f7       	brne	.-22     	; 0x4948 <vfprintf+0x380>
    495e:	06 c0       	rjmp	.+12     	; 0x496c <vfprintf+0x3a4>
    4960:	80 e2       	ldi	r24, 0x20	; 32
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	b3 01       	movw	r22, r6
    4966:	0e 94 d7 24 	call	0x49ae	; 0x49ae <fputc>
    496a:	ea 94       	dec	r14
    496c:	ee 20       	and	r14, r14
    496e:	c1 f7       	brne	.-16     	; 0x4960 <vfprintf+0x398>
    4970:	43 ce       	rjmp	.-890    	; 0x45f8 <vfprintf+0x30>
    4972:	f3 01       	movw	r30, r6
    4974:	66 81       	ldd	r22, Z+6	; 0x06
    4976:	77 81       	ldd	r23, Z+7	; 0x07
    4978:	cb 01       	movw	r24, r22
    497a:	2b 96       	adiw	r28, 0x0b	; 11
    497c:	e2 e1       	ldi	r30, 0x12	; 18
    497e:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__epilogue_restores__>

00004982 <strnlen_P>:
    4982:	fc 01       	movw	r30, r24
    4984:	05 90       	lpm	r0, Z+
    4986:	61 50       	subi	r22, 0x01	; 1
    4988:	70 40       	sbci	r23, 0x00	; 0
    498a:	01 10       	cpse	r0, r1
    498c:	d8 f7       	brcc	.-10     	; 0x4984 <strnlen_P+0x2>
    498e:	80 95       	com	r24
    4990:	90 95       	com	r25
    4992:	8e 0f       	add	r24, r30
    4994:	9f 1f       	adc	r25, r31
    4996:	08 95       	ret

00004998 <strnlen>:
    4998:	fc 01       	movw	r30, r24
    499a:	61 50       	subi	r22, 0x01	; 1
    499c:	70 40       	sbci	r23, 0x00	; 0
    499e:	01 90       	ld	r0, Z+
    49a0:	01 10       	cpse	r0, r1
    49a2:	d8 f7       	brcc	.-10     	; 0x499a <strnlen+0x2>
    49a4:	80 95       	com	r24
    49a6:	90 95       	com	r25
    49a8:	8e 0f       	add	r24, r30
    49aa:	9f 1f       	adc	r25, r31
    49ac:	08 95       	ret

000049ae <fputc>:
    49ae:	0f 93       	push	r16
    49b0:	1f 93       	push	r17
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
    49b6:	8c 01       	movw	r16, r24
    49b8:	eb 01       	movw	r28, r22
    49ba:	8b 81       	ldd	r24, Y+3	; 0x03
    49bc:	81 ff       	sbrs	r24, 1
    49be:	1b c0       	rjmp	.+54     	; 0x49f6 <fputc+0x48>
    49c0:	82 ff       	sbrs	r24, 2
    49c2:	0d c0       	rjmp	.+26     	; 0x49de <fputc+0x30>
    49c4:	2e 81       	ldd	r18, Y+6	; 0x06
    49c6:	3f 81       	ldd	r19, Y+7	; 0x07
    49c8:	8c 81       	ldd	r24, Y+4	; 0x04
    49ca:	9d 81       	ldd	r25, Y+5	; 0x05
    49cc:	28 17       	cp	r18, r24
    49ce:	39 07       	cpc	r19, r25
    49d0:	64 f4       	brge	.+24     	; 0x49ea <fputc+0x3c>
    49d2:	e8 81       	ld	r30, Y
    49d4:	f9 81       	ldd	r31, Y+1	; 0x01
    49d6:	01 93       	st	Z+, r16
    49d8:	f9 83       	std	Y+1, r31	; 0x01
    49da:	e8 83       	st	Y, r30
    49dc:	06 c0       	rjmp	.+12     	; 0x49ea <fputc+0x3c>
    49de:	e8 85       	ldd	r30, Y+8	; 0x08
    49e0:	f9 85       	ldd	r31, Y+9	; 0x09
    49e2:	80 2f       	mov	r24, r16
    49e4:	09 95       	icall
    49e6:	89 2b       	or	r24, r25
    49e8:	31 f4       	brne	.+12     	; 0x49f6 <fputc+0x48>
    49ea:	8e 81       	ldd	r24, Y+6	; 0x06
    49ec:	9f 81       	ldd	r25, Y+7	; 0x07
    49ee:	01 96       	adiw	r24, 0x01	; 1
    49f0:	9f 83       	std	Y+7, r25	; 0x07
    49f2:	8e 83       	std	Y+6, r24	; 0x06
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <fputc+0x4c>
    49f6:	0f ef       	ldi	r16, 0xFF	; 255
    49f8:	1f ef       	ldi	r17, 0xFF	; 255
    49fa:	c8 01       	movw	r24, r16
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	08 95       	ret

00004a06 <__ultoa_invert>:
    4a06:	fa 01       	movw	r30, r20
    4a08:	aa 27       	eor	r26, r26
    4a0a:	28 30       	cpi	r18, 0x08	; 8
    4a0c:	51 f1       	breq	.+84     	; 0x4a62 <__ultoa_invert+0x5c>
    4a0e:	20 31       	cpi	r18, 0x10	; 16
    4a10:	81 f1       	breq	.+96     	; 0x4a72 <__ultoa_invert+0x6c>
    4a12:	e8 94       	clt
    4a14:	6f 93       	push	r22
    4a16:	6e 7f       	andi	r22, 0xFE	; 254
    4a18:	6e 5f       	subi	r22, 0xFE	; 254
    4a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a20:	af 4f       	sbci	r26, 0xFF	; 255
    4a22:	b1 e0       	ldi	r27, 0x01	; 1
    4a24:	3e d0       	rcall	.+124    	; 0x4aa2 <__ultoa_invert+0x9c>
    4a26:	b4 e0       	ldi	r27, 0x04	; 4
    4a28:	3c d0       	rcall	.+120    	; 0x4aa2 <__ultoa_invert+0x9c>
    4a2a:	67 0f       	add	r22, r23
    4a2c:	78 1f       	adc	r23, r24
    4a2e:	89 1f       	adc	r24, r25
    4a30:	9a 1f       	adc	r25, r26
    4a32:	a1 1d       	adc	r26, r1
    4a34:	68 0f       	add	r22, r24
    4a36:	79 1f       	adc	r23, r25
    4a38:	8a 1f       	adc	r24, r26
    4a3a:	91 1d       	adc	r25, r1
    4a3c:	a1 1d       	adc	r26, r1
    4a3e:	6a 0f       	add	r22, r26
    4a40:	71 1d       	adc	r23, r1
    4a42:	81 1d       	adc	r24, r1
    4a44:	91 1d       	adc	r25, r1
    4a46:	a1 1d       	adc	r26, r1
    4a48:	20 d0       	rcall	.+64     	; 0x4a8a <__ultoa_invert+0x84>
    4a4a:	09 f4       	brne	.+2      	; 0x4a4e <__ultoa_invert+0x48>
    4a4c:	68 94       	set
    4a4e:	3f 91       	pop	r19
    4a50:	2a e0       	ldi	r18, 0x0A	; 10
    4a52:	26 9f       	mul	r18, r22
    4a54:	11 24       	eor	r1, r1
    4a56:	30 19       	sub	r19, r0
    4a58:	30 5d       	subi	r19, 0xD0	; 208
    4a5a:	31 93       	st	Z+, r19
    4a5c:	de f6       	brtc	.-74     	; 0x4a14 <__ultoa_invert+0xe>
    4a5e:	cf 01       	movw	r24, r30
    4a60:	08 95       	ret
    4a62:	46 2f       	mov	r20, r22
    4a64:	47 70       	andi	r20, 0x07	; 7
    4a66:	40 5d       	subi	r20, 0xD0	; 208
    4a68:	41 93       	st	Z+, r20
    4a6a:	b3 e0       	ldi	r27, 0x03	; 3
    4a6c:	0f d0       	rcall	.+30     	; 0x4a8c <__ultoa_invert+0x86>
    4a6e:	c9 f7       	brne	.-14     	; 0x4a62 <__ultoa_invert+0x5c>
    4a70:	f6 cf       	rjmp	.-20     	; 0x4a5e <__ultoa_invert+0x58>
    4a72:	46 2f       	mov	r20, r22
    4a74:	4f 70       	andi	r20, 0x0F	; 15
    4a76:	40 5d       	subi	r20, 0xD0	; 208
    4a78:	4a 33       	cpi	r20, 0x3A	; 58
    4a7a:	18 f0       	brcs	.+6      	; 0x4a82 <__ultoa_invert+0x7c>
    4a7c:	49 5d       	subi	r20, 0xD9	; 217
    4a7e:	31 fd       	sbrc	r19, 1
    4a80:	40 52       	subi	r20, 0x20	; 32
    4a82:	41 93       	st	Z+, r20
    4a84:	02 d0       	rcall	.+4      	; 0x4a8a <__ultoa_invert+0x84>
    4a86:	a9 f7       	brne	.-22     	; 0x4a72 <__ultoa_invert+0x6c>
    4a88:	ea cf       	rjmp	.-44     	; 0x4a5e <__ultoa_invert+0x58>
    4a8a:	b4 e0       	ldi	r27, 0x04	; 4
    4a8c:	a6 95       	lsr	r26
    4a8e:	97 95       	ror	r25
    4a90:	87 95       	ror	r24
    4a92:	77 95       	ror	r23
    4a94:	67 95       	ror	r22
    4a96:	ba 95       	dec	r27
    4a98:	c9 f7       	brne	.-14     	; 0x4a8c <__ultoa_invert+0x86>
    4a9a:	00 97       	sbiw	r24, 0x00	; 0
    4a9c:	61 05       	cpc	r22, r1
    4a9e:	71 05       	cpc	r23, r1
    4aa0:	08 95       	ret
    4aa2:	9b 01       	movw	r18, r22
    4aa4:	ac 01       	movw	r20, r24
    4aa6:	0a 2e       	mov	r0, r26
    4aa8:	06 94       	lsr	r0
    4aaa:	57 95       	ror	r21
    4aac:	47 95       	ror	r20
    4aae:	37 95       	ror	r19
    4ab0:	27 95       	ror	r18
    4ab2:	ba 95       	dec	r27
    4ab4:	c9 f7       	brne	.-14     	; 0x4aa8 <__ultoa_invert+0xa2>
    4ab6:	62 0f       	add	r22, r18
    4ab8:	73 1f       	adc	r23, r19
    4aba:	84 1f       	adc	r24, r20
    4abc:	95 1f       	adc	r25, r21
    4abe:	a0 1d       	adc	r26, r0
    4ac0:	08 95       	ret

00004ac2 <_exit>:
    4ac2:	f8 94       	cli

00004ac4 <__stop_program>:
    4ac4:	ff cf       	rjmp	.-2      	; 0x4ac4 <__stop_program>
